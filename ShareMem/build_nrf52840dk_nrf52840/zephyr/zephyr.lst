
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20001ee0 	.word	0x20001ee0
}
   4:	00001ef5 	.word	0x00001ef5
   8:	000084ab 	.word	0x000084ab
   c:	00001ee1 	.word	0x00001ee1
  10:	00001ee1 	.word	0x00001ee1
  14:	00001ee1 	.word	0x00001ee1
  18:	00001ee1 	.word	0x00001ee1
	...
  2c:	00001cfd 	.word	0x00001cfd
  30:	00001ee1 	.word	0x00001ee1
  34:	00000000 	.word	0x00000000
  38:	00001ca9 	.word	0x00001ca9
  3c:	00001ee1 	.word	0x00001ee1

00000040 <_irq_vector_table>:
  40:	00001c61 00001c61 00001c61 00001c61     a...a...a...a...
  50:	00001c61 00001c61 00001c61 00001c61     a...a...a...a...
  60:	00001c61 00001c61 00001c61 00001c61     a...a...a...a...
  70:	00001c61 00001c61 00001c61 00001c61     a...a...a...a...
  80:	00001c61 00001c61 00001c61 00001c61     a...a...a...a...
  90:	00001c61 00001c61 00001c61 00001c61     a...a...a...a...
  a0:	00001c61 00001c61 00001c61 00001c61     a...a...a...a...
  b0:	00001c61 00001c61 00001c61 00001c61     a...a...a...a...
  c0:	00001c61 00001c61 00001c61 00001c61     a...a...a...a...
  d0:	00001c61 00001c61 00001c61 00001c61     a...a...a...a...
  e0:	00001c61 00001c61 00001c61 00001c61     a...a...a...a...
  f0:	00001c61 00001c61 00001c61 00001c61     a...a...a...a...

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b96c 	b.w	3f0 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f806 	bl	130 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__udivmoddi4>:
     130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     134:	9e08      	ldr	r6, [sp, #32]
     136:	460d      	mov	r5, r1
     138:	4604      	mov	r4, r0
     13a:	468e      	mov	lr, r1
     13c:	2b00      	cmp	r3, #0
     13e:	f040 8082 	bne.w	246 <__data_size+0x5a>
     142:	428a      	cmp	r2, r1
     144:	4617      	mov	r7, r2
     146:	d946      	bls.n	1d6 <CONFIG_IDLE_STACK_SIZE+0x96>
     148:	fab2 f282 	clz	r2, r2
     14c:	b14a      	cbz	r2, 162 <CONFIG_IDLE_STACK_SIZE+0x22>
     14e:	f1c2 0120 	rsb	r1, r2, #32
     152:	fa05 f302 	lsl.w	r3, r5, r2
     156:	fa20 f101 	lsr.w	r1, r0, r1
     15a:	4097      	lsls	r7, r2
     15c:	ea41 0e03 	orr.w	lr, r1, r3
     160:	4094      	lsls	r4, r2
     162:	ea4f 4817 	mov.w	r8, r7, lsr #16
     166:	0c23      	lsrs	r3, r4, #16
     168:	fbbe fcf8 	udiv	ip, lr, r8
     16c:	b2b9      	uxth	r1, r7
     16e:	fb08 ee1c 	mls	lr, r8, ip, lr
     172:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     176:	fb0c f001 	mul.w	r0, ip, r1
     17a:	4298      	cmp	r0, r3
     17c:	d90a      	bls.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     17e:	18fb      	adds	r3, r7, r3
     180:	f10c 35ff 	add.w	r5, ip, #4294967295
     184:	f080 8116 	bcs.w	3b4 <__data_size+0x1c8>
     188:	4298      	cmp	r0, r3
     18a:	f240 8113 	bls.w	3b4 <__data_size+0x1c8>
     18e:	f1ac 0c02 	sub.w	ip, ip, #2
     192:	443b      	add	r3, r7
     194:	1a1b      	subs	r3, r3, r0
     196:	b2a4      	uxth	r4, r4
     198:	fbb3 f0f8 	udiv	r0, r3, r8
     19c:	fb08 3310 	mls	r3, r8, r0, r3
     1a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1a4:	fb00 f101 	mul.w	r1, r0, r1
     1a8:	42a1      	cmp	r1, r4
     1aa:	d909      	bls.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     1ac:	193c      	adds	r4, r7, r4
     1ae:	f100 33ff 	add.w	r3, r0, #4294967295
     1b2:	f080 8101 	bcs.w	3b8 <__data_size+0x1cc>
     1b6:	42a1      	cmp	r1, r4
     1b8:	f240 80fe 	bls.w	3b8 <__data_size+0x1cc>
     1bc:	3802      	subs	r0, #2
     1be:	443c      	add	r4, r7
     1c0:	1a64      	subs	r4, r4, r1
     1c2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     1c6:	2100      	movs	r1, #0
     1c8:	b11e      	cbz	r6, 1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     1ca:	40d4      	lsrs	r4, r2
     1cc:	2300      	movs	r3, #0
     1ce:	e9c6 4300 	strd	r4, r3, [r6]
     1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d6:	b902      	cbnz	r2, 1da <CONFIG_IDLE_STACK_SIZE+0x9a>
     1d8:	deff      	udf	#255	; 0xff
     1da:	fab2 f282 	clz	r2, r2
     1de:	2a00      	cmp	r2, #0
     1e0:	d14f      	bne.n	282 <__data_size+0x96>
     1e2:	1bcb      	subs	r3, r1, r7
     1e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1e8:	fa1f f887 	uxth.w	r8, r7
     1ec:	2101      	movs	r1, #1
     1ee:	fbb3 fcfe 	udiv	ip, r3, lr
     1f2:	0c25      	lsrs	r5, r4, #16
     1f4:	fb0e 331c 	mls	r3, lr, ip, r3
     1f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     1fc:	fb08 f30c 	mul.w	r3, r8, ip
     200:	42ab      	cmp	r3, r5
     202:	d907      	bls.n	214 <__data_size+0x28>
     204:	197d      	adds	r5, r7, r5
     206:	f10c 30ff 	add.w	r0, ip, #4294967295
     20a:	d202      	bcs.n	212 <__data_size+0x26>
     20c:	42ab      	cmp	r3, r5
     20e:	f200 80e7 	bhi.w	3e0 <__data_size+0x1f4>
     212:	4684      	mov	ip, r0
     214:	1aed      	subs	r5, r5, r3
     216:	b2a3      	uxth	r3, r4
     218:	fbb5 f0fe 	udiv	r0, r5, lr
     21c:	fb0e 5510 	mls	r5, lr, r0, r5
     220:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     224:	fb08 f800 	mul.w	r8, r8, r0
     228:	45a0      	cmp	r8, r4
     22a:	d907      	bls.n	23c <__data_size+0x50>
     22c:	193c      	adds	r4, r7, r4
     22e:	f100 33ff 	add.w	r3, r0, #4294967295
     232:	d202      	bcs.n	23a <__data_size+0x4e>
     234:	45a0      	cmp	r8, r4
     236:	f200 80d7 	bhi.w	3e8 <__data_size+0x1fc>
     23a:	4618      	mov	r0, r3
     23c:	eba4 0408 	sub.w	r4, r4, r8
     240:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     244:	e7c0      	b.n	1c8 <CONFIG_IDLE_STACK_SIZE+0x88>
     246:	428b      	cmp	r3, r1
     248:	d908      	bls.n	25c <__data_size+0x70>
     24a:	2e00      	cmp	r6, #0
     24c:	f000 80af 	beq.w	3ae <__data_size+0x1c2>
     250:	2100      	movs	r1, #0
     252:	e9c6 0500 	strd	r0, r5, [r6]
     256:	4608      	mov	r0, r1
     258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     25c:	fab3 f183 	clz	r1, r3
     260:	2900      	cmp	r1, #0
     262:	d14b      	bne.n	2fc <__data_size+0x110>
     264:	42ab      	cmp	r3, r5
     266:	d302      	bcc.n	26e <__data_size+0x82>
     268:	4282      	cmp	r2, r0
     26a:	f200 80b7 	bhi.w	3dc <__data_size+0x1f0>
     26e:	1a84      	subs	r4, r0, r2
     270:	eb65 0303 	sbc.w	r3, r5, r3
     274:	2001      	movs	r0, #1
     276:	469e      	mov	lr, r3
     278:	2e00      	cmp	r6, #0
     27a:	d0aa      	beq.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     27c:	e9c6 4e00 	strd	r4, lr, [r6]
     280:	e7a7      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     282:	f1c2 0c20 	rsb	ip, r2, #32
     286:	fa01 f302 	lsl.w	r3, r1, r2
     28a:	4097      	lsls	r7, r2
     28c:	fa20 f00c 	lsr.w	r0, r0, ip
     290:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     294:	fa21 fc0c 	lsr.w	ip, r1, ip
     298:	4318      	orrs	r0, r3
     29a:	fbbc f1fe 	udiv	r1, ip, lr
     29e:	0c05      	lsrs	r5, r0, #16
     2a0:	fb0e cc11 	mls	ip, lr, r1, ip
     2a4:	fa1f f887 	uxth.w	r8, r7
     2a8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2ac:	fb01 f308 	mul.w	r3, r1, r8
     2b0:	42ab      	cmp	r3, r5
     2b2:	fa04 f402 	lsl.w	r4, r4, r2
     2b6:	d909      	bls.n	2cc <__data_size+0xe0>
     2b8:	197d      	adds	r5, r7, r5
     2ba:	f101 3cff 	add.w	ip, r1, #4294967295
     2be:	f080 808b 	bcs.w	3d8 <__data_size+0x1ec>
     2c2:	42ab      	cmp	r3, r5
     2c4:	f240 8088 	bls.w	3d8 <__data_size+0x1ec>
     2c8:	3902      	subs	r1, #2
     2ca:	443d      	add	r5, r7
     2cc:	1aeb      	subs	r3, r5, r3
     2ce:	b285      	uxth	r5, r0
     2d0:	fbb3 f0fe 	udiv	r0, r3, lr
     2d4:	fb0e 3310 	mls	r3, lr, r0, r3
     2d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     2dc:	fb00 f308 	mul.w	r3, r0, r8
     2e0:	42ab      	cmp	r3, r5
     2e2:	d907      	bls.n	2f4 <__data_size+0x108>
     2e4:	197d      	adds	r5, r7, r5
     2e6:	f100 3cff 	add.w	ip, r0, #4294967295
     2ea:	d271      	bcs.n	3d0 <__data_size+0x1e4>
     2ec:	42ab      	cmp	r3, r5
     2ee:	d96f      	bls.n	3d0 <__data_size+0x1e4>
     2f0:	3802      	subs	r0, #2
     2f2:	443d      	add	r5, r7
     2f4:	1aeb      	subs	r3, r5, r3
     2f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2fa:	e778      	b.n	1ee <__data_size+0x2>
     2fc:	f1c1 0c20 	rsb	ip, r1, #32
     300:	408b      	lsls	r3, r1
     302:	fa22 f70c 	lsr.w	r7, r2, ip
     306:	431f      	orrs	r7, r3
     308:	fa20 f40c 	lsr.w	r4, r0, ip
     30c:	fa05 f301 	lsl.w	r3, r5, r1
     310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     314:	fa25 f50c 	lsr.w	r5, r5, ip
     318:	431c      	orrs	r4, r3
     31a:	0c23      	lsrs	r3, r4, #16
     31c:	fbb5 f9fe 	udiv	r9, r5, lr
     320:	fa1f f887 	uxth.w	r8, r7
     324:	fb0e 5519 	mls	r5, lr, r9, r5
     328:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     32c:	fb09 fa08 	mul.w	sl, r9, r8
     330:	45aa      	cmp	sl, r5
     332:	fa02 f201 	lsl.w	r2, r2, r1
     336:	fa00 f301 	lsl.w	r3, r0, r1
     33a:	d908      	bls.n	34e <__data_size+0x162>
     33c:	197d      	adds	r5, r7, r5
     33e:	f109 30ff 	add.w	r0, r9, #4294967295
     342:	d247      	bcs.n	3d4 <__data_size+0x1e8>
     344:	45aa      	cmp	sl, r5
     346:	d945      	bls.n	3d4 <__data_size+0x1e8>
     348:	f1a9 0902 	sub.w	r9, r9, #2
     34c:	443d      	add	r5, r7
     34e:	eba5 050a 	sub.w	r5, r5, sl
     352:	b2a4      	uxth	r4, r4
     354:	fbb5 f0fe 	udiv	r0, r5, lr
     358:	fb0e 5510 	mls	r5, lr, r0, r5
     35c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     360:	fb00 f808 	mul.w	r8, r0, r8
     364:	45a0      	cmp	r8, r4
     366:	d907      	bls.n	378 <__data_size+0x18c>
     368:	193c      	adds	r4, r7, r4
     36a:	f100 35ff 	add.w	r5, r0, #4294967295
     36e:	d22d      	bcs.n	3cc <__data_size+0x1e0>
     370:	45a0      	cmp	r8, r4
     372:	d92b      	bls.n	3cc <__data_size+0x1e0>
     374:	3802      	subs	r0, #2
     376:	443c      	add	r4, r7
     378:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     37c:	eba4 0408 	sub.w	r4, r4, r8
     380:	fba0 8902 	umull	r8, r9, r0, r2
     384:	454c      	cmp	r4, r9
     386:	46c6      	mov	lr, r8
     388:	464d      	mov	r5, r9
     38a:	d319      	bcc.n	3c0 <__data_size+0x1d4>
     38c:	d016      	beq.n	3bc <__data_size+0x1d0>
     38e:	b15e      	cbz	r6, 3a8 <__data_size+0x1bc>
     390:	ebb3 020e 	subs.w	r2, r3, lr
     394:	eb64 0405 	sbc.w	r4, r4, r5
     398:	fa04 fc0c 	lsl.w	ip, r4, ip
     39c:	40ca      	lsrs	r2, r1
     39e:	ea4c 0202 	orr.w	r2, ip, r2
     3a2:	40cc      	lsrs	r4, r1
     3a4:	e9c6 2400 	strd	r2, r4, [r6]
     3a8:	2100      	movs	r1, #0
     3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3ae:	4631      	mov	r1, r6
     3b0:	4630      	mov	r0, r6
     3b2:	e70e      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     3b4:	46ac      	mov	ip, r5
     3b6:	e6ed      	b.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     3b8:	4618      	mov	r0, r3
     3ba:	e701      	b.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     3bc:	4543      	cmp	r3, r8
     3be:	d2e6      	bcs.n	38e <__data_size+0x1a2>
     3c0:	ebb8 0e02 	subs.w	lr, r8, r2
     3c4:	eb69 0507 	sbc.w	r5, r9, r7
     3c8:	3801      	subs	r0, #1
     3ca:	e7e0      	b.n	38e <__data_size+0x1a2>
     3cc:	4628      	mov	r0, r5
     3ce:	e7d3      	b.n	378 <__data_size+0x18c>
     3d0:	4660      	mov	r0, ip
     3d2:	e78f      	b.n	2f4 <__data_size+0x108>
     3d4:	4681      	mov	r9, r0
     3d6:	e7ba      	b.n	34e <__data_size+0x162>
     3d8:	4661      	mov	r1, ip
     3da:	e777      	b.n	2cc <__data_size+0xe0>
     3dc:	4608      	mov	r0, r1
     3de:	e74b      	b.n	278 <__data_size+0x8c>
     3e0:	f1ac 0c02 	sub.w	ip, ip, #2
     3e4:	443d      	add	r5, r7
     3e6:	e715      	b.n	214 <__data_size+0x28>
     3e8:	3802      	subs	r0, #2
     3ea:	443c      	add	r4, r7
     3ec:	e726      	b.n	23c <__data_size+0x50>
     3ee:	bf00      	nop

000003f0 <__aeabi_idiv0>:
     3f0:	4770      	bx	lr
     3f2:	bf00      	nop

000003f4 <but1press_cbfunction>:
	}	

	return ret;
}

void but1press_cbfunction(const struct device *dev, struct gpio_callback *cb, uint32_t pins){
     3f4:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
     3f6:	f008 faa5 	bl	8944 <sys_clock_cycle_get_32>
     3fa:	4601      	mov	r1, r0
    
    // Inform that button was hit
    printk("But1 pressed at %d\n\r", k_cycle_get_32());
     3fc:	4803      	ldr	r0, [pc, #12]	; (40c <CONFIG_FLASH_SIZE+0xc>)
     3fe:	f008 f82e 	bl	845e <printk>
    
    // Update Flag
    botao1 = 1;
     402:	4b03      	ldr	r3, [pc, #12]	; (410 <CONFIG_FLASH_SIZE+0x10>)
     404:	2201      	movs	r2, #1
     406:	601a      	str	r2, [r3, #0]
}
     408:	bd08      	pop	{r3, pc}
     40a:	bf00      	nop
     40c:	000090d4 	.word	0x000090d4
     410:	200005a8 	.word	0x200005a8

00000414 <but2press_cbfunction>:
 * Function butxpress_cbfunction
 *
 * This function detects if the button was pressed and it prints in the terminal if the button was pressed.
 * It also has a flag that becomes 1 if the button is pressed.
 */
void but2press_cbfunction(const struct device *dev, struct gpio_callback *cb, uint32_t pins){
     414:	b508      	push	{r3, lr}
     416:	f008 fa95 	bl	8944 <sys_clock_cycle_get_32>
     41a:	4601      	mov	r1, r0
    
    // Inform that button was hit
    printk("But2 pressed at %d\n\r", k_cycle_get_32());
     41c:	4803      	ldr	r0, [pc, #12]	; (42c <but2press_cbfunction+0x18>)
     41e:	f008 f81e 	bl	845e <printk>
    
    // Update Flag
    botao2 = 1;
     422:	4b03      	ldr	r3, [pc, #12]	; (430 <but2press_cbfunction+0x1c>)
     424:	2201      	movs	r2, #1
     426:	601a      	str	r2, [r3, #0]
}
     428:	bd08      	pop	{r3, pc}
     42a:	bf00      	nop
     42c:	000090e9 	.word	0x000090e9
     430:	200005ac 	.word	0x200005ac

00000434 <but3press_cbfunction>:
 * Function butxpress_cbfunction
 *
 * This function detects if the button was pressed and it prints in the terminal if the button was pressed.
 * It also has a flag that becomes 1 if the button is pressed.
 */
void but3press_cbfunction(const struct device *dev, struct gpio_callback *cb, uint32_t pins){
     434:	b508      	push	{r3, lr}
     436:	f008 fa85 	bl	8944 <sys_clock_cycle_get_32>
     43a:	4601      	mov	r1, r0
    
    // Inform that button was hit
    printk("But3 pressed at %d\n\r", k_cycle_get_32());
     43c:	4803      	ldr	r0, [pc, #12]	; (44c <but3press_cbfunction+0x18>)
     43e:	f008 f80e 	bl	845e <printk>
    
    // Update Flag
    botao3 = 1;
     442:	4b03      	ldr	r3, [pc, #12]	; (450 <but3press_cbfunction+0x1c>)
     444:	2201      	movs	r2, #1
     446:	601a      	str	r2, [r3, #0]
}
     448:	bd08      	pop	{r3, pc}
     44a:	bf00      	nop
     44c:	000090fe 	.word	0x000090fe
     450:	200005b0 	.word	0x200005b0

00000454 <but4press_cbfunction>:
 * Function butxpress_cbfunction
 *
 * This function detects if the button was pressed and it prints in the terminal if the button was pressed.
 * It also has a flag that becomes 1 if the button is pressed.
 */
void but4press_cbfunction(const struct device *dev, struct gpio_callback *cb, uint32_t pins){
     454:	b508      	push	{r3, lr}
     456:	f008 fa75 	bl	8944 <sys_clock_cycle_get_32>
     45a:	4601      	mov	r1, r0
    
    // Inform that button was hit
    printk("But4 pressed at %d\n\r", k_cycle_get_32());
     45c:	4803      	ldr	r0, [pc, #12]	; (46c <but4press_cbfunction+0x18>)
     45e:	f007 fffe 	bl	845e <printk>
    
    // Update Flag
    botao4 = 1;
     462:	4b03      	ldr	r3, [pc, #12]	; (470 <but4press_cbfunction+0x1c>)
     464:	2201      	movs	r2, #1
     466:	601a      	str	r2, [r3, #0]
}
     468:	bd08      	pop	{r3, pc}
     46a:	bf00      	nop
     46c:	00009113 	.word	0x00009113
     470:	200005b4 	.word	0x200005b4

00000474 <z_impl_gpio_pin_configure.constprop.0>:
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     474:	6843      	ldr	r3, [r0, #4]
static inline int z_impl_gpio_pin_configure(const struct device *port,
     476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     47a:	681b      	ldr	r3, [r3, #0]
	const struct gpio_driver_api *api =
     47c:	f8d0 8008 	ldr.w	r8, [r0, #8]
	struct gpio_driver_data *data =
     480:	6907      	ldr	r7, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     482:	2601      	movs	r6, #1
     484:	408e      	lsls	r6, r1
     486:	421e      	tst	r6, r3
static inline int z_impl_gpio_pin_configure(const struct device *port,
     488:	4604      	mov	r4, r0
     48a:	460d      	mov	r5, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     48c:	d10e      	bne.n	4ac <z_impl_gpio_pin_configure.constprop.0+0x38>
     48e:	490e      	ldr	r1, [pc, #56]	; (4c8 <z_impl_gpio_pin_configure.constprop.0+0x54>)
     490:	4a0e      	ldr	r2, [pc, #56]	; (4cc <z_impl_gpio_pin_configure.constprop.0+0x58>)
     492:	480f      	ldr	r0, [pc, #60]	; (4d0 <z_impl_gpio_pin_configure.constprop.0+0x5c>)
     494:	f240 23fd 	movw	r3, #765	; 0x2fd
     498:	f007 ffe1 	bl	845e <printk>
     49c:	480d      	ldr	r0, [pc, #52]	; (4d4 <z_impl_gpio_pin_configure.constprop.0+0x60>)
     49e:	f007 ffde 	bl	845e <printk>
     4a2:	480a      	ldr	r0, [pc, #40]	; (4cc <z_impl_gpio_pin_configure.constprop.0+0x58>)
     4a4:	f240 21fd 	movw	r1, #765	; 0x2fd
     4a8:	f007 ff02 	bl	82b0 <assert_post_action>
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
     4ac:	683b      	ldr	r3, [r7, #0]
     4ae:	ea23 0606 	bic.w	r6, r3, r6
     4b2:	603e      	str	r6, [r7, #0]
	}

	return api->pin_configure(port, pin, flags);
     4b4:	f8d8 3000 	ldr.w	r3, [r8]
     4b8:	4629      	mov	r1, r5
     4ba:	4620      	mov	r0, r4
     4bc:	f44f 7288 	mov.w	r2, #272	; 0x110
}
     4c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->pin_configure(port, pin, flags);
     4c4:	4718      	bx	r3
     4c6:	bf00      	nop
     4c8:	00009152 	.word	0x00009152
     4cc:	00009128 	.word	0x00009128
     4d0:	00009190 	.word	0x00009190
     4d4:	000091ad 	.word	0x000091ad

000004d8 <z_impl_gpio_pin_interrupt_configure.constprop.0>:
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     4d8:	6843      	ldr	r3, [r0, #4]
static inline int z_impl_gpio_pin_interrupt_configure(const struct device *port,
     4da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     4de:	681b      	ldr	r3, [r3, #0]
	const struct gpio_driver_api *api =
     4e0:	6887      	ldr	r7, [r0, #8]
	const struct gpio_driver_data *const data =
     4e2:	f8d0 8010 	ldr.w	r8, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     4e6:	2601      	movs	r6, #1
     4e8:	408e      	lsls	r6, r1
     4ea:	421e      	tst	r6, r3
static inline int z_impl_gpio_pin_interrupt_configure(const struct device *port,
     4ec:	4604      	mov	r4, r0
     4ee:	460d      	mov	r5, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     4f0:	d10e      	bne.n	510 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x28>
     4f2:	4910      	ldr	r1, [pc, #64]	; (534 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4c>)
     4f4:	4a10      	ldr	r2, [pc, #64]	; (538 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x50>)
     4f6:	4811      	ldr	r0, [pc, #68]	; (53c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x54>)
     4f8:	f240 239d 	movw	r3, #669	; 0x29d
     4fc:	f007 ffaf 	bl	845e <printk>
     500:	480f      	ldr	r0, [pc, #60]	; (540 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x58>)
     502:	f007 ffac 	bl	845e <printk>
     506:	480c      	ldr	r0, [pc, #48]	; (538 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x50>)
     508:	f240 219d 	movw	r1, #669	; 0x29d
     50c:	f007 fed0 	bl	82b0 <assert_post_action>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
     510:	f8d8 3000 	ldr.w	r3, [r8]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
     514:	421e      	tst	r6, r3
	return api->pin_interrupt_configure(port, pin, mode, trig);
     516:	69be      	ldr	r6, [r7, #24]
     518:	4629      	mov	r1, r5
     51a:	4620      	mov	r0, r4
     51c:	46b4      	mov	ip, r6
     51e:	bf18      	it	ne
     520:	f44f 3300 	movne.w	r3, #131072	; 0x20000
}
     524:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
     528:	bf08      	it	eq
     52a:	f44f 2380 	moveq.w	r3, #262144	; 0x40000
     52e:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
     532:	4760      	bx	ip
     534:	00009152 	.word	0x00009152
     538:	00009128 	.word	0x00009128
     53c:	00009190 	.word	0x00009190
     540:	000091ad 	.word	0x000091ad

00000544 <thread_C_code>:
}

/** Thread C code implementation. 
 * It reads the average and implements it on the LED 1. */
void thread_C_code(void *argA , void *argB, void *argC)
{
     544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     548:	b087      	sub	sp, #28
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     54a:	4833      	ldr	r0, [pc, #204]	; (618 <thread_C_code+0xd4>)
     54c:	f004 fcaa 	bl	4ea4 <z_impl_device_get_binding>
    unsigned int pwmPeriod_us = 1000;       /* PWM period in us */
    int ret = 0;
    long int nact = 0;

    pwm0_dev = device_get_binding(DT_LABEL(PWM0_NID));
    if (pwm0_dev == NULL) {
     550:	4604      	mov	r4, r0
     552:	b908      	cbnz	r0, 558 <thread_C_code+0x14>
	printk("Error: PWM device %s is not ready\n", pwm0_dev->name);
     554:	6803      	ldr	r3, [r0, #0]
     556:	deff      	udf	#255	; 0xff
	return;
    }
    else  {
        printk("PWM device %s is ready\n", pwm0_dev->name);            
     558:	6801      	ldr	r1, [r0, #0]
     55a:	4830      	ldr	r0, [pc, #192]	; (61c <thread_C_code+0xd8>)
    }

    while(1) {
        k_sem_take(&sem_bc, K_FOREVER);

        printk("Atribuir valor a LED: %d (Thread C)\n", DadosBC);
     55c:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 634 <thread_C_code+0xf0>
        printk("PWM device %s is ready\n", pwm0_dev->name);            
     560:	f007 ff7d 	bl	845e <printk>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
     564:	f04f 32ff 	mov.w	r2, #4294967295
     568:	f04f 33ff 	mov.w	r3, #4294967295
     56c:	482c      	ldr	r0, [pc, #176]	; (620 <thread_C_code+0xdc>)
     56e:	f006 fbfd 	bl	6d6c <z_impl_k_sem_take>
        printk("Atribuir valor a LED: %d (Thread C)\n", DadosBC);
     572:	f8da 1000 	ldr.w	r1, [sl]
     576:	482b      	ldr	r0, [pc, #172]	; (624 <thread_C_code+0xe0>)
     578:	f007 ff71 	bl	845e <printk>

        ret = pwm_pin_set_usec(pwm0_dev, pwm0_channel, pwmPeriod_us,(unsigned int)((pwmPeriod_us*DadosBC)/100), PWM_POLARITY_NORMAL);
     57c:	f8da 5000 	ldr.w	r5, [sl]
     580:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
     584:	437d      	muls	r5, r7
     586:	2364      	movs	r3, #100	; 0x64
     588:	fbb5 f5f3 	udiv	r5, r5, r3
						uint64_t *cycles)
{
	struct pwm_driver_api *api;

	api = (struct pwm_driver_api *)dev->api;
	return api->get_cycles_per_sec(dev, pwm, cycles);
     58c:	68a3      	ldr	r3, [r4, #8]
     58e:	aa04      	add	r2, sp, #16
     590:	685b      	ldr	r3, [r3, #4]
     592:	210d      	movs	r1, #13
     594:	4620      	mov	r0, r4
     596:	4798      	blx	r3
				   uint32_t period, uint32_t pulse,
				   pwm_flags_t flags)
{
	uint64_t period_cycles, pulse_cycles, cycles_per_sec;

	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
     598:	9002      	str	r0, [sp, #8]
     59a:	b138      	cbz	r0, 5ac <thread_C_code+0x68>
		return -EIO;
     59c:	f06f 0104 	mvn.w	r1, #4
        if (ret) {
          printk("Error %d: failed to set pulse width\n", ret);
     5a0:	4821      	ldr	r0, [pc, #132]	; (628 <thread_C_code+0xe4>)
     5a2:	f007 ff5c 	bl	845e <printk>
          return;
        }    
    }
}
     5a6:	b007      	add	sp, #28
     5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
     5ac:	e9dd 6b04 	ldrd	r6, fp, [sp, #16]
     5b0:	fba6 8907 	umull	r8, r9, r6, r7
     5b4:	fb07 990b 	mla	r9, r7, fp, r9
     5b8:	4a1c      	ldr	r2, [pc, #112]	; (62c <thread_C_code+0xe8>)
     5ba:	2300      	movs	r3, #0
     5bc:	4640      	mov	r0, r8
     5be:	4649      	mov	r1, r9
     5c0:	f7ff fd9e 	bl	100 <__aeabi_uldivmod>
	if (period_cycles >= ((uint64_t)1 << 32)) {
     5c4:	4b1a      	ldr	r3, [pc, #104]	; (630 <thread_C_code+0xec>)
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
     5c6:	9003      	str	r0, [sp, #12]
	if (period_cycles >= ((uint64_t)1 << 32)) {
     5c8:	f04f 32ff 	mov.w	r2, #4294967295
     5cc:	454b      	cmp	r3, r9
     5ce:	bf08      	it	eq
     5d0:	4542      	cmpeq	r2, r8
     5d2:	d202      	bcs.n	5da <thread_C_code+0x96>
		return -ENOTSUP;
     5d4:	f06f 0185 	mvn.w	r1, #133	; 0x85
     5d8:	e7e2      	b.n	5a0 <thread_C_code+0x5c>
	}

	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
     5da:	fba5 6706 	umull	r6, r7, r5, r6
     5de:	fb05 770b 	mla	r7, r5, fp, r7
     5e2:	4a12      	ldr	r2, [pc, #72]	; (62c <thread_C_code+0xe8>)
     5e4:	2300      	movs	r3, #0
     5e6:	4630      	mov	r0, r6
     5e8:	4639      	mov	r1, r7
     5ea:	f7ff fd89 	bl	100 <__aeabi_uldivmod>
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
     5ee:	4a10      	ldr	r2, [pc, #64]	; (630 <thread_C_code+0xec>)
     5f0:	f04f 31ff 	mov.w	r1, #4294967295
     5f4:	42ba      	cmp	r2, r7
     5f6:	bf08      	it	eq
     5f8:	42b1      	cmpeq	r1, r6
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
     5fa:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
     5fc:	d3ea      	bcc.n	5d4 <thread_C_code+0x90>
	return api->pin_set(dev, pwm, period, pulse, flags);
     5fe:	68a2      	ldr	r2, [r4, #8]
     600:	9902      	ldr	r1, [sp, #8]
     602:	9100      	str	r1, [sp, #0]
     604:	6815      	ldr	r5, [r2, #0]
     606:	9a03      	ldr	r2, [sp, #12]
     608:	210d      	movs	r1, #13
     60a:	4620      	mov	r0, r4
     60c:	47a8      	blx	r5
        if (ret) {
     60e:	4601      	mov	r1, r0
     610:	2800      	cmp	r0, #0
     612:	d0a7      	beq.n	564 <thread_C_code+0x20>
     614:	e7c4      	b.n	5a0 <thread_C_code+0x5c>
     616:	bf00      	nop
     618:	000091bf 	.word	0x000091bf
     61c:	000091c5 	.word	0x000091c5
     620:	20000608 	.word	0x20000608
     624:	000091dd 	.word	0x000091dd
     628:	00009202 	.word	0x00009202
     62c:	000f4240 	.word	0x000f4240
     630:	000f423f 	.word	0x000f423f
     634:	200005a0 	.word	0x200005a0

00000638 <ConfigurePins>:
void ConfigurePins() {
     638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     63a:	483c      	ldr	r0, [pc, #240]	; (72c <ConfigurePins+0xf4>)
     63c:	f004 fc32 	bl	4ea4 <z_impl_device_get_binding>
    if (gpio0_dev == NULL) {
     640:	4604      	mov	r4, r0
     642:	b920      	cbnz	r0, 64e <ConfigurePins+0x16>
}
     644:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        printk("Error: Failed to bind to GPIO0\n\r");        
     648:	4839      	ldr	r0, [pc, #228]	; (730 <ConfigurePins+0xf8>)
     64a:	f007 bf08 	b.w	845e <printk>
        printk("Bind to GPIO0 successfull \n\r");        
     64e:	4839      	ldr	r0, [pc, #228]	; (734 <ConfigurePins+0xfc>)
     650:	f007 ff05 	bl	845e <printk>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
     654:	210b      	movs	r1, #11
     656:	4620      	mov	r0, r4
     658:	f7ff ff0c 	bl	474 <z_impl_gpio_pin_configure.constprop.0>
    if (ret < 0) {
     65c:	1e01      	subs	r1, r0, #0
     65e:	da04      	bge.n	66a <ConfigurePins+0x32>
        printk("Error %d: Failed to configure BUT 1 \n\r", ret);
     660:	4835      	ldr	r0, [pc, #212]	; (738 <ConfigurePins+0x100>)
}
     662:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        printk("Error %d: Failed to configure BUT 2 \n\r", ret);
     666:	f007 befa 	b.w	845e <printk>
     66a:	210c      	movs	r1, #12
     66c:	4620      	mov	r0, r4
     66e:	f7ff ff01 	bl	474 <z_impl_gpio_pin_configure.constprop.0>
    if (ret < 0) {
     672:	1e01      	subs	r1, r0, #0
     674:	da01      	bge.n	67a <ConfigurePins+0x42>
        printk("Error %d: Failed to configure BUT 2 \n\r", ret);
     676:	4831      	ldr	r0, [pc, #196]	; (73c <ConfigurePins+0x104>)
     678:	e7f3      	b.n	662 <ConfigurePins+0x2a>
     67a:	2118      	movs	r1, #24
     67c:	4620      	mov	r0, r4
     67e:	f7ff fef9 	bl	474 <z_impl_gpio_pin_configure.constprop.0>
    if (ret < 0) {
     682:	1e01      	subs	r1, r0, #0
     684:	da01      	bge.n	68a <ConfigurePins+0x52>
        printk("Error %d: Failed to configure BUT 3 \n\r", ret);
     686:	482e      	ldr	r0, [pc, #184]	; (740 <ConfigurePins+0x108>)
     688:	e7eb      	b.n	662 <ConfigurePins+0x2a>
     68a:	2119      	movs	r1, #25
     68c:	4620      	mov	r0, r4
     68e:	f7ff fef1 	bl	474 <z_impl_gpio_pin_configure.constprop.0>
    if (ret < 0) {
     692:	1e01      	subs	r1, r0, #0
     694:	da01      	bge.n	69a <ConfigurePins+0x62>
        printk("Error %d: Failed to configure BUT 4 \n\r", ret);
     696:	482b      	ldr	r0, [pc, #172]	; (744 <ConfigurePins+0x10c>)
     698:	e7e3      	b.n	662 <ConfigurePins+0x2a>
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
     69a:	210b      	movs	r1, #11
     69c:	4620      	mov	r0, r4
     69e:	f7ff ff1b 	bl	4d8 <z_impl_gpio_pin_interrupt_configure.constprop.0>
    if (ret != 0) {
     6a2:	4601      	mov	r1, r0
     6a4:	b108      	cbz	r0, 6aa <ConfigurePins+0x72>
	printk("Error %d: failed to configure interrupt on BUT1 pin \n\r", ret);
     6a6:	4828      	ldr	r0, [pc, #160]	; (748 <ConfigurePins+0x110>)
     6a8:	e7db      	b.n	662 <ConfigurePins+0x2a>
     6aa:	210c      	movs	r1, #12
     6ac:	4620      	mov	r0, r4
     6ae:	f7ff ff13 	bl	4d8 <z_impl_gpio_pin_interrupt_configure.constprop.0>
    if (ret != 0) {
     6b2:	4601      	mov	r1, r0
     6b4:	b108      	cbz	r0, 6ba <ConfigurePins+0x82>
	printk("Error %d: failed to configure interrupt on BUT2 pin \n\r", ret);
     6b6:	4825      	ldr	r0, [pc, #148]	; (74c <ConfigurePins+0x114>)
     6b8:	e7d3      	b.n	662 <ConfigurePins+0x2a>
     6ba:	2118      	movs	r1, #24
     6bc:	4620      	mov	r0, r4
     6be:	f7ff ff0b 	bl	4d8 <z_impl_gpio_pin_interrupt_configure.constprop.0>
    if (ret != 0) {
     6c2:	4601      	mov	r1, r0
     6c4:	b108      	cbz	r0, 6ca <ConfigurePins+0x92>
	printk("Error %d: failed to configure interrupt on BUT3 pin \n\r", ret);
     6c6:	4822      	ldr	r0, [pc, #136]	; (750 <ConfigurePins+0x118>)
     6c8:	e7cb      	b.n	662 <ConfigurePins+0x2a>
     6ca:	2119      	movs	r1, #25
     6cc:	4620      	mov	r0, r4
     6ce:	f7ff ff03 	bl	4d8 <z_impl_gpio_pin_interrupt_configure.constprop.0>
    if (ret != 0) {
     6d2:	4601      	mov	r1, r0
     6d4:	b108      	cbz	r0, 6da <ConfigurePins+0xa2>
	printk("Error %d: failed to configure interrupt on BUT4 pin \n\r", ret);
     6d6:	481f      	ldr	r0, [pc, #124]	; (754 <ConfigurePins+0x11c>)
     6d8:	e7c3      	b.n	662 <ConfigurePins+0x2a>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
     6da:	491f      	ldr	r1, [pc, #124]	; (758 <ConfigurePins+0x120>)
     6dc:	4b1f      	ldr	r3, [pc, #124]	; (75c <ConfigurePins+0x124>)
     6de:	4f20      	ldr	r7, [pc, #128]	; (760 <ConfigurePins+0x128>)
     6e0:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
     6e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
     6e6:	608b      	str	r3, [r1, #8]
	callback->handler = handler;
     6e8:	4b1e      	ldr	r3, [pc, #120]	; (764 <ConfigurePins+0x12c>)
     6ea:	4e1f      	ldr	r6, [pc, #124]	; (768 <ConfigurePins+0x130>)
     6ec:	607b      	str	r3, [r7, #4]
	callback->pin_mask = pin_mask;
     6ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6f2:	60bb      	str	r3, [r7, #8]
	callback->handler = handler;
     6f4:	4b1d      	ldr	r3, [pc, #116]	; (76c <ConfigurePins+0x134>)
     6f6:	4d1e      	ldr	r5, [pc, #120]	; (770 <ConfigurePins+0x138>)
     6f8:	6073      	str	r3, [r6, #4]
	callback->pin_mask = pin_mask;
     6fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
     6fe:	60b3      	str	r3, [r6, #8]
	callback->handler = handler;
     700:	4b1c      	ldr	r3, [pc, #112]	; (774 <ConfigurePins+0x13c>)
     702:	606b      	str	r3, [r5, #4]
    gpio_add_callback(gpio0_dev, &but1_cb_data);
     704:	4620      	mov	r0, r4
	callback->pin_mask = pin_mask;
     706:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
     70a:	60ab      	str	r3, [r5, #8]
     70c:	f007 fdc8 	bl	82a0 <gpio_add_callback>
    gpio_add_callback(gpio0_dev, &but2_cb_data);
     710:	4639      	mov	r1, r7
     712:	4620      	mov	r0, r4
     714:	f007 fdc4 	bl	82a0 <gpio_add_callback>
    gpio_add_callback(gpio0_dev, &but3_cb_data);
     718:	4631      	mov	r1, r6
     71a:	4620      	mov	r0, r4
     71c:	f007 fdc0 	bl	82a0 <gpio_add_callback>
    gpio_add_callback(gpio0_dev, &but4_cb_data);
     720:	4629      	mov	r1, r5
     722:	4620      	mov	r0, r4
}
     724:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    gpio_add_callback(gpio0_dev, &but4_cb_data);
     728:	f007 bdba 	b.w	82a0 <gpio_add_callback>
     72c:	00009227 	.word	0x00009227
     730:	0000922e 	.word	0x0000922e
     734:	0000924f 	.word	0x0000924f
     738:	0000926c 	.word	0x0000926c
     73c:	00009293 	.word	0x00009293
     740:	000092ba 	.word	0x000092ba
     744:	000092e1 	.word	0x000092e1
     748:	00009308 	.word	0x00009308
     74c:	0000933f 	.word	0x0000933f
     750:	00009376 	.word	0x00009376
     754:	000093ad 	.word	0x000093ad
     758:	200005b8 	.word	0x200005b8
     75c:	000003f5 	.word	0x000003f5
     760:	200005c4 	.word	0x200005c4
     764:	00000415 	.word	0x00000415
     768:	200005d0 	.word	0x200005d0
     76c:	00000435 	.word	0x00000435
     770:	200005dc 	.word	0x200005dc
     774:	00000455 	.word	0x00000455

00000778 <thread_A_code>:
{
     778:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return z_impl_k_uptime_ticks();
     77c:	f008 fa0d 	bl	8b9a <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
     780:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     784:	460a      	mov	r2, r1
     786:	fba0 0103 	umull	r0, r1, r0, r3
     78a:	fb03 1102 	mla	r1, r3, r2, r1
     78e:	0bc3      	lsrs	r3, r0, #15
        if(botao1 == 1){
     790:	4e36      	ldr	r6, [pc, #216]	; (86c <CONFIG_ISR_STACK_SIZE+0x6c>)
        printk("\n\nLeitura Botoes (Thread A)\n");
     792:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 87c <CONFIG_ISR_STACK_SIZE+0x7c>
     796:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
     79a:	0bca      	lsrs	r2, r1, #15
    release_time = k_uptime_get() + thread_A_period;
     79c:	f113 0464 	adds.w	r4, r3, #100	; 0x64
     7a0:	f142 0500 	adc.w	r5, r2, #0
    int err = 0;
     7a4:	4637      	mov	r7, r6
        printk("\n\nLeitura Botoes (Thread A)\n");
     7a6:	4640      	mov	r0, r8
     7a8:	f007 fe59 	bl	845e <printk>
        ConfigurePins();
     7ac:	f7ff ff44 	bl	638 <ConfigurePins>
        if(botao1 == 1){
     7b0:	6832      	ldr	r2, [r6, #0]
     7b2:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 880 <CONFIG_ISR_STACK_SIZE+0x80>
     7b6:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 884 <CONFIG_ISR_STACK_SIZE+0x84>
        if(botao2 == 1){
     7ba:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 888 <CONFIG_ISR_STACK_SIZE+0x88>
        if(botao1 == 1){
     7be:	2a01      	cmp	r2, #1
          botao1 = 0;
     7c0:	bf01      	itttt	eq
     7c2:	2300      	moveq	r3, #0
     7c4:	6033      	streq	r3, [r6, #0]
          flag1 = 1;
     7c6:	f8ca 2000 	streq.w	r2, [sl]
          flag2 = 0;
     7ca:	f8c9 3000 	streq.w	r3, [r9]
        if(botao2 == 1){
     7ce:	f8db 3000 	ldr.w	r3, [fp]
     7d2:	2b01      	cmp	r3, #1
          botao2 = 0;
     7d4:	bf01      	itttt	eq
     7d6:	2200      	moveq	r2, #0
     7d8:	f8cb 2000 	streq.w	r2, [fp]
          flag1 = 0;
     7dc:	f8ca 2000 	streq.w	r2, [sl]
          flag2 = 1;
     7e0:	f8c9 3000 	streq.w	r3, [r9]
        if(flag1 == 1){
     7e4:	f8da 3000 	ldr.w	r3, [sl]
     7e8:	2b01      	cmp	r3, #1
     7ea:	d109      	bne.n	800 <CONFIG_ISR_STACK_SIZE>
          printk("Manual %d %d\n", flag1, flag2);
     7ec:	f8da 1000 	ldr.w	r1, [sl]
     7f0:	481f      	ldr	r0, [pc, #124]	; (870 <CONFIG_ISR_STACK_SIZE+0x70>)
     7f2:	f8d9 2000 	ldr.w	r2, [r9]
     7f6:	f007 fe32 	bl	845e <printk>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
     7fa:	481e      	ldr	r0, [pc, #120]	; (874 <CONFIG_ISR_STACK_SIZE+0x74>)
     7fc:	f006 fa72 	bl	6ce4 <z_impl_k_sem_give>
        if(flag2 == 1){
     800:	f8d9 3000 	ldr.w	r3, [r9]
     804:	2b01      	cmp	r3, #1
     806:	d106      	bne.n	816 <CONFIG_ISR_STACK_SIZE+0x16>
          printk("Automatico %d %d\n", flag1, flag2);
     808:	f8da 1000 	ldr.w	r1, [sl]
     80c:	481a      	ldr	r0, [pc, #104]	; (878 <CONFIG_ISR_STACK_SIZE+0x78>)
     80e:	f8d9 2000 	ldr.w	r2, [r9]
     812:	f007 fe24 	bl	845e <printk>
        botao1 = 0;
     816:	2300      	movs	r3, #0
     818:	603b      	str	r3, [r7, #0]
        botao2 = 0;
     81a:	f8cb 3000 	str.w	r3, [fp]
	return z_impl_k_uptime_ticks();
     81e:	f008 f9bc 	bl	8b9a <z_impl_k_uptime_ticks>
     822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     826:	460a      	mov	r2, r1
     828:	fba0 0103 	umull	r0, r1, r0, r3
     82c:	fb03 1102 	mla	r1, r3, r2, r1
     830:	0bc2      	lsrs	r2, r0, #15
     832:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
     836:	0bcb      	lsrs	r3, r1, #15
        if( fin_time < release_time) {
     838:	42a2      	cmp	r2, r4
     83a:	eb73 0105 	sbcs.w	r1, r3, r5
     83e:	dab2      	bge.n	7a6 <thread_A_code+0x2e>
            k_msleep(release_time - fin_time);
     840:	eba4 0c02 	sub.w	ip, r4, r2
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
     844:	ea2c 7cec 	bic.w	ip, ip, ip, asr #31
     848:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
     84c:	f240 30e7 	movw	r0, #999	; 0x3e7
     850:	2100      	movs	r1, #0
     852:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     856:	2300      	movs	r3, #0
     858:	fbce 010c 	smlal	r0, r1, lr, ip
     85c:	f7ff fc50 	bl	100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
     860:	f006 f8d4 	bl	6a0c <z_impl_k_sleep>
            release_time += thread_A_period;
     864:	3464      	adds	r4, #100	; 0x64
     866:	f145 0500 	adc.w	r5, r5, #0
     86a:	e79c      	b.n	7a6 <thread_A_code+0x2e>
     86c:	200005a8 	.word	0x200005a8
     870:	00009401 	.word	0x00009401
     874:	200005f0 	.word	0x200005f0
     878:	0000940f 	.word	0x0000940f
     87c:	000093e4 	.word	0x000093e4
     880:	200005e8 	.word	0x200005e8
     884:	200005ec 	.word	0x200005ec
     888:	200005ac 	.word	0x200005ac

0000088c <thread_B_code>:
{
     88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        printk(" Botao3 = %d", botao3);
     88e:	4d1f      	ldr	r5, [pc, #124]	; (90c <thread_B_code+0x80>)
	return z_impl_k_sem_take(sem, timeout);
     890:	4f1f      	ldr	r7, [pc, #124]	; (910 <thread_B_code+0x84>)
     892:	462e      	mov	r6, r5
     894:	f04f 32ff 	mov.w	r2, #4294967295
     898:	f04f 33ff 	mov.w	r3, #4294967295
     89c:	4638      	mov	r0, r7
     89e:	f006 fa65 	bl	6d6c <z_impl_k_sem_take>
        printk("Atribuir intensidade luz (Thread B)\n");
     8a2:	481c      	ldr	r0, [pc, #112]	; (914 <thread_B_code+0x88>)
        printk(" Botao4 = %d\n", botao4);
     8a4:	4c1c      	ldr	r4, [pc, #112]	; (918 <thread_B_code+0x8c>)
        printk("Atribuir intensidade luz (Thread B)\n");
     8a6:	f007 fdda 	bl	845e <printk>
        ConfigurePins();
     8aa:	f7ff fec5 	bl	638 <ConfigurePins>
        printk("\nBotao1 = %d", botao1);
     8ae:	4b1b      	ldr	r3, [pc, #108]	; (91c <thread_B_code+0x90>)
     8b0:	481b      	ldr	r0, [pc, #108]	; (920 <thread_B_code+0x94>)
     8b2:	6819      	ldr	r1, [r3, #0]
     8b4:	f007 fdd3 	bl	845e <printk>
        printk(" Botao2 = %d", botao2);
     8b8:	4b1a      	ldr	r3, [pc, #104]	; (924 <thread_B_code+0x98>)
     8ba:	481b      	ldr	r0, [pc, #108]	; (928 <thread_B_code+0x9c>)
     8bc:	6819      	ldr	r1, [r3, #0]
     8be:	f007 fdce 	bl	845e <printk>
        printk(" Botao3 = %d", botao3);
     8c2:	6829      	ldr	r1, [r5, #0]
     8c4:	4819      	ldr	r0, [pc, #100]	; (92c <thread_B_code+0xa0>)
     8c6:	f007 fdca 	bl	845e <printk>
        printk(" Botao4 = %d\n", botao4);
     8ca:	6821      	ldr	r1, [r4, #0]
     8cc:	4818      	ldr	r0, [pc, #96]	; (930 <thread_B_code+0xa4>)
     8ce:	f007 fdc6 	bl	845e <printk>
        if(botao3 == 1 && DadosBC >= 5){
     8d2:	682b      	ldr	r3, [r5, #0]
     8d4:	2b01      	cmp	r3, #1
     8d6:	d107      	bne.n	8e8 <thread_B_code+0x5c>
     8d8:	4a16      	ldr	r2, [pc, #88]	; (934 <thread_B_code+0xa8>)
     8da:	6813      	ldr	r3, [r2, #0]
     8dc:	2b04      	cmp	r3, #4
          botao3 = 0;
     8de:	bfc1      	itttt	gt
     8e0:	2100      	movgt	r1, #0
          DadosBC = DadosBC - 5;
     8e2:	3b05      	subgt	r3, #5
          botao3 = 0;
     8e4:	6029      	strgt	r1, [r5, #0]
          DadosBC = DadosBC - 5;
     8e6:	6013      	strgt	r3, [r2, #0]
        if(botao4 == 1 && DadosBC <= 95){
     8e8:	6823      	ldr	r3, [r4, #0]
     8ea:	2b01      	cmp	r3, #1
     8ec:	d107      	bne.n	8fe <thread_B_code+0x72>
     8ee:	4a11      	ldr	r2, [pc, #68]	; (934 <thread_B_code+0xa8>)
     8f0:	6813      	ldr	r3, [r2, #0]
     8f2:	2b5f      	cmp	r3, #95	; 0x5f
          botao4 = 0;
     8f4:	bfdf      	itttt	le
     8f6:	2100      	movle	r1, #0
          DadosBC += 5;
     8f8:	3305      	addle	r3, #5
          botao4 = 0;
     8fa:	6021      	strle	r1, [r4, #0]
          DadosBC += 5;
     8fc:	6013      	strle	r3, [r2, #0]
        botao3 = 0;
     8fe:	2300      	movs	r3, #0
     900:	6033      	str	r3, [r6, #0]
        botao4 = 0;
     902:	6023      	str	r3, [r4, #0]
	z_impl_k_sem_give(sem);
     904:	480c      	ldr	r0, [pc, #48]	; (938 <thread_B_code+0xac>)
     906:	f006 f9ed 	bl	6ce4 <z_impl_k_sem_give>
    while(1) {
     90a:	e7c3      	b.n	894 <thread_B_code+0x8>
     90c:	200005b0 	.word	0x200005b0
     910:	200005f0 	.word	0x200005f0
     914:	00009421 	.word	0x00009421
     918:	200005b4 	.word	0x200005b4
     91c:	200005a8 	.word	0x200005a8
     920:	00009446 	.word	0x00009446
     924:	200005ac 	.word	0x200005ac
     928:	00009453 	.word	0x00009453
     92c:	00009460 	.word	0x00009460
     930:	0000946d 	.word	0x0000946d
     934:	200005a0 	.word	0x200005a0
     938:	20000608 	.word	0x20000608

0000093c <main>:
void main(void) {
     93c:	b5f0      	push	{r4, r5, r6, r7, lr}
     93e:	b089      	sub	sp, #36	; 0x24
     940:	482a      	ldr	r0, [pc, #168]	; (9ec <main+0xb0>)
    adc_dev = device_get_binding(DT_LABEL(ADC_NID));
     942:	4c2b      	ldr	r4, [pc, #172]	; (9f0 <main+0xb4>)
     944:	f004 faae 	bl	4ea4 <z_impl_device_get_binding>
     948:	6020      	str	r0, [r4, #0]
	if (!adc_dev) {
     94a:	b910      	cbnz	r0, 952 <main+0x16>
        printk("ADC device_get_binding() failed\n");
     94c:	4829      	ldr	r0, [pc, #164]	; (9f4 <main+0xb8>)
     94e:	f007 fd86 	bl	845e <printk>
    err = adc_channel_setup(adc_dev, &my_channel_cfg);
     952:	6820      	ldr	r0, [r4, #0]
					   const struct adc_channel_cfg *channel_cfg)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->channel_setup(dev, channel_cfg);
     954:	6883      	ldr	r3, [r0, #8]
     956:	4928      	ldr	r1, [pc, #160]	; (9f8 <main+0xbc>)
     958:	681b      	ldr	r3, [r3, #0]
     95a:	4798      	blx	r3
    if (err) {
     95c:	4601      	mov	r1, r0
     95e:	b110      	cbz	r0, 966 <main+0x2a>
        printk("adc_channel_setup() failed with error code %d\n", err);
     960:	4826      	ldr	r0, [pc, #152]	; (9fc <main+0xc0>)
     962:	f007 fd7c 	bl	845e <printk>
    printf("\n\r Illustration of the use of shmem + semaphores\n\r");
     966:	4826      	ldr	r0, [pc, #152]	; (a00 <main+0xc4>)
     968:	f001 fdbc 	bl	24e4 <printf>
	return z_impl_k_sem_init(sem, initial_count, limit);
     96c:	2201      	movs	r2, #1
     96e:	2100      	movs	r1, #0
     970:	4824      	ldr	r0, [pc, #144]	; (a04 <main+0xc8>)
     972:	f008 f8f3 	bl	8b5c <z_impl_k_sem_init>
     976:	2201      	movs	r2, #1
     978:	2100      	movs	r1, #0
     97a:	4823      	ldr	r0, [pc, #140]	; (a08 <main+0xcc>)
     97c:	f008 f8ee 	bl	8b5c <z_impl_k_sem_init>
    thread_A_tid = k_thread_create(&thread_A_data, thread_A_stack,
     980:	2600      	movs	r6, #0
     982:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
     984:	2400      	movs	r4, #0
     986:	2501      	movs	r5, #1
     988:	e9cd 6706 	strd	r6, r7, [sp, #24]
     98c:	e9cd 5403 	strd	r5, r4, [sp, #12]
     990:	e9cd 4401 	strd	r4, r4, [sp, #4]
     994:	4b1d      	ldr	r3, [pc, #116]	; (a0c <main+0xd0>)
     996:	491e      	ldr	r1, [pc, #120]	; (a10 <main+0xd4>)
     998:	9400      	str	r4, [sp, #0]
     99a:	f44f 6280 	mov.w	r2, #1024	; 0x400
     99e:	481d      	ldr	r0, [pc, #116]	; (a14 <main+0xd8>)
     9a0:	f006 faec 	bl	6f7c <z_impl_k_thread_create>
     9a4:	4b1c      	ldr	r3, [pc, #112]	; (a18 <main+0xdc>)
     9a6:	6018      	str	r0, [r3, #0]
     9a8:	4b1c      	ldr	r3, [pc, #112]	; (a1c <main+0xe0>)
     9aa:	491d      	ldr	r1, [pc, #116]	; (a20 <main+0xe4>)
     9ac:	9400      	str	r4, [sp, #0]
     9ae:	e9cd 6706 	strd	r6, r7, [sp, #24]
     9b2:	e9cd 5403 	strd	r5, r4, [sp, #12]
     9b6:	e9cd 4401 	strd	r4, r4, [sp, #4]
     9ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
     9be:	4819      	ldr	r0, [pc, #100]	; (a24 <main+0xe8>)
     9c0:	f006 fadc 	bl	6f7c <z_impl_k_thread_create>
    thread_B_tid = k_thread_create(&thread_B_data, thread_B_stack,
     9c4:	4b18      	ldr	r3, [pc, #96]	; (a28 <main+0xec>)
     9c6:	6018      	str	r0, [r3, #0]
     9c8:	4b18      	ldr	r3, [pc, #96]	; (a2c <main+0xf0>)
     9ca:	4919      	ldr	r1, [pc, #100]	; (a30 <main+0xf4>)
     9cc:	9400      	str	r4, [sp, #0]
     9ce:	e9cd 6706 	strd	r6, r7, [sp, #24]
     9d2:	e9cd 5403 	strd	r5, r4, [sp, #12]
     9d6:	e9cd 4401 	strd	r4, r4, [sp, #4]
     9da:	f44f 6280 	mov.w	r2, #1024	; 0x400
     9de:	4815      	ldr	r0, [pc, #84]	; (a34 <main+0xf8>)
     9e0:	f006 facc 	bl	6f7c <z_impl_k_thread_create>
    thread_C_tid = k_thread_create(&thread_C_data, thread_C_stack,
     9e4:	4b14      	ldr	r3, [pc, #80]	; (a38 <main+0xfc>)
     9e6:	6018      	str	r0, [r3, #0]
} 
     9e8:	b009      	add	sp, #36	; 0x24
     9ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9ec:	0000947b 	.word	0x0000947b
     9f0:	200005a4 	.word	0x200005a4
     9f4:	00009481 	.word	0x00009481
     9f8:	000090cc 	.word	0x000090cc
     9fc:	000094a2 	.word	0x000094a2
     a00:	000094d1 	.word	0x000094d1
     a04:	200005f0 	.word	0x200005f0
     a08:	20000608 	.word	0x20000608
     a0c:	00000779 	.word	0x00000779
     a10:	20000e80 	.word	0x20000e80
     a14:	20000258 	.word	0x20000258
     a18:	20000620 	.word	0x20000620
     a1c:	0000088d 	.word	0x0000088d
     a20:	200012a0 	.word	0x200012a0
     a24:	200002d8 	.word	0x200002d8
     a28:	20000624 	.word	0x20000624
     a2c:	00000545 	.word	0x00000545
     a30:	200016c0 	.word	0x200016c0
     a34:	20000358 	.word	0x20000358
     a38:	20000628 	.word	0x20000628

00000a3c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a40:	b091      	sub	sp, #68	; 0x44
     a42:	468b      	mov	fp, r1
     a44:	9002      	str	r0, [sp, #8]
     a46:	4692      	mov	sl, r2
     a48:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     a4a:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     a4c:	f89a 0000 	ldrb.w	r0, [sl]
     a50:	b908      	cbnz	r0, a56 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     a52:	4628      	mov	r0, r5
     a54:	e35e      	b.n	1114 <CONFIG_FPROTECT_BLOCK_SIZE+0x114>
		if (*fp != '%') {
     a56:	2825      	cmp	r0, #37	; 0x25
     a58:	f10a 0701 	add.w	r7, sl, #1
     a5c:	d007      	beq.n	a6e <cbvprintf+0x32>
			OUTC('%');
     a5e:	9b02      	ldr	r3, [sp, #8]
     a60:	4659      	mov	r1, fp
     a62:	4798      	blx	r3
     a64:	2800      	cmp	r0, #0
     a66:	f2c0 8355 	blt.w	1114 <CONFIG_FPROTECT_BLOCK_SIZE+0x114>
     a6a:	3501      	adds	r5, #1
			break;
     a6c:	e210      	b.n	e90 <cbvprintf+0x454>
		} state = {
     a6e:	2218      	movs	r2, #24
     a70:	2100      	movs	r1, #0
     a72:	a80a      	add	r0, sp, #40	; 0x28
     a74:	f007 fd4c 	bl	8510 <memset>
	if (*sp == '%') {
     a78:	f89a 3001 	ldrb.w	r3, [sl, #1]
     a7c:	2b25      	cmp	r3, #37	; 0x25
     a7e:	d078      	beq.n	b72 <cbvprintf+0x136>
     a80:	2200      	movs	r2, #0
     a82:	4694      	mov	ip, r2
     a84:	4616      	mov	r6, r2
     a86:	4696      	mov	lr, r2
     a88:	4610      	mov	r0, r2
     a8a:	4639      	mov	r1, r7
		switch (*sp) {
     a8c:	f817 3b01 	ldrb.w	r3, [r7], #1
     a90:	2b2b      	cmp	r3, #43	; 0x2b
     a92:	f000 809d 	beq.w	bd0 <cbvprintf+0x194>
     a96:	f200 8094 	bhi.w	bc2 <cbvprintf+0x186>
     a9a:	2b20      	cmp	r3, #32
     a9c:	f000 809b 	beq.w	bd6 <cbvprintf+0x19a>
     aa0:	2b23      	cmp	r3, #35	; 0x23
     aa2:	f000 809a 	beq.w	bda <cbvprintf+0x19e>
     aa6:	b128      	cbz	r0, ab4 <cbvprintf+0x78>
     aa8:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     aac:	f040 0004 	orr.w	r0, r0, #4
     ab0:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     ab4:	f1be 0f00 	cmp.w	lr, #0
     ab8:	d005      	beq.n	ac6 <cbvprintf+0x8a>
     aba:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     abe:	f040 0008 	orr.w	r0, r0, #8
     ac2:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     ac6:	b12e      	cbz	r6, ad4 <cbvprintf+0x98>
     ac8:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     acc:	f040 0010 	orr.w	r0, r0, #16
     ad0:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     ad4:	f1bc 0f00 	cmp.w	ip, #0
     ad8:	d005      	beq.n	ae6 <cbvprintf+0xaa>
     ada:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     ade:	f040 0020 	orr.w	r0, r0, #32
     ae2:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     ae6:	b12a      	cbz	r2, af4 <cbvprintf+0xb8>
     ae8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     aec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     af0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     af4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     af8:	f002 0044 	and.w	r0, r2, #68	; 0x44
     afc:	2844      	cmp	r0, #68	; 0x44
     afe:	d103      	bne.n	b08 <cbvprintf+0xcc>
		conv->flag_zero = false;
     b00:	f36f 1286 	bfc	r2, #6, #1
     b04:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     b08:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     b0c:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     b0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     b12:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     b16:	d17b      	bne.n	c10 <cbvprintf+0x1d4>
		conv->width_star = true;
     b18:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     b1c:	f042 0201 	orr.w	r2, r2, #1
     b20:	1c4b      	adds	r3, r1, #1
     b22:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     b26:	781a      	ldrb	r2, [r3, #0]
     b28:	2a2e      	cmp	r2, #46	; 0x2e
     b2a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     b2e:	bf0c      	ite	eq
     b30:	2101      	moveq	r1, #1
     b32:	2100      	movne	r1, #0
     b34:	f361 0241 	bfi	r2, r1, #1, #1
     b38:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     b3c:	d174      	bne.n	c28 <cbvprintf+0x1ec>
	if (*sp == '*') {
     b3e:	785a      	ldrb	r2, [r3, #1]
     b40:	2a2a      	cmp	r2, #42	; 0x2a
     b42:	d06a      	beq.n	c1a <cbvprintf+0x1de>
     b44:	3301      	adds	r3, #1
	size_t val = 0;
     b46:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     b48:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     b4a:	4618      	mov	r0, r3
     b4c:	f810 2b01 	ldrb.w	r2, [r0], #1
     b50:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     b54:	2f09      	cmp	r7, #9
     b56:	f240 808e 	bls.w	c76 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
     b5a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     b5e:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     b60:	f3c2 0040 	ubfx	r0, r2, #1, #1
     b64:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     b68:	f361 0241 	bfi	r2, r1, #1, #1
     b6c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     b70:	e05a      	b.n	c28 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
     b72:	f10a 0702 	add.w	r7, sl, #2
     b76:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     b7a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     b7e:	07d9      	lsls	r1, r3, #31
     b80:	f140 8149 	bpl.w	e16 <cbvprintf+0x3da>
			width = va_arg(ap, int);
     b84:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     b88:	f1b9 0f00 	cmp.w	r9, #0
     b8c:	da07      	bge.n	b9e <cbvprintf+0x162>
				conv->flag_dash = true;
     b8e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     b92:	f042 0204 	orr.w	r2, r2, #4
     b96:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
     b9a:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
     b9e:	075a      	lsls	r2, r3, #29
     ba0:	f140 8142 	bpl.w	e28 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
     ba4:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     ba8:	f1b8 0f00 	cmp.w	r8, #0
     bac:	f280 8141 	bge.w	e32 <cbvprintf+0x3f6>
				conv->prec_present = false;
     bb0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     bb4:	f36f 0341 	bfc	r3, #1, #1
     bb8:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     bbc:	f04f 38ff 	mov.w	r8, #4294967295
     bc0:	e137      	b.n	e32 <cbvprintf+0x3f6>
		switch (*sp) {
     bc2:	2b2d      	cmp	r3, #45	; 0x2d
     bc4:	d00c      	beq.n	be0 <cbvprintf+0x1a4>
     bc6:	2b30      	cmp	r3, #48	; 0x30
     bc8:	f47f af6d 	bne.w	aa6 <cbvprintf+0x6a>
			conv->flag_zero = true;
     bcc:	2201      	movs	r2, #1
	} while (loop);
     bce:	e75c      	b.n	a8a <cbvprintf+0x4e>
			conv->flag_plus = true;
     bd0:	f04f 0e01 	mov.w	lr, #1
     bd4:	e759      	b.n	a8a <cbvprintf+0x4e>
			conv->flag_space = true;
     bd6:	2601      	movs	r6, #1
     bd8:	e757      	b.n	a8a <cbvprintf+0x4e>
			conv->flag_hash = true;
     bda:	f04f 0c01 	mov.w	ip, #1
     bde:	e754      	b.n	a8a <cbvprintf+0x4e>
		switch (*sp) {
     be0:	2001      	movs	r0, #1
     be2:	e752      	b.n	a8a <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
     be4:	fb0c 0202 	mla	r2, ip, r2, r0
     be8:	3a30      	subs	r2, #48	; 0x30
     bea:	4633      	mov	r3, r6
     bec:	461e      	mov	r6, r3
     bee:	f816 0b01 	ldrb.w	r0, [r6], #1
     bf2:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     bf6:	2f09      	cmp	r7, #9
     bf8:	d9f4      	bls.n	be4 <cbvprintf+0x1a8>
	if (sp != wp) {
     bfa:	4299      	cmp	r1, r3
     bfc:	d093      	beq.n	b26 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     bfe:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     c02:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     c04:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     c06:	f362 0141 	bfi	r1, r2, #1, #1
     c0a:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     c0e:	e78a      	b.n	b26 <cbvprintf+0xea>
     c10:	460b      	mov	r3, r1
	size_t val = 0;
     c12:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     c14:	f04f 0c0a 	mov.w	ip, #10
     c18:	e7e8      	b.n	bec <cbvprintf+0x1b0>
		conv->prec_star = true;
     c1a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     c1e:	f042 0204 	orr.w	r2, r2, #4
     c22:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     c26:	3302      	adds	r3, #2
	switch (*sp) {
     c28:	461f      	mov	r7, r3
     c2a:	f817 2b01 	ldrb.w	r2, [r7], #1
     c2e:	2a6c      	cmp	r2, #108	; 0x6c
     c30:	d041      	beq.n	cb6 <cbvprintf+0x27a>
     c32:	d825      	bhi.n	c80 <cbvprintf+0x244>
     c34:	2a68      	cmp	r2, #104	; 0x68
     c36:	d02b      	beq.n	c90 <cbvprintf+0x254>
     c38:	2a6a      	cmp	r2, #106	; 0x6a
     c3a:	d046      	beq.n	cca <cbvprintf+0x28e>
     c3c:	2a4c      	cmp	r2, #76	; 0x4c
     c3e:	d04c      	beq.n	cda <cbvprintf+0x29e>
     c40:	461f      	mov	r7, r3
	conv->specifier = *sp++;
     c42:	f817 2b01 	ldrb.w	r2, [r7], #1
     c46:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     c4a:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
     c4e:	2a78      	cmp	r2, #120	; 0x78
     c50:	f200 80d9 	bhi.w	e06 <cbvprintf+0x3ca>
     c54:	2a57      	cmp	r2, #87	; 0x57
     c56:	d84d      	bhi.n	cf4 <cbvprintf+0x2b8>
     c58:	2a41      	cmp	r2, #65	; 0x41
     c5a:	d003      	beq.n	c64 <cbvprintf+0x228>
     c5c:	3a45      	subs	r2, #69	; 0x45
     c5e:	2a02      	cmp	r2, #2
     c60:	f200 80d1 	bhi.w	e06 <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
     c64:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     c68:	2204      	movs	r2, #4
     c6a:	f362 0302 	bfi	r3, r2, #0, #3
     c6e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
     c72:	2301      	movs	r3, #1
			break;
     c74:	e09e      	b.n	db4 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
     c76:	fb06 2101 	mla	r1, r6, r1, r2
     c7a:	3930      	subs	r1, #48	; 0x30
     c7c:	4603      	mov	r3, r0
     c7e:	e764      	b.n	b4a <cbvprintf+0x10e>
	switch (*sp) {
     c80:	2a74      	cmp	r2, #116	; 0x74
     c82:	d026      	beq.n	cd2 <cbvprintf+0x296>
     c84:	2a7a      	cmp	r2, #122	; 0x7a
     c86:	d1db      	bne.n	c40 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
     c88:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     c8c:	2206      	movs	r2, #6
     c8e:	e00d      	b.n	cac <cbvprintf+0x270>
		if (*++sp == 'h') {
     c90:	785a      	ldrb	r2, [r3, #1]
     c92:	2a68      	cmp	r2, #104	; 0x68
     c94:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     c98:	d106      	bne.n	ca8 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
     c9a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     c9c:	f361 02c6 	bfi	r2, r1, #3, #4
     ca0:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
     ca4:	1c9f      	adds	r7, r3, #2
     ca6:	e7cc      	b.n	c42 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
     ca8:	4613      	mov	r3, r2
     caa:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     cac:	f362 03c6 	bfi	r3, r2, #3, #4
     cb0:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
     cb4:	e7c5      	b.n	c42 <cbvprintf+0x206>
		if (*++sp == 'l') {
     cb6:	785a      	ldrb	r2, [r3, #1]
     cb8:	2a6c      	cmp	r2, #108	; 0x6c
     cba:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     cbe:	d101      	bne.n	cc4 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
     cc0:	2104      	movs	r1, #4
     cc2:	e7eb      	b.n	c9c <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
     cc4:	4613      	mov	r3, r2
     cc6:	2203      	movs	r2, #3
     cc8:	e7f0      	b.n	cac <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
     cca:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     cce:	2205      	movs	r2, #5
     cd0:	e7ec      	b.n	cac <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
     cd2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     cd6:	2207      	movs	r2, #7
     cd8:	e7e8      	b.n	cac <cbvprintf+0x270>
		conv->unsupported = true;
     cda:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
     cde:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
     ce2:	f023 0302 	bic.w	r3, r3, #2
     ce6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     cea:	f043 0302 	orr.w	r3, r3, #2
     cee:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
     cf2:	e7a6      	b.n	c42 <cbvprintf+0x206>
     cf4:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     cf8:	2920      	cmp	r1, #32
     cfa:	f200 8084 	bhi.w	e06 <cbvprintf+0x3ca>
     cfe:	a001      	add	r0, pc, #4	; (adr r0, d04 <cbvprintf+0x2c8>)
     d00:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     d04:	00000dc9 	.word	0x00000dc9
     d08:	00000e07 	.word	0x00000e07
     d0c:	00000e07 	.word	0x00000e07
     d10:	00000e07 	.word	0x00000e07
     d14:	00000e07 	.word	0x00000e07
     d18:	00000e07 	.word	0x00000e07
     d1c:	00000e07 	.word	0x00000e07
     d20:	00000e07 	.word	0x00000e07
     d24:	00000e07 	.word	0x00000e07
     d28:	00000c65 	.word	0x00000c65
     d2c:	00000e07 	.word	0x00000e07
     d30:	00000dc9 	.word	0x00000dc9
     d34:	00000d89 	.word	0x00000d89
     d38:	00000c65 	.word	0x00000c65
     d3c:	00000c65 	.word	0x00000c65
     d40:	00000c65 	.word	0x00000c65
     d44:	00000e07 	.word	0x00000e07
     d48:	00000d89 	.word	0x00000d89
     d4c:	00000e07 	.word	0x00000e07
     d50:	00000e07 	.word	0x00000e07
     d54:	00000e07 	.word	0x00000e07
     d58:	00000e07 	.word	0x00000e07
     d5c:	00000dd1 	.word	0x00000dd1
     d60:	00000dc9 	.word	0x00000dc9
     d64:	00000ded 	.word	0x00000ded
     d68:	00000e07 	.word	0x00000e07
     d6c:	00000e07 	.word	0x00000e07
     d70:	00000ded 	.word	0x00000ded
     d74:	00000e07 	.word	0x00000e07
     d78:	00000dc9 	.word	0x00000dc9
     d7c:	00000e07 	.word	0x00000e07
     d80:	00000e07 	.word	0x00000e07
     d84:	00000dc9 	.word	0x00000dc9
		conv->specifier_cat = SPECIFIER_SINT;
     d88:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     d8c:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     d8e:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     d92:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     d96:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     d98:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
     d9c:	bf02      	ittt	eq
     d9e:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
     da2:	f041 0101 	orreq.w	r1, r1, #1
     da6:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
     daa:	2a63      	cmp	r2, #99	; 0x63
     dac:	d131      	bne.n	e12 <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
     dae:	3b00      	subs	r3, #0
     db0:	bf18      	it	ne
     db2:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
     db4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     db8:	f3c2 0140 	ubfx	r1, r2, #1, #1
     dbc:	430b      	orrs	r3, r1
     dbe:	f363 0241 	bfi	r2, r3, #1, #1
     dc2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     dc6:	e6d8      	b.n	b7a <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
     dc8:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     dcc:	2002      	movs	r0, #2
     dce:	e7de      	b.n	d8e <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
     dd0:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     dd4:	f003 0378 	and.w	r3, r3, #120	; 0x78
     dd8:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
     ddc:	2103      	movs	r1, #3
     dde:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     de2:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
     de4:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     de8:	4143      	adcs	r3, r0
     dea:	e7e3      	b.n	db4 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
     dec:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     df0:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
     df2:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     df6:	f361 0202 	bfi	r2, r1, #0, #3
     dfa:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     dfe:	bf14      	ite	ne
     e00:	2301      	movne	r3, #1
     e02:	2300      	moveq	r3, #0
     e04:	e7d6      	b.n	db4 <cbvprintf+0x378>
		conv->invalid = true;
     e06:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     e0a:	f043 0301 	orr.w	r3, r3, #1
     e0e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
     e12:	2300      	movs	r3, #0
     e14:	e7ce      	b.n	db4 <cbvprintf+0x378>
		} else if (conv->width_present) {
     e16:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
     e1a:	2a00      	cmp	r2, #0
			width = conv->width_value;
     e1c:	bfb4      	ite	lt
     e1e:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
     e22:	f04f 39ff 	movge.w	r9, #4294967295
     e26:	e6ba      	b.n	b9e <cbvprintf+0x162>
		} else if (conv->prec_present) {
     e28:	079b      	lsls	r3, r3, #30
     e2a:	f57f aec7 	bpl.w	bbc <cbvprintf+0x180>
			precision = conv->prec_value;
     e2e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
     e32:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		conv->pad0_value = 0;
     e36:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     e38:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
     e3c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
     e40:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     e44:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     e46:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     e4a:	d136      	bne.n	eba <cbvprintf+0x47e>
			switch (length_mod) {
     e4c:	1ed3      	subs	r3, r2, #3
     e4e:	2b04      	cmp	r3, #4
     e50:	d820      	bhi.n	e94 <cbvprintf+0x458>
     e52:	e8df f003 	tbb	[pc, r3]
     e56:	0703      	.short	0x0703
     e58:	1f07      	.short	0x1f07
     e5a:	1f          	.byte	0x1f
     e5b:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
     e5c:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
     e60:	17c1      	asrs	r1, r0, #31
     e62:	e004      	b.n	e6e <cbvprintf+0x432>
					(sint_value_type)va_arg(ap, intmax_t);
     e64:	3407      	adds	r4, #7
     e66:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
     e6a:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
     e6e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
     e72:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     e76:	f013 0603 	ands.w	r6, r3, #3
     e7a:	d054      	beq.n	f26 <cbvprintf+0x4ea>
			OUTS(sp, fp);
     e7c:	9802      	ldr	r0, [sp, #8]
     e7e:	463b      	mov	r3, r7
     e80:	4652      	mov	r2, sl
     e82:	4659      	mov	r1, fp
     e84:	f007 fa66 	bl	8354 <outs>
     e88:	2800      	cmp	r0, #0
     e8a:	f2c0 8143 	blt.w	1114 <CONFIG_FPROTECT_BLOCK_SIZE+0x114>
     e8e:	4405      	add	r5, r0
			continue;
     e90:	46ba      	mov	sl, r7
     e92:	e5db      	b.n	a4c <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     e94:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
     e98:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
     e9a:	ea4f 71e0 	mov.w	r1, r0, asr #31
     e9e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     ea2:	d105      	bne.n	eb0 <cbvprintf+0x474>
				value->uint = (unsigned char)value->uint;
     ea4:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
     ea8:	930a      	str	r3, [sp, #40]	; 0x28
     eaa:	2300      	movs	r3, #0
     eac:	930b      	str	r3, [sp, #44]	; 0x2c
     eae:	e7e0      	b.n	e72 <cbvprintf+0x436>
			} else if (length_mod == LENGTH_H) {
     eb0:	2a02      	cmp	r2, #2
     eb2:	d1de      	bne.n	e72 <cbvprintf+0x436>
				value->sint = (short)value->sint;
     eb4:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
     eb8:	e7d2      	b.n	e60 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
     eba:	2b02      	cmp	r3, #2
     ebc:	d123      	bne.n	f06 <cbvprintf+0x4ca>
			switch (length_mod) {
     ebe:	1ed3      	subs	r3, r2, #3
     ec0:	2b04      	cmp	r3, #4
     ec2:	d813      	bhi.n	eec <cbvprintf+0x4b0>
     ec4:	e8df f003 	tbb	[pc, r3]
     ec8:	120a0a03 	.word	0x120a0a03
     ecc:	12          	.byte	0x12
     ecd:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
     ece:	6820      	ldr	r0, [r4, #0]
     ed0:	900a      	str	r0, [sp, #40]	; 0x28
     ed2:	2100      	movs	r1, #0
     ed4:	1d23      	adds	r3, r4, #4
     ed6:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
     ed8:	461c      	mov	r4, r3
     eda:	e7ca      	b.n	e72 <cbvprintf+0x436>
					(uint_value_type)va_arg(ap,
     edc:	3407      	adds	r4, #7
     ede:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
     ee2:	e8f3 0102 	ldrd	r0, r1, [r3], #8
     ee6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
     eea:	e7f5      	b.n	ed8 <cbvprintf+0x49c>
					(uint_value_type)va_arg(ap, size_t);
     eec:	f854 3b04 	ldr.w	r3, [r4], #4
     ef0:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     ef2:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
     ef4:	f04f 0300 	mov.w	r3, #0
     ef8:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
     efa:	d0d3      	beq.n	ea4 <cbvprintf+0x468>
			} else if (length_mod == LENGTH_H) {
     efc:	2a02      	cmp	r2, #2
     efe:	d1b8      	bne.n	e72 <cbvprintf+0x436>
				value->uint = (unsigned short)value->uint;
     f00:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
     f04:	e7d0      	b.n	ea8 <cbvprintf+0x46c>
		} else if (specifier_cat == SPECIFIER_FP) {
     f06:	2b04      	cmp	r3, #4
     f08:	d107      	bne.n	f1a <cbvprintf+0x4de>
			if (length_mod == LENGTH_UPPER_L) {
     f0a:	3407      	adds	r4, #7
     f0c:	f024 0407 	bic.w	r4, r4, #7
     f10:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
     f14:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
     f18:	e7ab      	b.n	e72 <cbvprintf+0x436>
		} else if (specifier_cat == SPECIFIER_PTR) {
     f1a:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
     f1c:	bf04      	itt	eq
     f1e:	f854 3b04 	ldreq.w	r3, [r4], #4
     f22:	930a      	streq	r3, [sp, #40]	; 0x28
     f24:	e7a5      	b.n	e72 <cbvprintf+0x436>
		switch (conv->specifier) {
     f26:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     f2a:	2878      	cmp	r0, #120	; 0x78
     f2c:	d8b0      	bhi.n	e90 <cbvprintf+0x454>
     f2e:	2862      	cmp	r0, #98	; 0x62
     f30:	d822      	bhi.n	f78 <cbvprintf+0x53c>
     f32:	2825      	cmp	r0, #37	; 0x25
     f34:	f43f ad93 	beq.w	a5e <cbvprintf+0x22>
     f38:	2858      	cmp	r0, #88	; 0x58
     f3a:	d1a9      	bne.n	e90 <cbvprintf+0x454>
			bps = encode_uint(value->uint, conv, buf, bpe);
     f3c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     f40:	9300      	str	r3, [sp, #0]
     f42:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
     f46:	ab04      	add	r3, sp, #16
     f48:	aa0c      	add	r2, sp, #48	; 0x30
     f4a:	f007 f9b8 	bl	82be <encode_uint>
     f4e:	4682      	mov	sl, r0
			if (precision >= 0) {
     f50:	f1b8 0f00 	cmp.w	r8, #0
     f54:	f10d 0026 	add.w	r0, sp, #38	; 0x26
     f58:	db0c      	blt.n	f74 <cbvprintf+0x538>
				conv->flag_zero = false;
     f5a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
     f5e:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
     f62:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     f66:	4598      	cmp	r8, r3
				conv->flag_zero = false;
     f68:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
     f6c:	d902      	bls.n	f74 <cbvprintf+0x538>
					conv->pad0_value = precision - (int)len;
     f6e:	eba8 0303 	sub.w	r3, r8, r3
     f72:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
     f74:	4680      	mov	r8, r0
     f76:	e03d      	b.n	ff4 <cbvprintf+0x5b8>
     f78:	3863      	subs	r0, #99	; 0x63
     f7a:	2815      	cmp	r0, #21
     f7c:	d888      	bhi.n	e90 <cbvprintf+0x454>
     f7e:	a101      	add	r1, pc, #4	; (adr r1, f84 <cbvprintf+0x548>)
     f80:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
     f84:	00001005 	.word	0x00001005
     f88:	00001069 	.word	0x00001069
     f8c:	00000e91 	.word	0x00000e91
     f90:	00000e91 	.word	0x00000e91
     f94:	00000e91 	.word	0x00000e91
     f98:	00000e91 	.word	0x00000e91
     f9c:	00001069 	.word	0x00001069
     fa0:	00000e91 	.word	0x00000e91
     fa4:	00000e91 	.word	0x00000e91
     fa8:	00000e91 	.word	0x00000e91
     fac:	00000e91 	.word	0x00000e91
     fb0:	000010c7 	.word	0x000010c7
     fb4:	00001095 	.word	0x00001095
     fb8:	00001099 	.word	0x00001099
     fbc:	00000e91 	.word	0x00000e91
     fc0:	00000e91 	.word	0x00000e91
     fc4:	00000fdd 	.word	0x00000fdd
     fc8:	00000e91 	.word	0x00000e91
     fcc:	00001095 	.word	0x00001095
     fd0:	00000e91 	.word	0x00000e91
     fd4:	00000e91 	.word	0x00000e91
     fd8:	00001095 	.word	0x00001095
			if (precision >= 0) {
     fdc:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
     fe0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
     fe4:	db0a      	blt.n	ffc <cbvprintf+0x5c0>
				len = strnlen(bps, precision);
     fe6:	4641      	mov	r1, r8
     fe8:	4650      	mov	r0, sl
     fea:	f007 fa71 	bl	84d0 <strnlen>
			bpe = bps + len;
     fee:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
     ff2:	2600      	movs	r6, #0
		if (bps == NULL) {
     ff4:	f1ba 0f00 	cmp.w	sl, #0
     ff8:	d10c      	bne.n	1014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>
     ffa:	e749      	b.n	e90 <cbvprintf+0x454>
				len = strlen(bps);
     ffc:	4650      	mov	r0, sl
     ffe:	f007 fa60 	bl	84c2 <strlen>
    1002:	e7f4      	b.n	fee <cbvprintf+0x5b2>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1006:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    100a:	2600      	movs	r6, #0
			bpe = buf + 1;
    100c:	f10d 0811 	add.w	r8, sp, #17
			bps = buf;
    1010:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
    1014:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    1018:	b106      	cbz	r6, 101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
			nj_len += 1U;
    101a:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    101c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    1020:	06d0      	lsls	r0, r2, #27
    1022:	d56b      	bpl.n	10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>
			nj_len += 2U;
    1024:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    1026:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    1028:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    102a:	bf48      	it	mi
    102c:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    102e:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    1030:	bf48      	it	mi
    1032:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    1034:	f1b9 0f00 	cmp.w	r9, #0
    1038:	dd79      	ble.n	112e <CONFIG_FPROTECT_BLOCK_SIZE+0x12e>
			if (!conv->flag_dash) {
    103a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    103e:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    1042:	f3c2 0380 	ubfx	r3, r2, #2, #1
    1046:	9303      	str	r3, [sp, #12]
    1048:	0753      	lsls	r3, r2, #29
    104a:	d470      	bmi.n	112e <CONFIG_FPROTECT_BLOCK_SIZE+0x12e>
				if (conv->flag_zero) {
    104c:	0650      	lsls	r0, r2, #25
    104e:	d564      	bpl.n	111a <CONFIG_FPROTECT_BLOCK_SIZE+0x11a>
					if (sign != 0) {
    1050:	b146      	cbz	r6, 1064 <CONFIG_FPROTECT_BLOCK_SIZE+0x64>
						OUTC(sign);
    1052:	9b02      	ldr	r3, [sp, #8]
    1054:	4659      	mov	r1, fp
    1056:	4630      	mov	r0, r6
    1058:	4798      	blx	r3
    105a:	2800      	cmp	r0, #0
    105c:	db5a      	blt.n	1114 <CONFIG_FPROTECT_BLOCK_SIZE+0x114>
						sign = 0;
    105e:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    1060:	3501      	adds	r5, #1
						sign = 0;
    1062:	461e      	mov	r6, r3
					pad = '0';
    1064:	2330      	movs	r3, #48	; 0x30
    1066:	e059      	b.n	111c <CONFIG_FPROTECT_BLOCK_SIZE+0x11c>
			if (conv->flag_plus) {
    1068:	071e      	lsls	r6, r3, #28
    106a:	d411      	bmi.n	1090 <CONFIG_FPROTECT_BLOCK_SIZE+0x90>
				sign = ' ';
    106c:	f013 0610 	ands.w	r6, r3, #16
    1070:	bf18      	it	ne
    1072:	2620      	movne	r6, #32
			sint = value->sint;
    1074:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    1078:	2a00      	cmp	r2, #0
    107a:	f173 0100 	sbcs.w	r1, r3, #0
    107e:	f6bf af5d 	bge.w	f3c <cbvprintf+0x500>
				value->uint = (uint_value_type)-sint;
    1082:	4252      	negs	r2, r2
    1084:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1088:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    108c:	262d      	movs	r6, #45	; 0x2d
    108e:	e755      	b.n	f3c <cbvprintf+0x500>
				sign = '+';
    1090:	262b      	movs	r6, #43	; 0x2b
    1092:	e7ef      	b.n	1074 <CONFIG_FPROTECT_BLOCK_SIZE+0x74>
		switch (conv->specifier) {
    1094:	2600      	movs	r6, #0
    1096:	e751      	b.n	f3c <cbvprintf+0x500>
			if (value->ptr != NULL) {
    1098:	980a      	ldr	r0, [sp, #40]	; 0x28
    109a:	b348      	cbz	r0, 10f0 <CONFIG_FPROTECT_BLOCK_SIZE+0xf0>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    109c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    10a0:	9300      	str	r3, [sp, #0]
    10a2:	aa0c      	add	r2, sp, #48	; 0x30
    10a4:	ab04      	add	r3, sp, #16
    10a6:	2100      	movs	r1, #0
    10a8:	f007 f909 	bl	82be <encode_uint>
				conv->altform_0c = true;
    10ac:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    10b0:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    10b4:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    10b8:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    10bc:	4682      	mov	sl, r0
				conv->altform_0c = true;
    10be:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    10c2:	2600      	movs	r6, #0
				goto prec_int_pad0;
    10c4:	e744      	b.n	f50 <cbvprintf+0x514>
				store_count(conv, value->ptr, count);
    10c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    10c8:	2a07      	cmp	r2, #7
    10ca:	f63f aee1 	bhi.w	e90 <cbvprintf+0x454>
    10ce:	e8df f002 	tbb	[pc, r2]
    10d2:	040d      	.short	0x040d
    10d4:	08080d06 	.word	0x08080d06
    10d8:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    10da:	701d      	strb	r5, [r3, #0]
		break;
    10dc:	e6d8      	b.n	e90 <cbvprintf+0x454>
		*(short *)dp = (short)count;
    10de:	801d      	strh	r5, [r3, #0]
		break;
    10e0:	e6d6      	b.n	e90 <cbvprintf+0x454>
		*(intmax_t *)dp = (intmax_t)count;
    10e2:	4628      	mov	r0, r5
    10e4:	17e9      	asrs	r1, r5, #31
    10e6:	e9c3 0100 	strd	r0, r1, [r3]
		break;
    10ea:	e6d1      	b.n	e90 <cbvprintf+0x454>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    10ec:	601d      	str	r5, [r3, #0]
		break;
    10ee:	e6cf      	b.n	e90 <cbvprintf+0x454>
			bpe = bps + 5;
    10f0:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 11b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b8>
    10f4:	4606      	mov	r6, r0
			bps = "(nil)";
    10f6:	f1a8 0a05 	sub.w	sl, r8, #5
    10fa:	e78b      	b.n	1014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>
		} else if (conv->altform_0) {
    10fc:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    10fe:	bf48      	it	mi
    1100:	3301      	addmi	r3, #1
    1102:	e790      	b.n	1026 <CONFIG_FPROTECT_BLOCK_SIZE+0x26>
					OUTC(pad);
    1104:	4618      	mov	r0, r3
    1106:	9303      	str	r3, [sp, #12]
    1108:	4659      	mov	r1, fp
    110a:	9b02      	ldr	r3, [sp, #8]
    110c:	4798      	blx	r3
    110e:	2800      	cmp	r0, #0
    1110:	9b03      	ldr	r3, [sp, #12]
    1112:	da04      	bge.n	111e <CONFIG_FPROTECT_BLOCK_SIZE+0x11e>
#undef OUTS
#undef OUTC
}
    1114:	b011      	add	sp, #68	; 0x44
    1116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    111a:	2320      	movs	r3, #32
    111c:	444d      	add	r5, r9
    111e:	464a      	mov	r2, r9
				while (width-- > 0) {
    1120:	2a00      	cmp	r2, #0
    1122:	eba5 0109 	sub.w	r1, r5, r9
    1126:	f109 39ff 	add.w	r9, r9, #4294967295
    112a:	dceb      	bgt.n	1104 <CONFIG_FPROTECT_BLOCK_SIZE+0x104>
    112c:	460d      	mov	r5, r1
		if (sign != 0) {
    112e:	b136      	cbz	r6, 113e <CONFIG_FPROTECT_BLOCK_SIZE+0x13e>
			OUTC(sign);
    1130:	9b02      	ldr	r3, [sp, #8]
    1132:	4659      	mov	r1, fp
    1134:	4630      	mov	r0, r6
    1136:	4798      	blx	r3
    1138:	2800      	cmp	r0, #0
    113a:	dbeb      	blt.n	1114 <CONFIG_FPROTECT_BLOCK_SIZE+0x114>
    113c:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    113e:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1142:	06d9      	lsls	r1, r3, #27
    1144:	d401      	bmi.n	114a <CONFIG_FPROTECT_BLOCK_SIZE+0x14a>
    1146:	071a      	lsls	r2, r3, #28
    1148:	d506      	bpl.n	1158 <CONFIG_FPROTECT_BLOCK_SIZE+0x158>
				OUTC('0');
    114a:	9b02      	ldr	r3, [sp, #8]
    114c:	4659      	mov	r1, fp
    114e:	2030      	movs	r0, #48	; 0x30
    1150:	4798      	blx	r3
    1152:	2800      	cmp	r0, #0
    1154:	dbde      	blt.n	1114 <CONFIG_FPROTECT_BLOCK_SIZE+0x114>
    1156:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    1158:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    115c:	06db      	lsls	r3, r3, #27
    115e:	d507      	bpl.n	1170 <CONFIG_FPROTECT_BLOCK_SIZE+0x170>
				OUTC(conv->specifier);
    1160:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    1164:	9b02      	ldr	r3, [sp, #8]
    1166:	4659      	mov	r1, fp
    1168:	4798      	blx	r3
    116a:	2800      	cmp	r0, #0
    116c:	dbd2      	blt.n	1114 <CONFIG_FPROTECT_BLOCK_SIZE+0x114>
    116e:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1170:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    1172:	442e      	add	r6, r5
    1174:	1b73      	subs	r3, r6, r5
    1176:	2b00      	cmp	r3, #0
    1178:	dc16      	bgt.n	11a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a8>
			OUTS(bps, bpe);
    117a:	9802      	ldr	r0, [sp, #8]
    117c:	4643      	mov	r3, r8
    117e:	4652      	mov	r2, sl
    1180:	4659      	mov	r1, fp
    1182:	f007 f8e7 	bl	8354 <outs>
    1186:	2800      	cmp	r0, #0
    1188:	dbc4      	blt.n	1114 <CONFIG_FPROTECT_BLOCK_SIZE+0x114>
    118a:	4405      	add	r5, r0
		while (width > 0) {
    118c:	44a9      	add	r9, r5
    118e:	eba9 0305 	sub.w	r3, r9, r5
    1192:	2b00      	cmp	r3, #0
    1194:	f77f ae7c 	ble.w	e90 <cbvprintf+0x454>
			OUTC(' ');
    1198:	9b02      	ldr	r3, [sp, #8]
    119a:	4659      	mov	r1, fp
    119c:	2020      	movs	r0, #32
    119e:	4798      	blx	r3
    11a0:	2800      	cmp	r0, #0
    11a2:	dbb7      	blt.n	1114 <CONFIG_FPROTECT_BLOCK_SIZE+0x114>
    11a4:	3501      	adds	r5, #1
			--width;
    11a6:	e7f2      	b.n	118e <CONFIG_FPROTECT_BLOCK_SIZE+0x18e>
				OUTC('0');
    11a8:	9b02      	ldr	r3, [sp, #8]
    11aa:	4659      	mov	r1, fp
    11ac:	2030      	movs	r0, #48	; 0x30
    11ae:	4798      	blx	r3
    11b0:	2800      	cmp	r0, #0
    11b2:	dbaf      	blt.n	1114 <CONFIG_FPROTECT_BLOCK_SIZE+0x114>
    11b4:	3501      	adds	r5, #1
    11b6:	e7dd      	b.n	1174 <CONFIG_FPROTECT_BLOCK_SIZE+0x174>
    11b8:	00009509 	.word	0x00009509

000011bc <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    11bc:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
    11be:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    11c2:	2b02      	cmp	r3, #2
{
    11c4:	b570      	push	{r4, r5, r6, lr}
    11c6:	4604      	mov	r4, r0
    11c8:	460e      	mov	r6, r1
	notify->result = res;
    11ca:	6081      	str	r1, [r0, #8]
	switch (method) {
    11cc:	d010      	beq.n	11f0 <sys_notify_finalize+0x34>
    11ce:	2b03      	cmp	r3, #3
    11d0:	d004      	beq.n	11dc <sys_notify_finalize+0x20>
    11d2:	2b01      	cmp	r3, #1
    11d4:	d10f      	bne.n	11f6 <sys_notify_finalize+0x3a>
    11d6:	2500      	movs	r5, #0
    11d8:	4628      	mov	r0, r5
    11da:	e001      	b.n	11e0 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    11dc:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
    11de:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    11e0:	2300      	movs	r3, #0
    11e2:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    11e4:	b110      	cbz	r0, 11ec <sys_notify_finalize+0x30>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    11e6:	4631      	mov	r1, r6
    11e8:	f004 faf2 	bl	57d0 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    11ec:	4628      	mov	r0, r5
    11ee:	bd70      	pop	{r4, r5, r6, pc}
		sig = notify->method.signal;
    11f0:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    11f2:	2500      	movs	r5, #0
		break;
    11f4:	e7f4      	b.n	11e0 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
    11f6:	4a06      	ldr	r2, [pc, #24]	; (1210 <sys_notify_finalize+0x54>)
    11f8:	4906      	ldr	r1, [pc, #24]	; (1214 <sys_notify_finalize+0x58>)
    11fa:	4807      	ldr	r0, [pc, #28]	; (1218 <sys_notify_finalize+0x5c>)
    11fc:	2345      	movs	r3, #69	; 0x45
    11fe:	f007 f92e 	bl	845e <printk>
    1202:	4803      	ldr	r0, [pc, #12]	; (1210 <sys_notify_finalize+0x54>)
    1204:	2145      	movs	r1, #69	; 0x45
    1206:	f007 f853 	bl	82b0 <assert_post_action>
	sys_notify_generic_callback rv = NULL;
    120a:	2500      	movs	r5, #0
    120c:	e7e7      	b.n	11de <sys_notify_finalize+0x22>
    120e:	bf00      	nop
    1210:	0000950a 	.word	0x0000950a
    1214:	00009cef 	.word	0x00009cef
    1218:	00009190 	.word	0x00009190

0000121c <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    121c:	4801      	ldr	r0, [pc, #4]	; (1224 <nrf_cc3xx_platform_abort_init+0x8>)
    121e:	f006 bead 	b.w	7f7c <nrf_cc3xx_platform_set_abort>
    1222:	bf00      	nop
    1224:	00008ec8 	.word	0x00008ec8

00001228 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1228:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    122a:	b1d0      	cbz	r0, 1262 <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    122c:	6843      	ldr	r3, [r0, #4]
    122e:	2b04      	cmp	r3, #4
    1230:	d111      	bne.n	1256 <mutex_unlock_platform+0x2e>
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    1232:	2200      	movs	r2, #0
    1234:	6803      	ldr	r3, [r0, #0]
    1236:	f3bf 8f5b 	dmb	ish
    123a:	e853 1f00 	ldrex	r1, [r3]
    123e:	2901      	cmp	r1, #1
    1240:	d103      	bne.n	124a <mutex_unlock_platform+0x22>
    1242:	e843 2000 	strex	r0, r2, [r3]
    1246:	2800      	cmp	r0, #0
    1248:	d1f7      	bne.n	123a <mutex_unlock_platform+0x12>
    124a:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    124e:	4807      	ldr	r0, [pc, #28]	; (126c <mutex_unlock_platform+0x44>)
    1250:	bf08      	it	eq
    1252:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    1254:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1256:	b13b      	cbz	r3, 1268 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    1258:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    125a:	f004 f97b 	bl	5554 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    125e:	2000      	movs	r0, #0
    1260:	e7f8      	b.n	1254 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1262:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1266:	e7f5      	b.n	1254 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1268:	4801      	ldr	r0, [pc, #4]	; (1270 <mutex_unlock_platform+0x48>)
    126a:	e7f3      	b.n	1254 <mutex_unlock_platform+0x2c>
    126c:	ffff8fe9 	.word	0xffff8fe9
    1270:	ffff8fea 	.word	0xffff8fea

00001274 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1274:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1276:	4604      	mov	r4, r0
    1278:	b918      	cbnz	r0, 1282 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    127a:	4b0d      	ldr	r3, [pc, #52]	; (12b0 <mutex_free_platform+0x3c>)
    127c:	480d      	ldr	r0, [pc, #52]	; (12b4 <mutex_free_platform+0x40>)
    127e:	685b      	ldr	r3, [r3, #4]
    1280:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1282:	6861      	ldr	r1, [r4, #4]
    1284:	2908      	cmp	r1, #8
    1286:	d00d      	beq.n	12a4 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1288:	f031 0304 	bics.w	r3, r1, #4
    128c:	d00a      	beq.n	12a4 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    128e:	f011 0102 	ands.w	r1, r1, #2
    1292:	d008      	beq.n	12a6 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1294:	4808      	ldr	r0, [pc, #32]	; (12b8 <mutex_free_platform+0x44>)
    1296:	4621      	mov	r1, r4
    1298:	f003 fff8 	bl	528c <k_mem_slab_free>
        mutex->mutex = NULL;
    129c:	2300      	movs	r3, #0
    129e:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    12a0:	2300      	movs	r3, #0
    12a2:	6063      	str	r3, [r4, #4]
}
    12a4:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    12a6:	6820      	ldr	r0, [r4, #0]
    12a8:	2214      	movs	r2, #20
    12aa:	f007 f931 	bl	8510 <memset>
    12ae:	e7f7      	b.n	12a0 <mutex_free_platform+0x2c>
    12b0:	2000018c 	.word	0x2000018c
    12b4:	0000952d 	.word	0x0000952d
    12b8:	2000062c 	.word	0x2000062c

000012bc <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    12bc:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    12be:	4604      	mov	r4, r0
    12c0:	b918      	cbnz	r0, 12ca <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    12c2:	4b16      	ldr	r3, [pc, #88]	; (131c <mutex_init_platform+0x60>)
    12c4:	4816      	ldr	r0, [pc, #88]	; (1320 <mutex_init_platform+0x64>)
    12c6:	685b      	ldr	r3, [r3, #4]
    12c8:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    12ca:	6863      	ldr	r3, [r4, #4]
    12cc:	2b04      	cmp	r3, #4
    12ce:	d023      	beq.n	1318 <mutex_init_platform+0x5c>
    12d0:	2b08      	cmp	r3, #8
    12d2:	d021      	beq.n	1318 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    12d4:	b9cb      	cbnz	r3, 130a <mutex_init_platform+0x4e>
    12d6:	6823      	ldr	r3, [r4, #0]
    12d8:	b9bb      	cbnz	r3, 130a <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    12da:	4812      	ldr	r0, [pc, #72]	; (1324 <mutex_init_platform+0x68>)
    12dc:	f04f 32ff 	mov.w	r2, #4294967295
    12e0:	f04f 33ff 	mov.w	r3, #4294967295
    12e4:	4621      	mov	r1, r4
    12e6:	f003 ff65 	bl	51b4 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    12ea:	b908      	cbnz	r0, 12f0 <mutex_init_platform+0x34>
    12ec:	6823      	ldr	r3, [r4, #0]
    12ee:	b91b      	cbnz	r3, 12f8 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    12f0:	4b0a      	ldr	r3, [pc, #40]	; (131c <mutex_init_platform+0x60>)
    12f2:	480d      	ldr	r0, [pc, #52]	; (1328 <mutex_init_platform+0x6c>)
    12f4:	685b      	ldr	r3, [r3, #4]
    12f6:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    12f8:	6820      	ldr	r0, [r4, #0]
    12fa:	2214      	movs	r2, #20
    12fc:	2100      	movs	r1, #0
    12fe:	f007 f907 	bl	8510 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    1302:	6863      	ldr	r3, [r4, #4]
    1304:	f043 0302 	orr.w	r3, r3, #2
    1308:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    130a:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    130c:	f007 fbf1 	bl	8af2 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    1310:	6863      	ldr	r3, [r4, #4]
    1312:	f043 0301 	orr.w	r3, r3, #1
    1316:	6063      	str	r3, [r4, #4]
}
    1318:	bd10      	pop	{r4, pc}
    131a:	bf00      	nop
    131c:	2000018c 	.word	0x2000018c
    1320:	0000952d 	.word	0x0000952d
    1324:	2000062c 	.word	0x2000062c
    1328:	00009553 	.word	0x00009553

0000132c <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    132c:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    132e:	b308      	cbz	r0, 1374 <mutex_lock_platform+0x48>
    switch (mutex->flags) {
    1330:	6843      	ldr	r3, [r0, #4]
    1332:	2b04      	cmp	r3, #4
    1334:	d110      	bne.n	1358 <mutex_lock_platform+0x2c>
    1336:	2201      	movs	r2, #1
    1338:	6803      	ldr	r3, [r0, #0]
    133a:	f3bf 8f5b 	dmb	ish
    133e:	e853 1f00 	ldrex	r1, [r3]
    1342:	2900      	cmp	r1, #0
    1344:	d103      	bne.n	134e <mutex_lock_platform+0x22>
    1346:	e843 2000 	strex	r0, r2, [r3]
    134a:	2800      	cmp	r0, #0
    134c:	d1f7      	bne.n	133e <mutex_lock_platform+0x12>
    134e:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1352:	d10b      	bne.n	136c <mutex_lock_platform+0x40>
    1354:	2000      	movs	r0, #0
}
    1356:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1358:	b153      	cbz	r3, 1370 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    135a:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    135c:	f04f 32ff 	mov.w	r2, #4294967295
    1360:	f04f 33ff 	mov.w	r3, #4294967295
    1364:	f003 fff6 	bl	5354 <z_impl_k_mutex_lock>
        if (ret == 0) {
    1368:	2800      	cmp	r0, #0
    136a:	d0f3      	beq.n	1354 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    136c:	4803      	ldr	r0, [pc, #12]	; (137c <mutex_lock_platform+0x50>)
    136e:	e7f2      	b.n	1356 <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1370:	4803      	ldr	r0, [pc, #12]	; (1380 <mutex_lock_platform+0x54>)
    1372:	e7f0      	b.n	1356 <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1374:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1378:	e7ed      	b.n	1356 <mutex_lock_platform+0x2a>
    137a:	bf00      	nop
    137c:	ffff8fe9 	.word	0xffff8fe9
    1380:	ffff8fea 	.word	0xffff8fea

00001384 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    1384:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    1386:	4906      	ldr	r1, [pc, #24]	; (13a0 <nrf_cc3xx_platform_mutex_init+0x1c>)
    1388:	4806      	ldr	r0, [pc, #24]	; (13a4 <nrf_cc3xx_platform_mutex_init+0x20>)
    138a:	2340      	movs	r3, #64	; 0x40
    138c:	2214      	movs	r2, #20
    138e:	f007 fb94 	bl	8aba <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    1392:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    1396:	4904      	ldr	r1, [pc, #16]	; (13a8 <nrf_cc3xx_platform_mutex_init+0x24>)
    1398:	4804      	ldr	r0, [pc, #16]	; (13ac <nrf_cc3xx_platform_mutex_init+0x28>)
    139a:	f006 be51 	b.w	8040 <nrf_cc3xx_platform_set_mutexes>
    139e:	bf00      	nop
    13a0:	2000064c 	.word	0x2000064c
    13a4:	2000062c 	.word	0x2000062c
    13a8:	00008ee0 	.word	0x00008ee0
    13ac:	00008ed0 	.word	0x00008ed0

000013b0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    13b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    13b4:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
    13b8:	b085      	sub	sp, #20
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    13ba:	f019 0f08 	tst.w	r9, #8
{
    13be:	4604      	mov	r4, r0
    13c0:	9203      	str	r2, [sp, #12]
	if (processing) {
    13c2:	d022      	beq.n	140a <process_event+0x5a>
		if (evt == EVT_COMPLETE) {
    13c4:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    13c6:	bf0c      	ite	eq
    13c8:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    13cc:	f049 0920 	orrne.w	r9, r9, #32
    13d0:	f8a0 901c 	strh.w	r9, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    13d4:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    13d6:	4620      	mov	r0, r4
    13d8:	f005 febc 	bl	7154 <z_spin_unlock_valid>
    13dc:	b968      	cbnz	r0, 13fa <process_event+0x4a>
    13de:	4a9f      	ldr	r2, [pc, #636]	; (165c <process_event+0x2ac>)
    13e0:	499f      	ldr	r1, [pc, #636]	; (1660 <process_event+0x2b0>)
    13e2:	48a0      	ldr	r0, [pc, #640]	; (1664 <process_event+0x2b4>)
    13e4:	23ac      	movs	r3, #172	; 0xac
    13e6:	f007 f83a 	bl	845e <printk>
    13ea:	489f      	ldr	r0, [pc, #636]	; (1668 <process_event+0x2b8>)
    13ec:	4621      	mov	r1, r4
    13ee:	f007 f836 	bl	845e <printk>
    13f2:	489a      	ldr	r0, [pc, #616]	; (165c <process_event+0x2ac>)
    13f4:	21ac      	movs	r1, #172	; 0xac
    13f6:	f006 ff5b 	bl	82b0 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    13fa:	9b03      	ldr	r3, [sp, #12]
    13fc:	f383 8811 	msr	BASEPRI, r3
    1400:	f3bf 8f6f 	isb	sy
}
    1404:	b005      	add	sp, #20
    1406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
    140a:	4f98      	ldr	r7, [pc, #608]	; (166c <process_event+0x2bc>)
    140c:	f8df 8254 	ldr.w	r8, [pc, #596]	; 1664 <process_event+0x2b4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1410:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    1414:	2902      	cmp	r1, #2
    1416:	d106      	bne.n	1426 <process_event+0x76>
			evt = process_recheck(mgr);
    1418:	4620      	mov	r0, r4
    141a:	f006 ffca 	bl	83b2 <process_recheck>
		if (evt == EVT_NOP) {
    141e:	2800      	cmp	r0, #0
    1420:	d0d8      	beq.n	13d4 <process_event+0x24>
		if (evt == EVT_COMPLETE) {
    1422:	2801      	cmp	r0, #1
    1424:	d168      	bne.n	14f8 <process_event+0x148>
			res = mgr->last_res;
    1426:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    142a:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    142c:	f1bb 0f00 	cmp.w	fp, #0
    1430:	da0a      	bge.n	1448 <process_event+0x98>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    1432:	2600      	movs	r6, #0
		*clients = mgr->clients;
    1434:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1436:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    143a:	e9c4 6600 	strd	r6, r6, [r4]
    143e:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1442:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    1444:	9601      	str	r6, [sp, #4]
    1446:	e027      	b.n	1498 <process_event+0xe8>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1448:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    144c:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    144e:	2901      	cmp	r1, #1
    1450:	d834      	bhi.n	14bc <process_event+0x10c>
	list->head = NULL;
    1452:	2100      	movs	r1, #0
    1454:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
    1458:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    145a:	6825      	ldr	r5, [r4, #0]
    145c:	b29b      	uxth	r3, r3
	list->tail = NULL;
    145e:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    1462:	d10c      	bne.n	147e <process_event+0xce>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1464:	428d      	cmp	r5, r1
    1466:	462a      	mov	r2, r5
    1468:	bf38      	it	cc
    146a:	460a      	movcc	r2, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    146c:	b12a      	cbz	r2, 147a <process_event+0xca>
				mgr->refs += 1U;
    146e:	8be1      	ldrh	r1, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1470:	6812      	ldr	r2, [r2, #0]
    1472:	3101      	adds	r1, #1
    1474:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1476:	2a00      	cmp	r2, #0
    1478:	d1f8      	bne.n	146c <process_event+0xbc>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    147a:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    147e:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    1480:	4620      	mov	r0, r4
    1482:	f006 ff96 	bl	83b2 <process_recheck>
    1486:	4606      	mov	r6, r0
    1488:	2800      	cmp	r0, #0
    148a:	d0db      	beq.n	1444 <process_event+0x94>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    148c:	8ba3      	ldrh	r3, [r4, #28]
    148e:	f043 0320 	orr.w	r3, r3, #32
    1492:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    1494:	2300      	movs	r3, #0
    1496:	9301      	str	r3, [sp, #4]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1498:	8ba3      	ldrh	r3, [r4, #28]
    149a:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    149e:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    14a0:	9202      	str	r2, [sp, #8]
				   && !sys_slist_is_empty(&mgr->monitors);
    14a2:	d003      	beq.n	14ac <process_event+0xfc>
		if (do_monitors
    14a4:	68a2      	ldr	r2, [r4, #8]
    14a6:	2a00      	cmp	r2, #0
    14a8:	f040 80f0 	bne.w	168c <process_event+0x2dc>
		    || !sys_slist_is_empty(&clients)
    14ac:	b91d      	cbnz	r5, 14b6 <process_event+0x106>
		    || (transit != NULL)) {
    14ae:	9a01      	ldr	r2, [sp, #4]
    14b0:	2a00      	cmp	r2, #0
    14b2:	f000 8136 	beq.w	1722 <process_event+0x372>
    14b6:	f04f 0900 	mov.w	r9, #0
    14ba:	e0e9      	b.n	1690 <process_event+0x2e0>
	} else if (state == ONOFF_STATE_TO_OFF) {
    14bc:	2a04      	cmp	r2, #4
    14be:	d10e      	bne.n	14de <process_event+0x12e>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14c0:	f023 0307 	bic.w	r3, r3, #7
    14c4:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    14c6:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    14c8:	4620      	mov	r0, r4
    14ca:	f006 ff72 	bl	83b2 <process_recheck>
    14ce:	4605      	mov	r5, r0
    14d0:	b118      	cbz	r0, 14da <process_event+0x12a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    14d2:	f042 0220 	orr.w	r2, r2, #32
    14d6:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
    14d8:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    14da:	9501      	str	r5, [sp, #4]
    14dc:	e7dc      	b.n	1498 <process_event+0xe8>
		__ASSERT_NO_MSG(false);
    14de:	4640      	mov	r0, r8
    14e0:	4963      	ldr	r1, [pc, #396]	; (1670 <process_event+0x2c0>)
    14e2:	f240 131b 	movw	r3, #283	; 0x11b
    14e6:	463a      	mov	r2, r7
    14e8:	f006 ffb9 	bl	845e <printk>
    14ec:	f240 111b 	movw	r1, #283	; 0x11b
    14f0:	4638      	mov	r0, r7
    14f2:	f006 fedd 	bl	82b0 <assert_post_action>
    14f6:	e7ef      	b.n	14d8 <process_event+0x128>
		} else if (evt == EVT_START) {
    14f8:	2803      	cmp	r0, #3
    14fa:	d135      	bne.n	1568 <process_event+0x1b8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    14fc:	f1b9 0f00 	cmp.w	r9, #0
    1500:	d00b      	beq.n	151a <process_event+0x16a>
    1502:	495c      	ldr	r1, [pc, #368]	; (1674 <process_event+0x2c4>)
    1504:	4640      	mov	r0, r8
    1506:	f44f 73ab 	mov.w	r3, #342	; 0x156
    150a:	463a      	mov	r2, r7
    150c:	f006 ffa7 	bl	845e <printk>
    1510:	f44f 71ab 	mov.w	r1, #342	; 0x156
    1514:	4638      	mov	r0, r7
    1516:	f006 fecb 	bl	82b0 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    151a:	6823      	ldr	r3, [r4, #0]
    151c:	b95b      	cbnz	r3, 1536 <process_event+0x186>
    151e:	4956      	ldr	r1, [pc, #344]	; (1678 <process_event+0x2c8>)
    1520:	4640      	mov	r0, r8
    1522:	f240 1357 	movw	r3, #343	; 0x157
    1526:	463a      	mov	r2, r7
    1528:	f006 ff99 	bl	845e <printk>
    152c:	f240 1157 	movw	r1, #343	; 0x157
    1530:	4638      	mov	r0, r7
    1532:	f006 febd 	bl	82b0 <assert_post_action>
			transit = mgr->transitions->start;
    1536:	6923      	ldr	r3, [r4, #16]
    1538:	681b      	ldr	r3, [r3, #0]
    153a:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    153c:	b95b      	cbnz	r3, 1556 <process_event+0x1a6>
    153e:	494f      	ldr	r1, [pc, #316]	; (167c <process_event+0x2cc>)
    1540:	4640      	mov	r0, r8
    1542:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    1546:	463a      	mov	r2, r7
    1548:	f006 ff89 	bl	845e <printk>
    154c:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    1550:	4638      	mov	r0, r7
    1552:	f006 fead 	bl	82b0 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1556:	8ba3      	ldrh	r3, [r4, #28]
    1558:	f023 0307 	bic.w	r3, r3, #7
    155c:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    1560:	83a3      	strh	r3, [r4, #28]
}
    1562:	2500      	movs	r5, #0
		res = 0;
    1564:	46ab      	mov	fp, r5
}
    1566:	e797      	b.n	1498 <process_event+0xe8>
		} else if (evt == EVT_STOP) {
    1568:	2804      	cmp	r0, #4
    156a:	d132      	bne.n	15d2 <process_event+0x222>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    156c:	f1b9 0f02 	cmp.w	r9, #2
    1570:	d00b      	beq.n	158a <process_event+0x1da>
    1572:	4943      	ldr	r1, [pc, #268]	; (1680 <process_event+0x2d0>)
    1574:	4640      	mov	r0, r8
    1576:	f240 135d 	movw	r3, #349	; 0x15d
    157a:	463a      	mov	r2, r7
    157c:	f006 ff6f 	bl	845e <printk>
    1580:	f240 115d 	movw	r1, #349	; 0x15d
    1584:	4638      	mov	r0, r7
    1586:	f006 fe93 	bl	82b0 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    158a:	8be3      	ldrh	r3, [r4, #30]
    158c:	b15b      	cbz	r3, 15a6 <process_event+0x1f6>
    158e:	493d      	ldr	r1, [pc, #244]	; (1684 <process_event+0x2d4>)
    1590:	4640      	mov	r0, r8
    1592:	f44f 73af 	mov.w	r3, #350	; 0x15e
    1596:	463a      	mov	r2, r7
    1598:	f006 ff61 	bl	845e <printk>
    159c:	f44f 71af 	mov.w	r1, #350	; 0x15e
    15a0:	4638      	mov	r0, r7
    15a2:	f006 fe85 	bl	82b0 <assert_post_action>
			transit = mgr->transitions->stop;
    15a6:	6923      	ldr	r3, [r4, #16]
    15a8:	685b      	ldr	r3, [r3, #4]
    15aa:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    15ac:	b95b      	cbnz	r3, 15c6 <process_event+0x216>
    15ae:	4933      	ldr	r1, [pc, #204]	; (167c <process_event+0x2cc>)
    15b0:	4640      	mov	r0, r8
    15b2:	f240 1361 	movw	r3, #353	; 0x161
    15b6:	463a      	mov	r2, r7
    15b8:	f006 ff51 	bl	845e <printk>
    15bc:	f240 1161 	movw	r1, #353	; 0x161
    15c0:	4638      	mov	r0, r7
    15c2:	f006 fe75 	bl	82b0 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    15c6:	8ba3      	ldrh	r3, [r4, #28]
    15c8:	f023 0307 	bic.w	r3, r3, #7
    15cc:	f043 0304 	orr.w	r3, r3, #4
    15d0:	e7c6      	b.n	1560 <process_event+0x1b0>
		} else if (evt == EVT_RESET) {
    15d2:	2805      	cmp	r0, #5
    15d4:	d132      	bne.n	163c <process_event+0x28c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    15d6:	f1b9 0f01 	cmp.w	r9, #1
    15da:	d00b      	beq.n	15f4 <process_event+0x244>
    15dc:	492a      	ldr	r1, [pc, #168]	; (1688 <process_event+0x2d8>)
    15de:	4640      	mov	r0, r8
    15e0:	f44f 73b2 	mov.w	r3, #356	; 0x164
    15e4:	463a      	mov	r2, r7
    15e6:	f006 ff3a 	bl	845e <printk>
    15ea:	f44f 71b2 	mov.w	r1, #356	; 0x164
    15ee:	4638      	mov	r0, r7
    15f0:	f006 fe5e 	bl	82b0 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    15f4:	6823      	ldr	r3, [r4, #0]
    15f6:	b95b      	cbnz	r3, 1610 <process_event+0x260>
    15f8:	491f      	ldr	r1, [pc, #124]	; (1678 <process_event+0x2c8>)
    15fa:	4640      	mov	r0, r8
    15fc:	f240 1365 	movw	r3, #357	; 0x165
    1600:	463a      	mov	r2, r7
    1602:	f006 ff2c 	bl	845e <printk>
    1606:	f240 1165 	movw	r1, #357	; 0x165
    160a:	4638      	mov	r0, r7
    160c:	f006 fe50 	bl	82b0 <assert_post_action>
			transit = mgr->transitions->reset;
    1610:	6923      	ldr	r3, [r4, #16]
    1612:	689b      	ldr	r3, [r3, #8]
    1614:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    1616:	b95b      	cbnz	r3, 1630 <process_event+0x280>
    1618:	4918      	ldr	r1, [pc, #96]	; (167c <process_event+0x2cc>)
    161a:	4640      	mov	r0, r8
    161c:	f44f 73b4 	mov.w	r3, #360	; 0x168
    1620:	463a      	mov	r2, r7
    1622:	f006 ff1c 	bl	845e <printk>
    1626:	f44f 71b4 	mov.w	r1, #360	; 0x168
    162a:	4638      	mov	r0, r7
    162c:	f006 fe40 	bl	82b0 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1630:	8ba3      	ldrh	r3, [r4, #28]
    1632:	f023 0307 	bic.w	r3, r3, #7
    1636:	f043 0305 	orr.w	r3, r3, #5
    163a:	e791      	b.n	1560 <process_event+0x1b0>
			__ASSERT_NO_MSG(false);
    163c:	490c      	ldr	r1, [pc, #48]	; (1670 <process_event+0x2c0>)
    163e:	f240 136b 	movw	r3, #363	; 0x16b
    1642:	463a      	mov	r2, r7
    1644:	4640      	mov	r0, r8
    1646:	f006 ff0a 	bl	845e <printk>
    164a:	2500      	movs	r5, #0
    164c:	f240 116b 	movw	r1, #363	; 0x16b
    1650:	4638      	mov	r0, r7
    1652:	f006 fe2d 	bl	82b0 <assert_post_action>
		onoff_transition_fn transit = NULL;
    1656:	9501      	str	r5, [sp, #4]
    1658:	e784      	b.n	1564 <process_event+0x1b4>
    165a:	bf00      	nop
    165c:	00009623 	.word	0x00009623
    1660:	00009649 	.word	0x00009649
    1664:	00009190 	.word	0x00009190
    1668:	00009660 	.word	0x00009660
    166c:	00009580 	.word	0x00009580
    1670:	00009cef 	.word	0x00009cef
    1674:	000095a2 	.word	0x000095a2
    1678:	000095ae 	.word	0x000095ae
    167c:	000095d1 	.word	0x000095d1
    1680:	000095e8 	.word	0x000095e8
    1684:	000095fe 	.word	0x000095fe
    1688:	0000960d 	.word	0x0000960d
				   && !sys_slist_is_empty(&mgr->monitors);
    168c:	f04f 0901 	mov.w	r9, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1690:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
    1694:	f104 0a14 	add.w	sl, r4, #20
			mgr->flags = flags;
    1698:	83a3      	strh	r3, [r4, #28]
    169a:	4650      	mov	r0, sl
    169c:	f005 fd5a 	bl	7154 <z_spin_unlock_valid>
    16a0:	b968      	cbnz	r0, 16be <process_event+0x30e>
    16a2:	4a3a      	ldr	r2, [pc, #232]	; (178c <process_event+0x3dc>)
    16a4:	493a      	ldr	r1, [pc, #232]	; (1790 <process_event+0x3e0>)
    16a6:	23ac      	movs	r3, #172	; 0xac
    16a8:	4640      	mov	r0, r8
    16aa:	f006 fed8 	bl	845e <printk>
    16ae:	4839      	ldr	r0, [pc, #228]	; (1794 <process_event+0x3e4>)
    16b0:	4651      	mov	r1, sl
    16b2:	f006 fed4 	bl	845e <printk>
    16b6:	4835      	ldr	r0, [pc, #212]	; (178c <process_event+0x3dc>)
    16b8:	21ac      	movs	r1, #172	; 0xac
    16ba:	f006 fdf9 	bl	82b0 <assert_post_action>
    16be:	9b03      	ldr	r3, [sp, #12]
    16c0:	f383 8811 	msr	BASEPRI, r3
    16c4:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    16c8:	f1b9 0f00 	cmp.w	r9, #0
    16cc:	d138      	bne.n	1740 <process_event+0x390>
	while (!sys_slist_is_empty(list)) {
    16ce:	2d00      	cmp	r5, #0
    16d0:	d14b      	bne.n	176a <process_event+0x3ba>
			if (transit != NULL) {
    16d2:	9b01      	ldr	r3, [sp, #4]
    16d4:	b113      	cbz	r3, 16dc <process_event+0x32c>
				transit(mgr, transition_complete);
    16d6:	4930      	ldr	r1, [pc, #192]	; (1798 <process_event+0x3e8>)
    16d8:	4620      	mov	r0, r4
    16da:	4798      	blx	r3
	__asm__ volatile(
    16dc:	f04f 0320 	mov.w	r3, #32
    16e0:	f3ef 8b11 	mrs	fp, BASEPRI
    16e4:	f383 8812 	msr	BASEPRI_MAX, r3
    16e8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    16ec:	4650      	mov	r0, sl
	k.key = arch_irq_lock();
    16ee:	f8cd b00c 	str.w	fp, [sp, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    16f2:	f005 fd21 	bl	7138 <z_spin_lock_valid>
    16f6:	b968      	cbnz	r0, 1714 <process_event+0x364>
    16f8:	4a24      	ldr	r2, [pc, #144]	; (178c <process_event+0x3dc>)
    16fa:	4928      	ldr	r1, [pc, #160]	; (179c <process_event+0x3ec>)
    16fc:	2381      	movs	r3, #129	; 0x81
    16fe:	4640      	mov	r0, r8
    1700:	f006 fead 	bl	845e <printk>
    1704:	4826      	ldr	r0, [pc, #152]	; (17a0 <process_event+0x3f0>)
    1706:	4651      	mov	r1, sl
    1708:	f006 fea9 	bl	845e <printk>
    170c:	481f      	ldr	r0, [pc, #124]	; (178c <process_event+0x3dc>)
    170e:	2181      	movs	r1, #129	; 0x81
    1710:	f006 fdce 	bl	82b0 <assert_post_action>
	z_spin_lock_set_owner(l);
    1714:	4650      	mov	r0, sl
    1716:	f005 fd2d 	bl	7174 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    171a:	8ba3      	ldrh	r3, [r4, #28]
    171c:	f023 0308 	bic.w	r3, r3, #8
    1720:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1722:	8ba3      	ldrh	r3, [r4, #28]
    1724:	06da      	lsls	r2, r3, #27
    1726:	d528      	bpl.n	177a <process_event+0x3ca>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1728:	f023 0310 	bic.w	r3, r3, #16
    172c:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    172e:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    1730:	f8b4 901c 	ldrh.w	r9, [r4, #28]
    1734:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    1738:	2900      	cmp	r1, #0
    173a:	f47f ae6b 	bne.w	1414 <process_event+0x64>
out:
    173e:	e649      	b.n	13d4 <process_event+0x24>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1740:	68a1      	ldr	r1, [r4, #8]
    1742:	2900      	cmp	r1, #0
    1744:	d0c3      	beq.n	16ce <process_event+0x31e>
	return node->next;
    1746:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    1748:	9a02      	ldr	r2, [sp, #8]
    174a:	2b00      	cmp	r3, #0
    174c:	bf38      	it	cc
    174e:	2300      	movcc	r3, #0
    1750:	4699      	mov	r9, r3
    1752:	684b      	ldr	r3, [r1, #4]
    1754:	4620      	mov	r0, r4
    1756:	461e      	mov	r6, r3
    1758:	465b      	mov	r3, fp
    175a:	47b0      	blx	r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    175c:	f1b9 0f00 	cmp.w	r9, #0
    1760:	d0b5      	beq.n	16ce <process_event+0x31e>
    1762:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1766:	4649      	mov	r1, r9
    1768:	e7ee      	b.n	1748 <process_event+0x398>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    176a:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    176c:	9a02      	ldr	r2, [sp, #8]
    176e:	682d      	ldr	r5, [r5, #0]
    1770:	465b      	mov	r3, fp
    1772:	4620      	mov	r0, r4
    1774:	f006 fe39 	bl	83ea <notify_one>
    1778:	e7a9      	b.n	16ce <process_event+0x31e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    177a:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    177e:	bf1e      	ittt	ne
    1780:	f023 0320 	bicne.w	r3, r3, #32
    1784:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    1786:	2102      	movne	r1, #2
    1788:	e7d2      	b.n	1730 <process_event+0x380>
    178a:	bf00      	nop
    178c:	00009623 	.word	0x00009623
    1790:	00009649 	.word	0x00009649
    1794:	00009660 	.word	0x00009660
    1798:	000017a5 	.word	0x000017a5
    179c:	00009675 	.word	0x00009675
    17a0:	0000968a 	.word	0x0000968a

000017a4 <transition_complete>:
{
    17a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    17a6:	4604      	mov	r4, r0
    17a8:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    17aa:	f100 0614 	add.w	r6, r0, #20
    17ae:	f04f 0320 	mov.w	r3, #32
    17b2:	f3ef 8711 	mrs	r7, BASEPRI
    17b6:	f383 8812 	msr	BASEPRI_MAX, r3
    17ba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    17be:	4630      	mov	r0, r6
    17c0:	f005 fcba 	bl	7138 <z_spin_lock_valid>
    17c4:	b968      	cbnz	r0, 17e2 <transition_complete+0x3e>
    17c6:	4a0c      	ldr	r2, [pc, #48]	; (17f8 <transition_complete+0x54>)
    17c8:	490c      	ldr	r1, [pc, #48]	; (17fc <transition_complete+0x58>)
    17ca:	480d      	ldr	r0, [pc, #52]	; (1800 <transition_complete+0x5c>)
    17cc:	2381      	movs	r3, #129	; 0x81
    17ce:	f006 fe46 	bl	845e <printk>
    17d2:	480c      	ldr	r0, [pc, #48]	; (1804 <transition_complete+0x60>)
    17d4:	4631      	mov	r1, r6
    17d6:	f006 fe42 	bl	845e <printk>
    17da:	4807      	ldr	r0, [pc, #28]	; (17f8 <transition_complete+0x54>)
    17dc:	2181      	movs	r1, #129	; 0x81
    17de:	f006 fd67 	bl	82b0 <assert_post_action>
	z_spin_lock_set_owner(l);
    17e2:	4630      	mov	r0, r6
    17e4:	f005 fcc6 	bl	7174 <z_spin_lock_set_owner>
	mgr->last_res = res;
    17e8:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    17ea:	463a      	mov	r2, r7
    17ec:	4620      	mov	r0, r4
    17ee:	2101      	movs	r1, #1
}
    17f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    17f4:	f7ff bddc 	b.w	13b0 <process_event>
    17f8:	00009623 	.word	0x00009623
    17fc:	00009675 	.word	0x00009675
    1800:	00009190 	.word	0x00009190
    1804:	0000968a 	.word	0x0000968a

00001808 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    1808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    180c:	4604      	mov	r4, r0
    180e:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    1810:	f006 fe01 	bl	8416 <validate_args>

	if (rv < 0) {
    1814:	1e05      	subs	r5, r0, #0
    1816:	db5e      	blt.n	18d6 <onoff_request+0xce>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    1818:	f104 0914 	add.w	r9, r4, #20
    181c:	f04f 0320 	mov.w	r3, #32
    1820:	f3ef 8a11 	mrs	sl, BASEPRI
    1824:	f383 8812 	msr	BASEPRI_MAX, r3
    1828:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    182c:	4648      	mov	r0, r9
    182e:	f005 fc83 	bl	7138 <z_spin_lock_valid>
    1832:	b968      	cbnz	r0, 1850 <onoff_request+0x48>
    1834:	4a38      	ldr	r2, [pc, #224]	; (1918 <onoff_request+0x110>)
    1836:	4939      	ldr	r1, [pc, #228]	; (191c <onoff_request+0x114>)
    1838:	4839      	ldr	r0, [pc, #228]	; (1920 <onoff_request+0x118>)
    183a:	2381      	movs	r3, #129	; 0x81
    183c:	f006 fe0f 	bl	845e <printk>
    1840:	4838      	ldr	r0, [pc, #224]	; (1924 <onoff_request+0x11c>)
    1842:	4649      	mov	r1, r9
    1844:	f006 fe0b 	bl	845e <printk>
    1848:	4833      	ldr	r0, [pc, #204]	; (1918 <onoff_request+0x110>)
    184a:	2181      	movs	r1, #129	; 0x81
    184c:	f006 fd30 	bl	82b0 <assert_post_action>
	z_spin_lock_set_owner(l);
    1850:	4648      	mov	r0, r9
    1852:	f005 fc8f 	bl	7174 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    1856:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1858:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
    185a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    185e:	428b      	cmp	r3, r1
    1860:	f002 0607 	and.w	r6, r2, #7
    1864:	d050      	beq.n	1908 <onoff_request+0x100>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    1866:	2e02      	cmp	r6, #2
    1868:	d124      	bne.n	18b4 <onoff_request+0xac>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    186a:	3301      	adds	r3, #1
    186c:	83e3      	strh	r3, [r4, #30]
	rv = state;
    186e:	4635      	mov	r5, r6
		notify = true;
    1870:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1874:	4648      	mov	r0, r9
    1876:	f005 fc6d 	bl	7154 <z_spin_unlock_valid>
    187a:	b968      	cbnz	r0, 1898 <onoff_request+0x90>
    187c:	4a26      	ldr	r2, [pc, #152]	; (1918 <onoff_request+0x110>)
    187e:	492a      	ldr	r1, [pc, #168]	; (1928 <onoff_request+0x120>)
    1880:	4827      	ldr	r0, [pc, #156]	; (1920 <onoff_request+0x118>)
    1882:	23ac      	movs	r3, #172	; 0xac
    1884:	f006 fdeb 	bl	845e <printk>
    1888:	4828      	ldr	r0, [pc, #160]	; (192c <onoff_request+0x124>)
    188a:	4649      	mov	r1, r9
    188c:	f006 fde7 	bl	845e <printk>
    1890:	4821      	ldr	r0, [pc, #132]	; (1918 <onoff_request+0x110>)
    1892:	21ac      	movs	r1, #172	; 0xac
    1894:	f006 fd0c 	bl	82b0 <assert_post_action>
	__asm__ volatile(
    1898:	f38a 8811 	msr	BASEPRI, sl
    189c:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    18a0:	f1b8 0f00 	cmp.w	r8, #0
    18a4:	d017      	beq.n	18d6 <onoff_request+0xce>
			notify_one(mgr, cli, state, 0);
    18a6:	2300      	movs	r3, #0
    18a8:	4632      	mov	r2, r6
    18aa:	4639      	mov	r1, r7
    18ac:	4620      	mov	r0, r4
    18ae:	f006 fd9c 	bl	83ea <notify_one>
    18b2:	e010      	b.n	18d6 <onoff_request+0xce>
	} else if ((state == ONOFF_STATE_OFF)
    18b4:	0793      	lsls	r3, r2, #30
    18b6:	d001      	beq.n	18bc <onoff_request+0xb4>
		   || (state == ONOFF_STATE_TO_ON)) {
    18b8:	2e06      	cmp	r6, #6
    18ba:	d10f      	bne.n	18dc <onoff_request+0xd4>
	parent->next = child;
    18bc:	2300      	movs	r3, #0
    18be:	603b      	str	r3, [r7, #0]
Z_GENLIST_APPEND(slist, snode)
    18c0:	6863      	ldr	r3, [r4, #4]
    18c2:	b9f3      	cbnz	r3, 1902 <onoff_request+0xfa>
	list->head = node;
    18c4:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
    18c8:	4635      	mov	r5, r6
    18ca:	b9fe      	cbnz	r6, 190c <onoff_request+0x104>
		process_event(mgr, EVT_RECHECK, key);
    18cc:	4652      	mov	r2, sl
    18ce:	2102      	movs	r1, #2
    18d0:	4620      	mov	r0, r4
    18d2:	f7ff fd6d 	bl	13b0 <process_event>
		}
	}

	return rv;
}
    18d6:	4628      	mov	r0, r5
    18d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
    18dc:	2e05      	cmp	r6, #5
    18de:	d018      	beq.n	1912 <onoff_request+0x10a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    18e0:	2e01      	cmp	r6, #1
    18e2:	d00b      	beq.n	18fc <onoff_request+0xf4>
    18e4:	4912      	ldr	r1, [pc, #72]	; (1930 <onoff_request+0x128>)
    18e6:	480e      	ldr	r0, [pc, #56]	; (1920 <onoff_request+0x118>)
    18e8:	4a12      	ldr	r2, [pc, #72]	; (1934 <onoff_request+0x12c>)
    18ea:	f240 13c9 	movw	r3, #457	; 0x1c9
    18ee:	f006 fdb6 	bl	845e <printk>
    18f2:	4810      	ldr	r0, [pc, #64]	; (1934 <onoff_request+0x12c>)
    18f4:	f240 11c9 	movw	r1, #457	; 0x1c9
    18f8:	f006 fcda 	bl	82b0 <assert_post_action>
		rv = -EIO;
    18fc:	f06f 0504 	mvn.w	r5, #4
    1900:	e004      	b.n	190c <onoff_request+0x104>
	parent->next = child;
    1902:	601f      	str	r7, [r3, #0]
	list->tail = node;
    1904:	6067      	str	r7, [r4, #4]
}
    1906:	e7df      	b.n	18c8 <onoff_request+0xc0>
		rv = -EAGAIN;
    1908:	f06f 050a 	mvn.w	r5, #10
    190c:	f04f 0800 	mov.w	r8, #0
    1910:	e7b0      	b.n	1874 <onoff_request+0x6c>
		rv = -ENOTSUP;
    1912:	f06f 0585 	mvn.w	r5, #133	; 0x85
    1916:	e7f9      	b.n	190c <onoff_request+0x104>
    1918:	00009623 	.word	0x00009623
    191c:	00009675 	.word	0x00009675
    1920:	00009190 	.word	0x00009190
    1924:	0000968a 	.word	0x0000968a
    1928:	00009649 	.word	0x00009649
    192c:	00009660 	.word	0x00009660
    1930:	0000960d 	.word	0x0000960d
    1934:	00009580 	.word	0x00009580

00001938 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    1938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    193c:	4605      	mov	r5, r0
	__asm__ volatile(
    193e:	f04f 0320 	mov.w	r3, #32
    1942:	f3ef 8611 	mrs	r6, BASEPRI
    1946:	f383 8812 	msr	BASEPRI_MAX, r3
    194a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    194e:	4823      	ldr	r0, [pc, #140]	; (19dc <pm_state_notify+0xa4>)
    1950:	f005 fbf2 	bl	7138 <z_spin_lock_valid>
    1954:	b968      	cbnz	r0, 1972 <pm_state_notify+0x3a>
    1956:	4a22      	ldr	r2, [pc, #136]	; (19e0 <pm_state_notify+0xa8>)
    1958:	4922      	ldr	r1, [pc, #136]	; (19e4 <pm_state_notify+0xac>)
    195a:	4823      	ldr	r0, [pc, #140]	; (19e8 <pm_state_notify+0xb0>)
    195c:	2381      	movs	r3, #129	; 0x81
    195e:	f006 fd7e 	bl	845e <printk>
    1962:	491e      	ldr	r1, [pc, #120]	; (19dc <pm_state_notify+0xa4>)
    1964:	4821      	ldr	r0, [pc, #132]	; (19ec <pm_state_notify+0xb4>)
    1966:	f006 fd7a 	bl	845e <printk>
    196a:	481d      	ldr	r0, [pc, #116]	; (19e0 <pm_state_notify+0xa8>)
    196c:	2181      	movs	r1, #129	; 0x81
    196e:	f006 fc9f 	bl	82b0 <assert_post_action>
	z_spin_lock_set_owner(l);
    1972:	481a      	ldr	r0, [pc, #104]	; (19dc <pm_state_notify+0xa4>)
    1974:	f005 fbfe 	bl	7174 <z_spin_lock_set_owner>
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1978:	4b1d      	ldr	r3, [pc, #116]	; (19f0 <pm_state_notify+0xb8>)
    197a:	681c      	ldr	r4, [r3, #0]
    197c:	2c00      	cmp	r4, #0
    197e:	bf38      	it	cc
    1980:	2400      	movcc	r4, #0
    1982:	b19c      	cbz	r4, 19ac <pm_state_notify+0x74>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_states[_current_cpu->id].state);
    1984:	4f1b      	ldr	r7, [pc, #108]	; (19f4 <pm_state_notify+0xbc>)
    1986:	f8df 8078 	ldr.w	r8, [pc, #120]	; 1a00 <pm_state_notify+0xc8>
    198a:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    198e:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    1992:	2d00      	cmp	r5, #0
    1994:	bf08      	it	eq
    1996:	4613      	moveq	r3, r2
		if (callback) {
    1998:	b12b      	cbz	r3, 19a6 <pm_state_notify+0x6e>
			callback(z_power_states[_current_cpu->id].state);
    199a:	f898 2014 	ldrb.w	r2, [r8, #20]
    199e:	fb09 f202 	mul.w	r2, r9, r2
    19a2:	5cb8      	ldrb	r0, [r7, r2]
    19a4:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    19a6:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    19a8:	2c00      	cmp	r4, #0
    19aa:	d1f0      	bne.n	198e <pm_state_notify+0x56>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    19ac:	480b      	ldr	r0, [pc, #44]	; (19dc <pm_state_notify+0xa4>)
    19ae:	f005 fbd1 	bl	7154 <z_spin_unlock_valid>
    19b2:	b968      	cbnz	r0, 19d0 <pm_state_notify+0x98>
    19b4:	4a0a      	ldr	r2, [pc, #40]	; (19e0 <pm_state_notify+0xa8>)
    19b6:	4910      	ldr	r1, [pc, #64]	; (19f8 <pm_state_notify+0xc0>)
    19b8:	480b      	ldr	r0, [pc, #44]	; (19e8 <pm_state_notify+0xb0>)
    19ba:	23ac      	movs	r3, #172	; 0xac
    19bc:	f006 fd4f 	bl	845e <printk>
    19c0:	4906      	ldr	r1, [pc, #24]	; (19dc <pm_state_notify+0xa4>)
    19c2:	480e      	ldr	r0, [pc, #56]	; (19fc <pm_state_notify+0xc4>)
    19c4:	f006 fd4b 	bl	845e <printk>
    19c8:	4805      	ldr	r0, [pc, #20]	; (19e0 <pm_state_notify+0xa8>)
    19ca:	21ac      	movs	r1, #172	; 0xac
    19cc:	f006 fc70 	bl	82b0 <assert_post_action>
	__asm__ volatile(
    19d0:	f386 8811 	msr	BASEPRI, r6
    19d4:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    19d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    19dc:	20000b4c 	.word	0x20000b4c
    19e0:	00009623 	.word	0x00009623
    19e4:	00009675 	.word	0x00009675
    19e8:	00009190 	.word	0x00009190
    19ec:	0000968a 	.word	0x0000968a
    19f0:	20000b50 	.word	0x20000b50
    19f4:	20000b5c 	.word	0x20000b5c
    19f8:	00009649 	.word	0x00009649
    19fc:	00009660 	.word	0x00009660
    1a00:	20000c34 	.word	0x20000c34

00001a04 <atomic_test_and_set_bit.constprop.0>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1a04:	f000 031f 	and.w	r3, r0, #31
    1a08:	2201      	movs	r2, #1
    1a0a:	409a      	lsls	r2, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1a0c:	4b0a      	ldr	r3, [pc, #40]	; (1a38 <atomic_test_and_set_bit.constprop.0+0x34>)
    1a0e:	f3bf 8f5b 	dmb	ish
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    1a12:	0940      	lsrs	r0, r0, #5
    1a14:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1a18:	e850 3f00 	ldrex	r3, [r0]
    1a1c:	ea43 0102 	orr.w	r1, r3, r2
    1a20:	e840 1c00 	strex	ip, r1, [r0]
    1a24:	f1bc 0f00 	cmp.w	ip, #0
    1a28:	d1f6      	bne.n	1a18 <atomic_test_and_set_bit.constprop.0+0x14>
    1a2a:	f3bf 8f5b 	dmb	ish

	return (old & mask) != 0;
    1a2e:	421a      	tst	r2, r3
}
    1a30:	bf14      	ite	ne
    1a32:	2001      	movne	r0, #1
    1a34:	2000      	moveq	r0, #0
    1a36:	4770      	bx	lr
    1a38:	20000b68 	.word	0x20000b68

00001a3c <pm_system_resume>:

void pm_system_resume(void)
{
    1a3c:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
    1a3e:	4b1d      	ldr	r3, [pc, #116]	; (1ab4 <pm_system_resume+0x78>)
    1a40:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1a42:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    1a46:	f005 031f 	and.w	r3, r5, #31
    1a4a:	2201      	movs	r2, #1
    1a4c:	409a      	lsls	r2, r3
    1a4e:	4b1a      	ldr	r3, [pc, #104]	; (1ab8 <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1a50:	0969      	lsrs	r1, r5, #5
{
    1a52:	b085      	sub	sp, #20
    1a54:	43d0      	mvns	r0, r2
    1a56:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1a5a:	e853 1f00 	ldrex	r1, [r3]
    1a5e:	ea01 0400 	and.w	r4, r1, r0
    1a62:	e843 4c00 	strex	ip, r4, [r3]
    1a66:	f1bc 0f00 	cmp.w	ip, #0
    1a6a:	d1f6      	bne.n	1a5a <pm_system_resume+0x1e>
    1a6c:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    1a70:	4211      	tst	r1, r2
    1a72:	d017      	beq.n	1aa4 <pm_system_resume+0x68>
		exit_pos_ops(z_power_states[id]);
    1a74:	4c11      	ldr	r4, [pc, #68]	; (1abc <pm_system_resume+0x80>)
    1a76:	220c      	movs	r2, #12
    1a78:	fb02 4205 	mla	r2, r2, r5, r4
    1a7c:	ca07      	ldmia	r2, {r0, r1, r2}
    1a7e:	ab01      	add	r3, sp, #4
    1a80:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    1a84:	4a0e      	ldr	r2, [pc, #56]	; (1ac0 <pm_system_resume+0x84>)
    1a86:	b17a      	cbz	r2, 1aa8 <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
    1a88:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1a8c:	f006 fd5c 	bl	8548 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    1a90:	2000      	movs	r0, #0
    1a92:	f7ff ff51 	bl	1938 <pm_state_notify>
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    1a96:	230c      	movs	r3, #12
    1a98:	436b      	muls	r3, r5
    1a9a:	2200      	movs	r2, #0
    1a9c:	18e1      	adds	r1, r4, r3
    1a9e:	50e2      	str	r2, [r4, r3]
    1aa0:	e9c1 2201 	strd	r2, r2, [r1, #4]
			0, 0};
	}
}
    1aa4:	b005      	add	sp, #20
    1aa6:	bd30      	pop	{r4, r5, pc}
    1aa8:	f382 8811 	msr	BASEPRI, r2
    1aac:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    1ab0:	e7ee      	b.n	1a90 <pm_system_resume+0x54>
    1ab2:	bf00      	nop
    1ab4:	20000c34 	.word	0x20000c34
    1ab8:	20000b58 	.word	0x20000b58
    1abc:	20000b5c 	.word	0x20000b5c
    1ac0:	00008549 	.word	0x00008549

00001ac4 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    1ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    1ac8:	4b37      	ldr	r3, [pc, #220]	; (1ba8 <pm_system_suspend+0xe4>)
    1aca:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 1bc0 <pm_system_suspend+0xfc>
    1ace:	7d1c      	ldrb	r4, [r3, #20]
{
    1ad0:	b088      	sub	sp, #32
    1ad2:	4607      	mov	r7, r0

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
    1ad4:	4620      	mov	r0, r4
    1ad6:	f7ff ff95 	bl	1a04 <atomic_test_and_set_bit.constprop.0>
    1ada:	b960      	cbnz	r0, 1af6 <pm_system_suspend+0x32>
		z_power_states[id] = pm_policy_next_state(id, ticks);
    1adc:	466e      	mov	r6, sp
    1ade:	463a      	mov	r2, r7
    1ae0:	4621      	mov	r1, r4
    1ae2:	4630      	mov	r0, r6
    1ae4:	f006 fcc8 	bl	8478 <pm_policy_next_state>
    1ae8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    1aec:	250c      	movs	r5, #12
    1aee:	fb05 8504 	mla	r5, r5, r4, r8
    1af2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
    1af6:	230c      	movs	r3, #12
    1af8:	4363      	muls	r3, r4
    1afa:	eb08 0203 	add.w	r2, r8, r3
    1afe:	f818 0003 	ldrb.w	r0, [r8, r3]
    1b02:	0965      	lsrs	r5, r4, #5
    1b04:	f004 061f 	and.w	r6, r4, #31
    1b08:	b3c8      	cbz	r0, 1b7e <pm_system_suspend+0xba>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    1b0a:	1c7b      	adds	r3, r7, #1
    1b0c:	d00f      	beq.n	1b2e <pm_system_suspend+0x6a>
			return (uint32_t)((t * to_hz + off) / from_hz);
    1b0e:	f8d2 e008 	ldr.w	lr, [r2, #8]
    1b12:	4826      	ldr	r0, [pc, #152]	; (1bac <pm_system_suspend+0xe8>)
    1b14:	4a26      	ldr	r2, [pc, #152]	; (1bb0 <pm_system_suspend+0xec>)
    1b16:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    1b1a:	2100      	movs	r1, #0
    1b1c:	2300      	movs	r3, #0
    1b1e:	fbec 010e 	umlal	r0, r1, ip, lr
    1b22:	f7fe faed 	bl	100 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    1b26:	2101      	movs	r1, #1
    1b28:	1a38      	subs	r0, r7, r0
    1b2a:	f005 fce5 	bl	74f8 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    1b2e:	f003 ffb3 	bl	5a98 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    1b32:	2001      	movs	r0, #1
    1b34:	f7ff ff00 	bl	1938 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1b38:	f3bf 8f5b 	dmb	ish
    1b3c:	4b1d      	ldr	r3, [pc, #116]	; (1bb4 <pm_system_suspend+0xf0>)
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1b3e:	2201      	movs	r2, #1
    1b40:	40b2      	lsls	r2, r6
    1b42:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    1b46:	e853 1f00 	ldrex	r1, [r3]
    1b4a:	4311      	orrs	r1, r2
    1b4c:	e843 1000 	strex	r0, r1, [r3]
    1b50:	2800      	cmp	r0, #0
    1b52:	d1f8      	bne.n	1b46 <pm_system_suspend+0x82>
    1b54:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
    1b58:	230c      	movs	r3, #12
    1b5a:	fb03 8404 	mla	r4, r3, r4, r8
    1b5e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    1b62:	ab05      	add	r3, sp, #20
    1b64:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    1b68:	4a13      	ldr	r2, [pc, #76]	; (1bb8 <pm_system_suspend+0xf4>)
    1b6a:	b11a      	cbz	r2, 1b74 <pm_system_suspend+0xb0>
		pm_power_state_set(info);
    1b6c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1b70:	f006 fcd7 	bl	8522 <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
    1b74:	f7ff ff62 	bl	1a3c <pm_system_resume>
	k_sched_unlock();
    1b78:	f004 fcd2 	bl	6520 <k_sched_unlock>
	bool ret = true;
    1b7c:	2001      	movs	r0, #1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1b7e:	4a0f      	ldr	r2, [pc, #60]	; (1bbc <pm_system_suspend+0xf8>)
    1b80:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    1b84:	2301      	movs	r3, #1
    1b86:	40b3      	lsls	r3, r6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1b88:	43db      	mvns	r3, r3
    1b8a:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    1b8e:	e855 2f00 	ldrex	r2, [r5]
    1b92:	401a      	ands	r2, r3
    1b94:	e845 2100 	strex	r1, r2, [r5]
    1b98:	2900      	cmp	r1, #0
    1b9a:	d1f8      	bne.n	1b8e <pm_system_suspend+0xca>
    1b9c:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
    1ba0:	b008      	add	sp, #32
    1ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1ba6:	bf00      	nop
    1ba8:	20000c34 	.word	0x20000c34
    1bac:	000f423f 	.word	0x000f423f
    1bb0:	000f4240 	.word	0x000f4240
    1bb4:	20000b58 	.word	0x20000b58
    1bb8:	00008523 	.word	0x00008523
    1bbc:	20000b68 	.word	0x20000b68
    1bc0:	20000b5c 	.word	0x20000b5c

00001bc4 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    1bc4:	680b      	ldr	r3, [r1, #0]
    1bc6:	3301      	adds	r3, #1
    1bc8:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    1bca:	4b01      	ldr	r3, [pc, #4]	; (1bd0 <char_out+0xc>)
    1bcc:	681b      	ldr	r3, [r3, #0]
    1bce:	4718      	bx	r3
    1bd0:	200000d0 	.word	0x200000d0

00001bd4 <__printk_hook_install>:
	_char_out = fn;
    1bd4:	4b01      	ldr	r3, [pc, #4]	; (1bdc <__printk_hook_install+0x8>)
    1bd6:	6018      	str	r0, [r3, #0]
}
    1bd8:	4770      	bx	lr
    1bda:	bf00      	nop
    1bdc:	200000d0 	.word	0x200000d0

00001be0 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    1be0:	b507      	push	{r0, r1, r2, lr}
    1be2:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    1be4:	2100      	movs	r1, #0
{
    1be6:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    1be8:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    1bea:	4803      	ldr	r0, [pc, #12]	; (1bf8 <vprintk+0x18>)
    1bec:	a901      	add	r1, sp, #4
    1bee:	f7fe ff25 	bl	a3c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    1bf2:	b003      	add	sp, #12
    1bf4:	f85d fb04 	ldr.w	pc, [sp], #4
    1bf8:	00001bc5 	.word	0x00001bc5

00001bfc <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    1bfc:	b508      	push	{r3, lr}
	__asm__ volatile(
    1bfe:	f04f 0220 	mov.w	r2, #32
    1c02:	f3ef 8311 	mrs	r3, BASEPRI
    1c06:	f382 8812 	msr	BASEPRI_MAX, r2
    1c0a:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    1c0e:	f000 fcbf 	bl	2590 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1c12:	4803      	ldr	r0, [pc, #12]	; (1c20 <sys_reboot+0x24>)
    1c14:	f006 fc23 	bl	845e <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1c18:	f000 f80a 	bl	1c30 <arch_cpu_idle>
    1c1c:	e7fc      	b.n	1c18 <sys_reboot+0x1c>
    1c1e:	bf00      	nop
    1c20:	000096a2 	.word	0x000096a2

00001c24 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1c24:	4901      	ldr	r1, [pc, #4]	; (1c2c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    1c26:	2210      	movs	r2, #16
	str	r2, [r1]
    1c28:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    1c2a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1c2c:	e000ed10 	.word	0xe000ed10

00001c30 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1c30:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1c32:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1c34:	f380 8811 	msr	BASEPRI, r0
	isb
    1c38:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1c3c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1c40:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1c42:	b662      	cpsie	i
	isb
    1c44:	f3bf 8f6f 	isb	sy

	bx	lr
    1c48:	4770      	bx	lr
    1c4a:	bf00      	nop

00001c4c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1c4c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1c4e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1c50:	f381 8811 	msr	BASEPRI, r1

	wfe
    1c54:	bf20      	wfe

	msr	BASEPRI, r0
    1c56:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    1c5a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1c5c:	4770      	bx	lr
    1c5e:	bf00      	nop

00001c60 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1c60:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    1c62:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1c64:	4a0b      	ldr	r2, [pc, #44]	; (1c94 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1c66:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    1c68:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1c6a:	bf1e      	ittt	ne
	movne	r1, #0
    1c6c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1c6e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    1c70:	f006 ff1c 	blne	8aac <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1c74:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1c76:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1c7a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1c7e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1c82:	4905      	ldr	r1, [pc, #20]	; (1c98 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1c84:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1c86:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1c88:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1c8a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1c8e:	4903      	ldr	r1, [pc, #12]	; (1c9c <_isr_wrapper+0x3c>)
	bx r1
    1c90:	4708      	bx	r1
    1c92:	0000      	.short	0x0000
	ldr r2, =_kernel
    1c94:	20000c34 	.word	0x20000c34
	ldr r1, =_sw_isr_table
    1c98:	00008d14 	.word	0x00008d14
	ldr r1, =z_arm_int_exit
    1c9c:	00001ec5 	.word	0x00001ec5

00001ca0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1ca0:	bf30      	wfi
    b z_SysNmiOnReset
    1ca2:	f7ff bffd 	b.w	1ca0 <z_SysNmiOnReset>
    1ca6:	bf00      	nop

00001ca8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1ca8:	4912      	ldr	r1, [pc, #72]	; (1cf4 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1caa:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1cac:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1cb0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1cb2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1cb6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1cba:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    1cbc:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1cc0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1cc4:	4f0c      	ldr	r7, [pc, #48]	; (1cf8 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1cc6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    1cca:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    1ccc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    1cce:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1cd0:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    1cd2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1cd4:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1cd6:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    1cda:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    1cdc:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    1cde:	f000 fae7 	bl	22b0 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    1ce2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1ce6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    1cea:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    1cee:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    1cf2:	4770      	bx	lr
    ldr r1, =_kernel
    1cf4:	20000c34 	.word	0x20000c34
    ldr v4, =_SCS_ICSR
    1cf8:	e000ed04 	.word	0xe000ed04

00001cfc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    1cfc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1d00:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1d02:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1d06:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1d0a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1d0c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1d10:	2902      	cmp	r1, #2
    beq _oops
    1d12:	d0ff      	beq.n	1d14 <_oops>

00001d14 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1d14:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    1d16:	f006 fbc0 	bl	849a <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    1d1a:	bd01      	pop	{r0, pc}

00001d1c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1d1c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1d1e:	2b00      	cmp	r3, #0
    1d20:	db08      	blt.n	1d34 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d22:	2201      	movs	r2, #1
    1d24:	f000 001f 	and.w	r0, r0, #31
    1d28:	fa02 f000 	lsl.w	r0, r2, r0
    1d2c:	095b      	lsrs	r3, r3, #5
    1d2e:	4a02      	ldr	r2, [pc, #8]	; (1d38 <arch_irq_enable+0x1c>)
    1d30:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    1d34:	4770      	bx	lr
    1d36:	bf00      	nop
    1d38:	e000e100 	.word	0xe000e100

00001d3c <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1d3c:	4b05      	ldr	r3, [pc, #20]	; (1d54 <arch_irq_is_enabled+0x18>)
    1d3e:	0942      	lsrs	r2, r0, #5
    1d40:	f000 001f 	and.w	r0, r0, #31
    1d44:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1d48:	2301      	movs	r3, #1
    1d4a:	fa03 f000 	lsl.w	r0, r3, r0
}
    1d4e:	4010      	ands	r0, r2
    1d50:	4770      	bx	lr
    1d52:	bf00      	nop
    1d54:	e000e100 	.word	0xe000e100

00001d58 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    1d58:	b570      	push	{r4, r5, r6, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    1d5a:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    1d5c:	2c07      	cmp	r4, #7
{
    1d5e:	4605      	mov	r5, r0
    1d60:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    1d62:	d90f      	bls.n	1d84 <z_arm_irq_priority_set+0x2c>
    1d64:	4a11      	ldr	r2, [pc, #68]	; (1dac <z_arm_irq_priority_set+0x54>)
    1d66:	4912      	ldr	r1, [pc, #72]	; (1db0 <z_arm_irq_priority_set+0x58>)
    1d68:	4812      	ldr	r0, [pc, #72]	; (1db4 <z_arm_irq_priority_set+0x5c>)
    1d6a:	2359      	movs	r3, #89	; 0x59
    1d6c:	f006 fb77 	bl	845e <printk>
    1d70:	4811      	ldr	r0, [pc, #68]	; (1db8 <z_arm_irq_priority_set+0x60>)
    1d72:	4631      	mov	r1, r6
    1d74:	2307      	movs	r3, #7
    1d76:	462a      	mov	r2, r5
    1d78:	f006 fb71 	bl	845e <printk>
    1d7c:	480b      	ldr	r0, [pc, #44]	; (1dac <z_arm_irq_priority_set+0x54>)
    1d7e:	2159      	movs	r1, #89	; 0x59
    1d80:	f006 fa96 	bl	82b0 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1d84:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1d86:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1d88:	bfac      	ite	ge
    1d8a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1d8e:	4b0b      	ldrlt	r3, [pc, #44]	; (1dbc <z_arm_irq_priority_set+0x64>)
    1d90:	ea4f 1444 	mov.w	r4, r4, lsl #5
    1d94:	bfb8      	it	lt
    1d96:	f005 050f 	andlt.w	r5, r5, #15
    1d9a:	b2e4      	uxtb	r4, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1d9c:	bfaa      	itet	ge
    1d9e:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1da2:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1da4:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
    1da8:	bd70      	pop	{r4, r5, r6, pc}
    1daa:	bf00      	nop
    1dac:	000096cb 	.word	0x000096cb
    1db0:	00009701 	.word	0x00009701
    1db4:	00009190 	.word	0x00009190
    1db8:	0000971c 	.word	0x0000971c
    1dbc:	e000ed14 	.word	0xe000ed14

00001dc0 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1dc0:	4a0b      	ldr	r2, [pc, #44]	; (1df0 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    1dc2:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1dc4:	4b0b      	ldr	r3, [pc, #44]	; (1df4 <z_arm_prep_c+0x34>)
    1dc6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1dca:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1dcc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1dd0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1dd4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1dd8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1ddc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1de0:	f003 f930 	bl	5044 <z_bss_zero>
	z_data_copy();
    1de4:	f006 f856 	bl	7e94 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1de8:	f000 f9f6 	bl	21d8 <z_arm_interrupt_init>
	z_cstart();
    1dec:	f003 f934 	bl	5058 <z_cstart>
    1df0:	00000000 	.word	0x00000000
    1df4:	e000ed00 	.word	0xe000ed00

00001df8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1df8:	4a09      	ldr	r2, [pc, #36]	; (1e20 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1dfa:	490a      	ldr	r1, [pc, #40]	; (1e24 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1dfc:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1dfe:	6809      	ldr	r1, [r1, #0]
    1e00:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1e02:	4909      	ldr	r1, [pc, #36]	; (1e28 <arch_swap+0x30>)
	_current->arch.basepri = key;
    1e04:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1e06:	684b      	ldr	r3, [r1, #4]
    1e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1e0c:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    1e0e:	2300      	movs	r3, #0
    1e10:	f383 8811 	msr	BASEPRI, r3
    1e14:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1e18:	6893      	ldr	r3, [r2, #8]
}
    1e1a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    1e1c:	4770      	bx	lr
    1e1e:	bf00      	nop
    1e20:	20000c34 	.word	0x20000c34
    1e24:	00009040 	.word	0x00009040
    1e28:	e000ed00 	.word	0xe000ed00

00001e2c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    1e2c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1e30:	9b00      	ldr	r3, [sp, #0]
    1e32:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    1e36:	490a      	ldr	r1, [pc, #40]	; (1e60 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    1e38:	9b01      	ldr	r3, [sp, #4]
    1e3a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    1e3e:	9b02      	ldr	r3, [sp, #8]
    1e40:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    1e44:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1e48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1e4c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    1e50:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    1e54:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    1e56:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    1e58:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1e5a:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1e5c:	4770      	bx	lr
    1e5e:	bf00      	nop
    1e60:	00008483 	.word	0x00008483

00001e64 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    1e64:	4a0b      	ldr	r2, [pc, #44]	; (1e94 <z_check_thread_stack_fail+0x30>)
{
    1e66:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    1e68:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    1e6a:	b190      	cbz	r0, 1e92 <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    1e6c:	f113 0f16 	cmn.w	r3, #22
    1e70:	6e80      	ldr	r0, [r0, #104]	; 0x68
    1e72:	d005      	beq.n	1e80 <z_check_thread_stack_fail+0x1c>
    1e74:	f1a0 0220 	sub.w	r2, r0, #32
    1e78:	429a      	cmp	r2, r3
    1e7a:	d806      	bhi.n	1e8a <z_check_thread_stack_fail+0x26>
    1e7c:	4283      	cmp	r3, r0
    1e7e:	d204      	bcs.n	1e8a <z_check_thread_stack_fail+0x26>
    1e80:	4281      	cmp	r1, r0
    1e82:	bf2c      	ite	cs
    1e84:	2100      	movcs	r1, #0
    1e86:	2101      	movcc	r1, #1
    1e88:	e000      	b.n	1e8c <z_check_thread_stack_fail+0x28>
    1e8a:	2100      	movs	r1, #0
    1e8c:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    1e8e:	bf08      	it	eq
    1e90:	2000      	moveq	r0, #0
}
    1e92:	4770      	bx	lr
    1e94:	20000c34 	.word	0x20000c34

00001e98 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    1e98:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1e9a:	4b09      	ldr	r3, [pc, #36]	; (1ec0 <arch_switch_to_main_thread+0x28>)
    1e9c:	6098      	str	r0, [r3, #8]
{
    1e9e:	460d      	mov	r5, r1
    1ea0:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    1ea2:	f000 fa05 	bl	22b0 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1ea6:	4620      	mov	r0, r4
    1ea8:	f385 8809 	msr	PSP, r5
    1eac:	2100      	movs	r1, #0
    1eae:	b663      	cpsie	if
    1eb0:	f381 8811 	msr	BASEPRI, r1
    1eb4:	f3bf 8f6f 	isb	sy
    1eb8:	2200      	movs	r2, #0
    1eba:	2300      	movs	r3, #0
    1ebc:	f006 fae1 	bl	8482 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1ec0:	20000c34 	.word	0x20000c34

00001ec4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1ec4:	4b04      	ldr	r3, [pc, #16]	; (1ed8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    1ec6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1ec8:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    1eca:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1ecc:	d003      	beq.n	1ed6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    1ece:	4903      	ldr	r1, [pc, #12]	; (1edc <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1ed0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1ed4:	600a      	str	r2, [r1, #0]

00001ed6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1ed6:	4770      	bx	lr
	ldr r3, =_kernel
    1ed8:	20000c34 	.word	0x20000c34
	ldr r1, =_SCS_ICSR
    1edc:	e000ed04 	.word	0xe000ed04

00001ee0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1ee0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1ee4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1ee8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    1eea:	4672      	mov	r2, lr
	bl z_arm_fault
    1eec:	f000 f8ae 	bl	204c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1ef0:	bd01      	pop	{r0, pc}
    1ef2:	bf00      	nop

00001ef4 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    1ef4:	2000      	movs	r0, #0
    msr CONTROL, r0
    1ef6:	f380 8814 	msr	CONTROL, r0
    isb
    1efa:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    1efe:	f006 fe77 	bl	8bf0 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    1f02:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    1f04:	490d      	ldr	r1, [pc, #52]	; (1f3c <__start+0x48>)
    str r0, [r1]
    1f06:	6008      	str	r0, [r1, #0]
    dsb
    1f08:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1f0c:	480c      	ldr	r0, [pc, #48]	; (1f40 <__start+0x4c>)
    msr msp, r0
    1f0e:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    1f12:	f000 f97d 	bl	2210 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1f16:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1f18:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1f1c:	4809      	ldr	r0, [pc, #36]	; (1f44 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1f1e:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    1f22:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1f24:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1f28:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1f2c:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1f2e:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1f30:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1f34:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1f38:	f7ff ff42 	bl	1dc0 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    1f3c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1f40:	20001ee0 	.word	0x20001ee0
    ldr r0, =z_interrupt_stacks
    1f44:	20002060 	.word	0x20002060

00001f48 <mem_manage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1f48:	4b23      	ldr	r3, [pc, #140]	; (1fd8 <mem_manage_fault+0x90>)
{
    1f4a:	b570      	push	{r4, r5, r6, lr}
    1f4c:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1f4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1f50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1f52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    1f54:	4604      	mov	r4, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1f56:	0790      	lsls	r0, r2, #30
    1f58:	d51a      	bpl.n	1f90 <mem_manage_fault+0x48>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    1f5a:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1f5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1f5e:	0612      	lsls	r2, r2, #24
    1f60:	d516      	bpl.n	1f90 <mem_manage_fault+0x48>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    1f62:	b119      	cbz	r1, 1f6c <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1f64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1f66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    1f6a:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1f6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1f6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1f70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1f72:	06d6      	lsls	r6, r2, #27
    1f74:	d40f      	bmi.n	1f96 <mem_manage_fault+0x4e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1f78:	0799      	lsls	r1, r3, #30
    1f7a:	d40c      	bmi.n	1f96 <mem_manage_fault+0x4e>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1f7c:	2400      	movs	r4, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1f7e:	4a16      	ldr	r2, [pc, #88]	; (1fd8 <mem_manage_fault+0x90>)
    1f80:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1f82:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1f86:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    1f88:	2300      	movs	r3, #0
    1f8a:	702b      	strb	r3, [r5, #0]

	return reason;
}
    1f8c:	4620      	mov	r0, r4
    1f8e:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    1f90:	f06f 0015 	mvn.w	r0, #21
    1f94:	e7ea      	b.n	1f6c <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    1f96:	4e10      	ldr	r6, [pc, #64]	; (1fd8 <mem_manage_fault+0x90>)
    1f98:	6873      	ldr	r3, [r6, #4]
    1f9a:	051a      	lsls	r2, r3, #20
    1f9c:	d5ee      	bpl.n	1f7c <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    1f9e:	4621      	mov	r1, r4
    1fa0:	f7ff ff60 	bl	1e64 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    1fa4:	4604      	mov	r4, r0
    1fa6:	b118      	cbz	r0, 1fb0 <mem_manage_fault+0x68>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    1fa8:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    1fac:	2402      	movs	r4, #2
    1fae:	e7e6      	b.n	1f7e <mem_manage_fault+0x36>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    1fb0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1fb2:	06db      	lsls	r3, r3, #27
    1fb4:	d5e2      	bpl.n	1f7c <mem_manage_fault+0x34>
    1fb6:	4a09      	ldr	r2, [pc, #36]	; (1fdc <mem_manage_fault+0x94>)
    1fb8:	4909      	ldr	r1, [pc, #36]	; (1fe0 <mem_manage_fault+0x98>)
    1fba:	480a      	ldr	r0, [pc, #40]	; (1fe4 <mem_manage_fault+0x9c>)
    1fbc:	f240 1349 	movw	r3, #329	; 0x149
    1fc0:	f006 fa4d 	bl	845e <printk>
    1fc4:	4808      	ldr	r0, [pc, #32]	; (1fe8 <mem_manage_fault+0xa0>)
    1fc6:	f006 fa4a 	bl	845e <printk>
    1fca:	4804      	ldr	r0, [pc, #16]	; (1fdc <mem_manage_fault+0x94>)
    1fcc:	f240 1149 	movw	r1, #329	; 0x149
    1fd0:	f006 f96e 	bl	82b0 <assert_post_action>
    1fd4:	e7d3      	b.n	1f7e <mem_manage_fault+0x36>
    1fd6:	bf00      	nop
    1fd8:	e000ed00 	.word	0xe000ed00
    1fdc:	0000975c 	.word	0x0000975c
    1fe0:	00009796 	.word	0x00009796
    1fe4:	00009190 	.word	0x00009190
    1fe8:	000097e0 	.word	0x000097e0

00001fec <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1fec:	4b0d      	ldr	r3, [pc, #52]	; (2024 <bus_fault.isra.0+0x38>)
    1fee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1ff0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1ff2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1ff4:	0592      	lsls	r2, r2, #22
    1ff6:	d508      	bpl.n	200a <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1ffa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1ffc:	0412      	lsls	r2, r2, #16
    1ffe:	d504      	bpl.n	200a <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    2000:	b118      	cbz	r0, 200a <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    2002:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2004:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    2008:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    200a:	4b06      	ldr	r3, [pc, #24]	; (2024 <bus_fault.isra.0+0x38>)
    200c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    200e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2010:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    2012:	bf58      	it	pl
    2014:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2016:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    2018:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    201a:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    201e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2020:	7008      	strb	r0, [r1, #0]

	return reason;
}
    2022:	4770      	bx	lr
    2024:	e000ed00 	.word	0xe000ed00

00002028 <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2028:	4b07      	ldr	r3, [pc, #28]	; (2048 <usage_fault.isra.0+0x20>)
    202a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    202c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    202e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2030:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2032:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2034:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2036:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2038:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    203c:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    2040:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    2042:	2000      	movs	r0, #0
    2044:	4770      	bx	lr
    2046:	bf00      	nop
    2048:	e000ed00 	.word	0xe000ed00

0000204c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    204c:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    204e:	4b54      	ldr	r3, [pc, #336]	; (21a0 <z_arm_fault+0x154>)
    2050:	685c      	ldr	r4, [r3, #4]
{
    2052:	b08a      	sub	sp, #40	; 0x28
    2054:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2056:	f3c4 0408 	ubfx	r4, r4, #0, #9
    205a:	2600      	movs	r6, #0
    205c:	f386 8811 	msr	BASEPRI, r6
    2060:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    2064:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    2068:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    206c:	d108      	bne.n	2080 <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    206e:	f002 030c 	and.w	r3, r2, #12
    2072:	2b08      	cmp	r3, #8
    2074:	d004      	beq.n	2080 <z_arm_fault+0x34>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    2076:	0712      	lsls	r2, r2, #28
			ptr_esf = (z_arch_esf_t *)msp;
    2078:	bf5c      	itt	pl
    207a:	4605      	movpl	r5, r0
			*nested_exc = true;
    207c:	2601      	movpl	r6, #1

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    207e:	b97d      	cbnz	r5, 20a0 <z_arm_fault+0x54>
    2080:	4a48      	ldr	r2, [pc, #288]	; (21a4 <z_arm_fault+0x158>)
    2082:	4949      	ldr	r1, [pc, #292]	; (21a8 <z_arm_fault+0x15c>)
    2084:	4849      	ldr	r0, [pc, #292]	; (21ac <z_arm_fault+0x160>)
    2086:	f240 33f2 	movw	r3, #1010	; 0x3f2
    208a:	f006 f9e8 	bl	845e <printk>
    208e:	4848      	ldr	r0, [pc, #288]	; (21b0 <z_arm_fault+0x164>)
    2090:	f006 f9e5 	bl	845e <printk>
    2094:	4843      	ldr	r0, [pc, #268]	; (21a4 <z_arm_fault+0x158>)
    2096:	f240 31f2 	movw	r1, #1010	; 0x3f2
    209a:	f006 f909 	bl	82b0 <assert_post_action>
    209e:	2500      	movs	r5, #0
	*recoverable = false;
    20a0:	2300      	movs	r3, #0
    20a2:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    20a6:	1ee3      	subs	r3, r4, #3
    20a8:	2b03      	cmp	r3, #3
    20aa:	d872      	bhi.n	2192 <z_arm_fault+0x146>
    20ac:	e8df f003 	tbb	[pc, r3]
    20b0:	496d6902 	.word	0x496d6902
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    20b4:	4b3a      	ldr	r3, [pc, #232]	; (21a0 <z_arm_fault+0x154>)
    20b6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    20b8:	f014 0402 	ands.w	r4, r4, #2
    20bc:	d169      	bne.n	2192 <z_arm_fault+0x146>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    20be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    20c0:	2a00      	cmp	r2, #0
    20c2:	db18      	blt.n	20f6 <z_arm_fault+0xaa>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    20c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    20c6:	005b      	lsls	r3, r3, #1
    20c8:	d54e      	bpl.n	2168 <z_arm_fault+0x11c>
	uint16_t fault_insn = *(ret_addr - 1);
    20ca:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    20cc:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    20d0:	f64d 7302 	movw	r3, #57090	; 0xdf02
    20d4:	429a      	cmp	r2, r3
    20d6:	d00d      	beq.n	20f4 <z_arm_fault+0xa8>
		} else if (SCB_MMFSR != 0) {
    20d8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    20dc:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    20e0:	781b      	ldrb	r3, [r3, #0]
    20e2:	b30b      	cbz	r3, 2128 <z_arm_fault+0xdc>
			reason = mem_manage_fault(esf, 1, recoverable);
    20e4:	f10d 0207 	add.w	r2, sp, #7
    20e8:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    20ea:	4628      	mov	r0, r5
    20ec:	f7ff ff2c 	bl	1f48 <mem_manage_fault>
		reason = usage_fault(esf);
    20f0:	4604      	mov	r4, r0
		break;
    20f2:	e000      	b.n	20f6 <z_arm_fault+0xaa>
			reason = esf->basic.r0;
    20f4:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    20f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    20fa:	b99b      	cbnz	r3, 2124 <z_arm_fault+0xd8>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    20fc:	2220      	movs	r2, #32
    20fe:	4629      	mov	r1, r5
    2100:	a802      	add	r0, sp, #8
    2102:	f006 f9fa 	bl	84fa <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    2106:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2108:	2e00      	cmp	r6, #0
    210a:	d044      	beq.n	2196 <z_arm_fault+0x14a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    210c:	f3c3 0208 	ubfx	r2, r3, #0, #9
    2110:	b922      	cbnz	r2, 211c <z_arm_fault+0xd0>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    2112:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2116:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    211a:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    211c:	a902      	add	r1, sp, #8
    211e:	4620      	mov	r0, r4
    2120:	f006 f9b9 	bl	8496 <z_arm_fatal_error>
}
    2124:	b00a      	add	sp, #40	; 0x28
    2126:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    2128:	4b22      	ldr	r3, [pc, #136]	; (21b4 <z_arm_fault+0x168>)
    212a:	781b      	ldrb	r3, [r3, #0]
    212c:	b12b      	cbz	r3, 213a <z_arm_fault+0xee>
			reason = bus_fault(esf, 1, recoverable);
    212e:	f10d 0107 	add.w	r1, sp, #7
    2132:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    2134:	f7ff ff5a 	bl	1fec <bus_fault.isra.0>
    2138:	e7da      	b.n	20f0 <z_arm_fault+0xa4>
		} else if (SCB_UFSR != 0) {
    213a:	4b1f      	ldr	r3, [pc, #124]	; (21b8 <z_arm_fault+0x16c>)
    213c:	881b      	ldrh	r3, [r3, #0]
    213e:	b29b      	uxth	r3, r3
    2140:	b113      	cbz	r3, 2148 <z_arm_fault+0xfc>
		reason = usage_fault(esf);
    2142:	f7ff ff71 	bl	2028 <usage_fault.isra.0>
    2146:	e7d3      	b.n	20f0 <z_arm_fault+0xa4>
			__ASSERT(0,
    2148:	491c      	ldr	r1, [pc, #112]	; (21bc <z_arm_fault+0x170>)
    214a:	4a16      	ldr	r2, [pc, #88]	; (21a4 <z_arm_fault+0x158>)
    214c:	4817      	ldr	r0, [pc, #92]	; (21ac <z_arm_fault+0x160>)
    214e:	f240 23c3 	movw	r3, #707	; 0x2c3
    2152:	f006 f984 	bl	845e <printk>
    2156:	481a      	ldr	r0, [pc, #104]	; (21c0 <z_arm_fault+0x174>)
    2158:	f006 f981 	bl	845e <printk>
    215c:	f240 21c3 	movw	r1, #707	; 0x2c3
		__ASSERT(0,
    2160:	4810      	ldr	r0, [pc, #64]	; (21a4 <z_arm_fault+0x158>)
    2162:	f006 f8a5 	bl	82b0 <assert_post_action>
    2166:	e7c6      	b.n	20f6 <z_arm_fault+0xaa>
    2168:	4914      	ldr	r1, [pc, #80]	; (21bc <z_arm_fault+0x170>)
    216a:	4a0e      	ldr	r2, [pc, #56]	; (21a4 <z_arm_fault+0x158>)
    216c:	480f      	ldr	r0, [pc, #60]	; (21ac <z_arm_fault+0x160>)
    216e:	f240 23c7 	movw	r3, #711	; 0x2c7
    2172:	f006 f974 	bl	845e <printk>
    2176:	4813      	ldr	r0, [pc, #76]	; (21c4 <z_arm_fault+0x178>)
    2178:	f006 f971 	bl	845e <printk>
    217c:	f240 21c7 	movw	r1, #711	; 0x2c7
    2180:	e7ee      	b.n	2160 <z_arm_fault+0x114>
		reason = mem_manage_fault(esf, 0, recoverable);
    2182:	f10d 0207 	add.w	r2, sp, #7
    2186:	2100      	movs	r1, #0
    2188:	e7af      	b.n	20ea <z_arm_fault+0x9e>
		reason = bus_fault(esf, 0, recoverable);
    218a:	f10d 0107 	add.w	r1, sp, #7
    218e:	2000      	movs	r0, #0
    2190:	e7d0      	b.n	2134 <z_arm_fault+0xe8>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2192:	2400      	movs	r4, #0
    2194:	e7af      	b.n	20f6 <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2196:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    219a:	f023 0301 	bic.w	r3, r3, #1
    219e:	e7bc      	b.n	211a <z_arm_fault+0xce>
    21a0:	e000ed00 	.word	0xe000ed00
    21a4:	0000975c 	.word	0x0000975c
    21a8:	00009803 	.word	0x00009803
    21ac:	00009190 	.word	0x00009190
    21b0:	00009816 	.word	0x00009816
    21b4:	e000ed29 	.word	0xe000ed29
    21b8:	e000ed2a 	.word	0xe000ed2a
    21bc:	00009cef 	.word	0x00009cef
    21c0:	00009854 	.word	0x00009854
    21c4:	00009878 	.word	0x00009878

000021c8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    21c8:	4a02      	ldr	r2, [pc, #8]	; (21d4 <z_arm_fault_init+0xc>)
    21ca:	6953      	ldr	r3, [r2, #20]
    21cc:	f043 0310 	orr.w	r3, r3, #16
    21d0:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    21d2:	4770      	bx	lr
    21d4:	e000ed00 	.word	0xe000ed00

000021d8 <z_arm_interrupt_init>:
    21d8:	4804      	ldr	r0, [pc, #16]	; (21ec <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    21da:	2300      	movs	r3, #0
    21dc:	2120      	movs	r1, #32
    21de:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    21e0:	3301      	adds	r3, #1
    21e2:	2b30      	cmp	r3, #48	; 0x30
    21e4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    21e8:	d1f9      	bne.n	21de <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    21ea:	4770      	bx	lr
    21ec:	e000e100 	.word	0xe000e100

000021f0 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    21f0:	4a06      	ldr	r2, [pc, #24]	; (220c <z_arm_clear_arm_mpu_config+0x1c>)
    21f2:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
    21f4:	2300      	movs	r3, #0
	int num_regions =
    21f6:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    21fa:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    21fc:	428b      	cmp	r3, r1
    21fe:	d100      	bne.n	2202 <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
    2200:	4770      	bx	lr
  MPU->RNR = rnr;
    2202:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    2204:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
    2206:	3301      	adds	r3, #1
    2208:	e7f8      	b.n	21fc <z_arm_clear_arm_mpu_config+0xc>
    220a:	bf00      	nop
    220c:	e000ed90 	.word	0xe000ed90

00002210 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    2210:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    2212:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    2214:	2300      	movs	r3, #0
    2216:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    221a:	f7ff ffe9 	bl	21f0 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    221e:	4b14      	ldr	r3, [pc, #80]	; (2270 <z_arm_init_arch_hw_at_boot+0x60>)
    2220:	f04f 32ff 	mov.w	r2, #4294967295
    2224:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    2228:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    222c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    2230:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    2234:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    2238:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    223c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    2240:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    2244:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    2248:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    224c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    2250:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    2254:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    2258:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    225c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    2260:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    2264:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    2266:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    226a:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    226e:	bd08      	pop	{r3, pc}
    2270:	e000e100 	.word	0xe000e100

00002274 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    2274:	4b06      	ldr	r3, [pc, #24]	; (2290 <z_impl_k_thread_abort+0x1c>)
    2276:	689b      	ldr	r3, [r3, #8]
    2278:	4283      	cmp	r3, r0
    227a:	d107      	bne.n	228c <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    227c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    2280:	b123      	cbz	r3, 228c <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2282:	4a04      	ldr	r2, [pc, #16]	; (2294 <z_impl_k_thread_abort+0x20>)
    2284:	6853      	ldr	r3, [r2, #4]
    2286:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    228a:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    228c:	f004 bc0c 	b.w	6aa8 <z_thread_abort>
    2290:	20000c34 	.word	0x20000c34
    2294:	e000ed00 	.word	0xe000ed00

00002298 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2298:	4b02      	ldr	r3, [pc, #8]	; (22a4 <z_arm_configure_static_mpu_regions+0xc>)
    229a:	4a03      	ldr	r2, [pc, #12]	; (22a8 <z_arm_configure_static_mpu_regions+0x10>)
    229c:	4803      	ldr	r0, [pc, #12]	; (22ac <z_arm_configure_static_mpu_regions+0x14>)
    229e:	2101      	movs	r1, #1
    22a0:	f000 b868 	b.w	2374 <arm_core_mpu_configure_static_mpu_regions>
    22a4:	20040000 	.word	0x20040000
    22a8:	20000000 	.word	0x20000000
    22ac:	00008ef4 	.word	0x00008ef4

000022b0 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    22b0:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    22b2:	4b05      	ldr	r3, [pc, #20]	; (22c8 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    22b4:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    22b6:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    22b8:	4a04      	ldr	r2, [pc, #16]	; (22cc <z_arm_configure_dynamic_mpu_regions+0x1c>)
    22ba:	2120      	movs	r1, #32
    22bc:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    22c0:	4618      	mov	r0, r3
    22c2:	2101      	movs	r1, #1
    22c4:	f000 b87e 	b.w	23c4 <arm_core_mpu_configure_dynamic_mpu_regions>
    22c8:	20000b6c 	.word	0x20000b6c
    22cc:	150b0000 	.word	0x150b0000

000022d0 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    22d0:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    22d2:	4f1e      	ldr	r7, [pc, #120]	; (234c <mpu_configure_regions+0x7c>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    22d4:	2600      	movs	r6, #0
    22d6:	428e      	cmp	r6, r1
    22d8:	db01      	blt.n	22de <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    22da:	4610      	mov	r0, r2
    22dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    22de:	6844      	ldr	r4, [r0, #4]
    22e0:	b384      	cbz	r4, 2344 <mpu_configure_regions+0x74>
		if (do_sanity_check &&
    22e2:	b153      	cbz	r3, 22fa <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    22e4:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    22e8:	ea14 0f0c 	tst.w	r4, ip
    22ec:	d118      	bne.n	2320 <mpu_configure_regions+0x50>
		&&
    22ee:	2c1f      	cmp	r4, #31
    22f0:	d916      	bls.n	2320 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    22f2:	6805      	ldr	r5, [r0, #0]
		&&
    22f4:	ea1c 0f05 	tst.w	ip, r5
    22f8:	d112      	bne.n	2320 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    22fa:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    22fc:	6805      	ldr	r5, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    22fe:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    2302:	b2d2      	uxtb	r2, r2
    2304:	d90f      	bls.n	2326 <mpu_configure_regions+0x56>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    2306:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    230a:	d80e      	bhi.n	232a <mpu_configure_regions+0x5a>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    230c:	3c01      	subs	r4, #1
    230e:	fab4 f484 	clz	r4, r4
    2312:	f1c4 041f 	rsb	r4, r4, #31
    2316:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    2318:	2a07      	cmp	r2, #7
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    231a:	ea4c 0404 	orr.w	r4, ip, r4
    231e:	d906      	bls.n	232e <mpu_configure_regions+0x5e>
			return -EINVAL;
    2320:	f06f 0215 	mvn.w	r2, #21
    2324:	e7d9      	b.n	22da <mpu_configure_regions+0xa>
		return REGION_32B;
    2326:	2408      	movs	r4, #8
    2328:	e7f6      	b.n	2318 <mpu_configure_regions+0x48>
		return REGION_4G;
    232a:	243e      	movs	r4, #62	; 0x3e
    232c:	e7f4      	b.n	2318 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    232e:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    2332:	4315      	orrs	r5, r2
    2334:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2338:	f044 0401 	orr.w	r4, r4, #1
    233c:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    233e:	60fd      	str	r5, [r7, #12]
		reg_index++;
    2340:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2342:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
    2344:	3601      	adds	r6, #1
    2346:	300c      	adds	r0, #12
    2348:	e7c5      	b.n	22d6 <mpu_configure_regions+0x6>
    234a:	bf00      	nop
    234c:	e000ed90 	.word	0xe000ed90

00002350 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    2350:	4b03      	ldr	r3, [pc, #12]	; (2360 <arm_core_mpu_enable+0x10>)
    2352:	2205      	movs	r2, #5
    2354:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    2356:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    235a:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    235e:	4770      	bx	lr
    2360:	e000ed90 	.word	0xe000ed90

00002364 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    2364:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2368:	4b01      	ldr	r3, [pc, #4]	; (2370 <arm_core_mpu_disable+0xc>)
    236a:	2200      	movs	r2, #0
    236c:	605a      	str	r2, [r3, #4]
}
    236e:	4770      	bx	lr
    2370:	e000ed90 	.word	0xe000ed90

00002374 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    2374:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    2376:	4d0e      	ldr	r5, [pc, #56]	; (23b0 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    2378:	2301      	movs	r3, #1
    237a:	782a      	ldrb	r2, [r5, #0]
    237c:	460c      	mov	r4, r1
    237e:	f7ff ffa7 	bl	22d0 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    2382:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    2384:	3016      	adds	r0, #22
    2386:	d111      	bne.n	23ac <arm_core_mpu_configure_static_mpu_regions+0x38>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    2388:	f240 1311 	movw	r3, #273	; 0x111
    238c:	4a09      	ldr	r2, [pc, #36]	; (23b4 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    238e:	490a      	ldr	r1, [pc, #40]	; (23b8 <arm_core_mpu_configure_static_mpu_regions+0x44>)
    2390:	480a      	ldr	r0, [pc, #40]	; (23bc <arm_core_mpu_configure_static_mpu_regions+0x48>)
    2392:	f006 f864 	bl	845e <printk>
    2396:	4621      	mov	r1, r4
    2398:	4809      	ldr	r0, [pc, #36]	; (23c0 <arm_core_mpu_configure_static_mpu_regions+0x4c>)
    239a:	f006 f860 	bl	845e <printk>
			regions_num);
	}
}
    239e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    23a2:	4804      	ldr	r0, [pc, #16]	; (23b4 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    23a4:	f240 1111 	movw	r1, #273	; 0x111
    23a8:	f005 bf82 	b.w	82b0 <assert_post_action>
}
    23ac:	bd38      	pop	{r3, r4, r5, pc}
    23ae:	bf00      	nop
    23b0:	20000ca8 	.word	0x20000ca8
    23b4:	000098a8 	.word	0x000098a8
    23b8:	00009cef 	.word	0x00009cef
    23bc:	00009190 	.word	0x00009190
    23c0:	000098df 	.word	0x000098df

000023c4 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    23c4:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    23c6:	4a12      	ldr	r2, [pc, #72]	; (2410 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
    23c8:	2300      	movs	r3, #0
    23ca:	7812      	ldrb	r2, [r2, #0]
    23cc:	460c      	mov	r4, r1
    23ce:	f7ff ff7f 	bl	22d0 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    23d2:	f110 0f16 	cmn.w	r0, #22
    23d6:	d008      	beq.n	23ea <arm_core_mpu_configure_dynamic_mpu_regions+0x26>
  MPU->RNR = rnr;
    23d8:	4b0e      	ldr	r3, [pc, #56]	; (2414 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
  MPU->RASR = 0U;
    23da:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    23dc:	2807      	cmp	r0, #7
    23de:	dd00      	ble.n	23e2 <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    23e0:	bd10      	pop	{r4, pc}
  MPU->RNR = rnr;
    23e2:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    23e4:	611a      	str	r2, [r3, #16]
    23e6:	3001      	adds	r0, #1
    23e8:	e7f8      	b.n	23dc <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    23ea:	4a0b      	ldr	r2, [pc, #44]	; (2418 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
    23ec:	490b      	ldr	r1, [pc, #44]	; (241c <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    23ee:	480c      	ldr	r0, [pc, #48]	; (2420 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
    23f0:	f44f 7398 	mov.w	r3, #304	; 0x130
    23f4:	f006 f833 	bl	845e <printk>
    23f8:	4621      	mov	r1, r4
    23fa:	480a      	ldr	r0, [pc, #40]	; (2424 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
    23fc:	f006 f82f 	bl	845e <printk>
}
    2400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    2404:	4804      	ldr	r0, [pc, #16]	; (2418 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
    2406:	f44f 7198 	mov.w	r1, #304	; 0x130
    240a:	f005 bf51 	b.w	82b0 <assert_post_action>
    240e:	bf00      	nop
    2410:	20000ca8 	.word	0x20000ca8
    2414:	e000ed90 	.word	0xe000ed90
    2418:	000098a8 	.word	0x000098a8
    241c:	00009cef 	.word	0x00009cef
    2420:	00009190 	.word	0x00009190
    2424:	0000990b 	.word	0x0000990b

00002428 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    2428:	4925      	ldr	r1, [pc, #148]	; (24c0 <z_arm_mpu_init+0x98>)
{
    242a:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    242c:	680c      	ldr	r4, [r1, #0]
    242e:	2c08      	cmp	r4, #8
    2430:	d913      	bls.n	245a <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    2432:	f44f 73a4 	mov.w	r3, #328	; 0x148
    2436:	4a23      	ldr	r2, [pc, #140]	; (24c4 <z_arm_mpu_init+0x9c>)
    2438:	4923      	ldr	r1, [pc, #140]	; (24c8 <z_arm_mpu_init+0xa0>)
    243a:	4824      	ldr	r0, [pc, #144]	; (24cc <z_arm_mpu_init+0xa4>)
    243c:	f006 f80f 	bl	845e <printk>
    2440:	4823      	ldr	r0, [pc, #140]	; (24d0 <z_arm_mpu_init+0xa8>)
    2442:	2208      	movs	r2, #8
    2444:	4621      	mov	r1, r4
    2446:	f006 f80a 	bl	845e <printk>
    244a:	481e      	ldr	r0, [pc, #120]	; (24c4 <z_arm_mpu_init+0x9c>)
    244c:	f44f 71a4 	mov.w	r1, #328	; 0x148
    2450:	f005 ff2e 	bl	82b0 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    2454:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    2458:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
    245a:	f7ff ff83 	bl	2364 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    245e:	6848      	ldr	r0, [r1, #4]
    2460:	491c      	ldr	r1, [pc, #112]	; (24d4 <z_arm_mpu_init+0xac>)
    2462:	2200      	movs	r2, #0
    2464:	4294      	cmp	r4, r2
    2466:	f100 000c 	add.w	r0, r0, #12
    246a:	d119      	bne.n	24a0 <z_arm_mpu_init+0x78>
	static_regions_num = mpu_config.num_regions;
    246c:	4b1a      	ldr	r3, [pc, #104]	; (24d8 <z_arm_mpu_init+0xb0>)
    246e:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    2470:	f7ff ff6e 	bl	2350 <arm_core_mpu_enable>
	__ASSERT(
    2474:	680b      	ldr	r3, [r1, #0]
    2476:	f3c3 2307 	ubfx	r3, r3, #8, #8
    247a:	2b08      	cmp	r3, #8
    247c:	d00e      	beq.n	249c <z_arm_mpu_init+0x74>
    247e:	4917      	ldr	r1, [pc, #92]	; (24dc <z_arm_mpu_init+0xb4>)
    2480:	4a10      	ldr	r2, [pc, #64]	; (24c4 <z_arm_mpu_init+0x9c>)
    2482:	4812      	ldr	r0, [pc, #72]	; (24cc <z_arm_mpu_init+0xa4>)
    2484:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    2488:	f005 ffe9 	bl	845e <printk>
    248c:	4814      	ldr	r0, [pc, #80]	; (24e0 <z_arm_mpu_init+0xb8>)
    248e:	f005 ffe6 	bl	845e <printk>
    2492:	480c      	ldr	r0, [pc, #48]	; (24c4 <z_arm_mpu_init+0x9c>)
    2494:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    2498:	f005 ff0a 	bl	82b0 <assert_post_action>
	return 0;
    249c:	2000      	movs	r0, #0
    249e:	e7db      	b.n	2458 <z_arm_mpu_init+0x30>
    24a0:	608a      	str	r2, [r1, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    24a2:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    24a6:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    24aa:	4313      	orrs	r3, r2
    24ac:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    24b0:	60cb      	str	r3, [r1, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    24b2:	f850 3c04 	ldr.w	r3, [r0, #-4]
    24b6:	f043 0301 	orr.w	r3, r3, #1
    24ba:	610b      	str	r3, [r1, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    24bc:	3201      	adds	r2, #1
    24be:	e7d1      	b.n	2464 <z_arm_mpu_init+0x3c>
    24c0:	00008f00 	.word	0x00008f00
    24c4:	000098a8 	.word	0x000098a8
    24c8:	00009cef 	.word	0x00009cef
    24cc:	00009190 	.word	0x00009190
    24d0:	00009938 	.word	0x00009938
    24d4:	e000ed90 	.word	0xe000ed90
    24d8:	20000ca8 	.word	0x20000ca8
    24dc:	0000996c 	.word	0x0000996c
    24e0:	000099bc 	.word	0x000099bc

000024e4 <printf>:

	return r;
}

int printf(const char *ZRESTRICT format, ...)
{
    24e4:	b40f      	push	{r0, r1, r2, r3}
    24e6:	b507      	push	{r0, r1, r2, lr}
    24e8:	ab04      	add	r3, sp, #16
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    24ea:	2102      	movs	r1, #2
{
    24ec:	f853 2b04 	ldr.w	r2, [r3], #4
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    24f0:	4804      	ldr	r0, [pc, #16]	; (2504 <printf+0x20>)
	va_start(vargs, format);
    24f2:	9301      	str	r3, [sp, #4]
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    24f4:	f7fe faa2 	bl	a3c <cbvprintf>
	va_end(vargs);

	return r;
}
    24f8:	b003      	add	sp, #12
    24fa:	f85d eb04 	ldr.w	lr, [sp], #4
    24fe:	b004      	add	sp, #16
    2500:	4770      	bx	lr
    2502:	bf00      	nop
    2504:	000084bf 	.word	0x000084bf

00002508 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    2508:	4b01      	ldr	r3, [pc, #4]	; (2510 <__stdout_hook_install+0x8>)
    250a:	6018      	str	r0, [r3, #0]
}
    250c:	4770      	bx	lr
    250e:	bf00      	nop
    2510:	200000d4 	.word	0x200000d4

00002514 <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    2514:	3902      	subs	r1, #2
    2516:	2901      	cmp	r1, #1
    2518:	d802      	bhi.n	2520 <z_impl_zephyr_fputc+0xc>
    251a:	4b03      	ldr	r3, [pc, #12]	; (2528 <z_impl_zephyr_fputc+0x14>)
    251c:	681b      	ldr	r3, [r3, #0]
    251e:	4718      	bx	r3
}
    2520:	f04f 30ff 	mov.w	r0, #4294967295
    2524:	4770      	bx	lr
    2526:	bf00      	nop
    2528:	200000d4 	.word	0x200000d4

0000252c <nordicsemi_nrf52_init>:
	__asm__ volatile(
    252c:	f04f 0320 	mov.w	r3, #32
    2530:	f3ef 8111 	mrs	r1, BASEPRI
    2534:	f383 8812 	msr	BASEPRI_MAX, r3
    2538:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    253c:	4a0f      	ldr	r2, [pc, #60]	; (257c <nordicsemi_nrf52_init+0x50>)
    253e:	2301      	movs	r3, #1
    2540:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    2544:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2548:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    254c:	4a0c      	ldr	r2, [pc, #48]	; (2580 <nordicsemi_nrf52_init+0x54>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    254e:	6812      	ldr	r2, [r2, #0]
    2550:	2a08      	cmp	r2, #8
    2552:	d108      	bne.n	2566 <nordicsemi_nrf52_init+0x3a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    2554:	4a0b      	ldr	r2, [pc, #44]	; (2584 <nordicsemi_nrf52_init+0x58>)
    2556:	6812      	ldr	r2, [r2, #0]
            {
                switch(var2)
    2558:	2a05      	cmp	r2, #5
    255a:	d804      	bhi.n	2566 <nordicsemi_nrf52_init+0x3a>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    255c:	480a      	ldr	r0, [pc, #40]	; (2588 <nordicsemi_nrf52_init+0x5c>)
    255e:	5c82      	ldrb	r2, [r0, r2]
    2560:	b10a      	cbz	r2, 2566 <nordicsemi_nrf52_init+0x3a>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    2562:	4a0a      	ldr	r2, [pc, #40]	; (258c <nordicsemi_nrf52_init+0x60>)
    2564:	6013      	str	r3, [r2, #0]
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    2566:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    256a:	2201      	movs	r2, #1
    256c:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    2570:	f381 8811 	msr	BASEPRI, r1
    2574:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    2578:	2000      	movs	r0, #0
    257a:	4770      	bx	lr
    257c:	4001e000 	.word	0x4001e000
    2580:	10000130 	.word	0x10000130
    2584:	10000134 	.word	0x10000134
    2588:	000099ec 	.word	0x000099ec
    258c:	40000638 	.word	0x40000638

00002590 <sys_arch_reboot>:
    *p_gpregret = val;
    2590:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2594:	b2c0      	uxtb	r0, r0
    2596:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    259a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    259e:	4905      	ldr	r1, [pc, #20]	; (25b4 <sys_arch_reboot+0x24>)
    25a0:	4b05      	ldr	r3, [pc, #20]	; (25b8 <sys_arch_reboot+0x28>)
    25a2:	68ca      	ldr	r2, [r1, #12]
    25a4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    25a8:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    25aa:	60cb      	str	r3, [r1, #12]
    25ac:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    25b0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    25b2:	e7fd      	b.n	25b0 <sys_arch_reboot+0x20>
    25b4:	e000ed00 	.word	0xe000ed00
    25b8:	05fa0004 	.word	0x05fa0004

000025bc <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    25bc:	b120      	cbz	r0, 25c8 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    25be:	4b03      	ldr	r3, [pc, #12]	; (25cc <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    25c0:	0180      	lsls	r0, r0, #6
    25c2:	f043 0301 	orr.w	r3, r3, #1
    25c6:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    25c8:	4770      	bx	lr
    25ca:	bf00      	nop
    25cc:	00008ec0 	.word	0x00008ec0

000025d0 <adc_context_start_sampling.isra.0>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
    25d0:	4a05      	ldr	r2, [pc, #20]	; (25e8 <adc_context_start_sampling.isra.0+0x18>)
    25d2:	2301      	movs	r3, #1
    25d4:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
    25d8:	b108      	cbz	r0, 25de <adc_context_start_sampling.isra.0+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    25da:	60d3      	str	r3, [r2, #12]
}
    25dc:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    25de:	6013      	str	r3, [r2, #0]
    25e0:	4a02      	ldr	r2, [pc, #8]	; (25ec <adc_context_start_sampling.isra.0+0x1c>)
    25e2:	6013      	str	r3, [r2, #0]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
    25e4:	4770      	bx	lr
    25e6:	bf00      	nop
    25e8:	40007000 	.word	0x40007000
    25ec:	40007004 	.word	0x40007004

000025f0 <adc_nrfx_channel_setup>:
	uint8_t channel_id = channel_cfg->channel_id;
    25f0:	7908      	ldrb	r0, [r1, #4]
{
    25f2:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
    25f4:	f000 041f 	and.w	r4, r0, #31
	if (channel_id >= SAADC_CH_NUM) {
    25f8:	2c07      	cmp	r4, #7
    25fa:	d81f      	bhi.n	263c <adc_nrfx_channel_setup+0x4c>
	switch (channel_cfg->gain) {
    25fc:	780b      	ldrb	r3, [r1, #0]
    25fe:	2b09      	cmp	r3, #9
    2600:	d81c      	bhi.n	263c <adc_nrfx_channel_setup+0x4c>
    2602:	e8df f003 	tbb	[pc, r3]
    2606:	0606      	.short	0x0606
    2608:	1b060606 	.word	0x1b060606
    260c:	201b1e05 	.word	0x201b1e05
		config.gain = NRF_SAADC_GAIN1;
    2610:	2305      	movs	r3, #5
	switch (channel_cfg->reference) {
    2612:	784a      	ldrb	r2, [r1, #1]
    2614:	2a03      	cmp	r2, #3
    2616:	d018      	beq.n	264a <adc_nrfx_channel_setup+0x5a>
    2618:	2a04      	cmp	r2, #4
    261a:	d10f      	bne.n	263c <adc_nrfx_channel_setup+0x4c>
    261c:	2500      	movs	r5, #0
	switch (channel_cfg->acquisition_time) {
    261e:	884a      	ldrh	r2, [r1, #2]
    2620:	f244 060a 	movw	r6, #16394	; 0x400a
    2624:	42b2      	cmp	r2, r6
    2626:	d044      	beq.n	26b2 <adc_nrfx_channel_setup+0xc2>
    2628:	d811      	bhi.n	264e <adc_nrfx_channel_setup+0x5e>
    262a:	f244 0603 	movw	r6, #16387	; 0x4003
    262e:	42b2      	cmp	r2, r6
    2630:	d03b      	beq.n	26aa <adc_nrfx_channel_setup+0xba>
    2632:	f244 0605 	movw	r6, #16389	; 0x4005
    2636:	42b2      	cmp	r2, r6
    2638:	d039      	beq.n	26ae <adc_nrfx_channel_setup+0xbe>
    263a:	b3d2      	cbz	r2, 26b2 <adc_nrfx_channel_setup+0xc2>
    263c:	f06f 0015 	mvn.w	r0, #21
    2640:	e032      	b.n	26a8 <adc_nrfx_channel_setup+0xb8>
		config.gain = NRF_SAADC_GAIN2;
    2642:	2306      	movs	r3, #6
		break;
    2644:	e7e5      	b.n	2612 <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN4;
    2646:	2307      	movs	r3, #7
		break;
    2648:	e7e3      	b.n	2612 <adc_nrfx_channel_setup+0x22>
		config.reference = NRF_SAADC_REFERENCE_VDD4;
    264a:	2501      	movs	r5, #1
    264c:	e7e7      	b.n	261e <adc_nrfx_channel_setup+0x2e>
	switch (channel_cfg->acquisition_time) {
    264e:	f244 0614 	movw	r6, #16404	; 0x4014
    2652:	42b2      	cmp	r2, r6
    2654:	d02f      	beq.n	26b6 <adc_nrfx_channel_setup+0xc6>
    2656:	f244 0628 	movw	r6, #16424	; 0x4028
    265a:	42b2      	cmp	r2, r6
    265c:	d02d      	beq.n	26ba <adc_nrfx_channel_setup+0xca>
    265e:	f244 060f 	movw	r6, #16399	; 0x400f
    2662:	42b2      	cmp	r2, r6
    2664:	d1ea      	bne.n	263c <adc_nrfx_channel_setup+0x4c>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
    2666:	2203      	movs	r2, #3
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    2668:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
    266c:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    266e:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
    2672:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    2676:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
    267a:	0122      	lsls	r2, r4, #4
    267c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2680:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
    p_reg->CH[channel].PSELP = pselp;
    2684:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
    2686:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
    268a:	0123      	lsls	r3, r4, #4
    268c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2690:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
    2694:	798a      	ldrb	r2, [r1, #6]
    2696:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
    269a:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
    269e:	4b08      	ldr	r3, [pc, #32]	; (26c0 <adc_nrfx_channel_setup+0xd0>)
    26a0:	441c      	add	r4, r3
    26a2:	794b      	ldrb	r3, [r1, #5]
    26a4:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
}
    26a8:	bd70      	pop	{r4, r5, r6, pc}
	switch (channel_cfg->acquisition_time) {
    26aa:	2200      	movs	r2, #0
    26ac:	e7dc      	b.n	2668 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_5US;
    26ae:	2201      	movs	r2, #1
    26b0:	e7da      	b.n	2668 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
    26b2:	2202      	movs	r2, #2
    26b4:	e7d8      	b.n	2668 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
    26b6:	2204      	movs	r2, #4
    26b8:	e7d6      	b.n	2668 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
    26ba:	2205      	movs	r2, #5
    26bc:	e7d4      	b.n	2668 <adc_nrfx_channel_setup+0x78>
    26be:	bf00      	nop
    26c0:	20000000 	.word	0x20000000

000026c4 <start_read.isra.0>:
	}

	return 0;
}

static int start_read(const struct device *dev,
    26c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    26c6:	4605      	mov	r5, r0
		      const struct adc_sequence *sequence)
{
	int error;
	uint32_t selected_channels = sequence->channels;
    26c8:	6840      	ldr	r0, [r0, #4]
	uint8_t channel_id;

	/* Signal an error if channel selection is invalid (no channels or
	 * a non-existing one is selected).
	 */
	if (!selected_channels ||
    26ca:	b910      	cbnz	r0, 26d2 <start_read.isra.0+0xe>
				channel_id,
				NRF_SAADC_INPUT_DISABLED);
		}
	} while (++channel_id < SAADC_CH_NUM);

	error = set_resolution(sequence);
    26cc:	f06f 0015 	mvn.w	r0, #21
    26d0:	e09c      	b.n	280c <start_read.isra.0+0x148>
	if (!selected_channels ||
    26d2:	f030 02ff 	bics.w	r2, r0, #255	; 0xff
    26d6:	d1f9      	bne.n	26cc <start_read.isra.0+0x8>
    p_reg->CH[channel].PSELP = pselp;
    26d8:	4c57      	ldr	r4, [pc, #348]	; (2838 <start_read.isra.0+0x174>)
			if (m_data.positive_inputs[channel_id] == 0U) {
    26da:	4f58      	ldr	r7, [pc, #352]	; (283c <start_read.isra.0+0x178>)
	active_channels = 0U;
    26dc:	4611      	mov	r1, r2
		if (selected_channels & BIT(channel_id)) {
    26de:	fa20 f302 	lsr.w	r3, r0, r2
    26e2:	f013 0301 	ands.w	r3, r3, #1
    26e6:	d033      	beq.n	2750 <start_read.isra.0+0x8c>
			if (m_data.positive_inputs[channel_id] == 0U) {
    26e8:	18bb      	adds	r3, r7, r2
    26ea:	f893 c0a8 	ldrb.w	ip, [r3, #168]	; 0xa8
    26ee:	f1bc 0f00 	cmp.w	ip, #0
    26f2:	d0eb      	beq.n	26cc <start_read.isra.0+0x8>

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
    26f4:	eb04 1e02 	add.w	lr, r4, r2, lsl #4
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
    26f8:	7c6e      	ldrb	r6, [r5, #17]
    26fa:	f8de 3518 	ldr.w	r3, [lr, #1304]	; 0x518
    26fe:	3e00      	subs	r6, #0
    2700:	bf18      	it	ne
    2702:	2601      	movne	r6, #1
    2704:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    2708:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
    270c:	f8ce 3518 	str.w	r3, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
    2710:	f102 0351 	add.w	r3, r2, #81	; 0x51
    2714:	011b      	lsls	r3, r3, #4
			++active_channels;
    2716:	3101      	adds	r1, #1
    2718:	f844 c003 	str.w	ip, [r4, r3]
    271c:	b2c9      	uxtb	r1, r1
	} while (++channel_id < SAADC_CH_NUM);
    271e:	3201      	adds	r2, #1
    2720:	2a08      	cmp	r2, #8
    2722:	d1dc      	bne.n	26de <start_read.isra.0+0x1a>
	switch (sequence->resolution) {
    2724:	7c2b      	ldrb	r3, [r5, #16]
    2726:	3b08      	subs	r3, #8
    2728:	2b06      	cmp	r3, #6
    272a:	d8cf      	bhi.n	26cc <start_read.isra.0+0x8>
    272c:	a201      	add	r2, pc, #4	; (adr r2, 2734 <start_read.isra.0+0x70>)
    272e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2732:	bf00      	nop
    2734:	00002819 	.word	0x00002819
    2738:	000026cd 	.word	0x000026cd
    273c:	0000275b 	.word	0x0000275b
    2740:	000026cd 	.word	0x000026cd
    2744:	00002811 	.word	0x00002811
    2748:	000026cd 	.word	0x000026cd
    274c:	00002815 	.word	0x00002815
    2750:	f102 0651 	add.w	r6, r2, #81	; 0x51
    2754:	0136      	lsls	r6, r6, #4
    2756:	51a3      	str	r3, [r4, r6]
}
    2758:	e7e1      	b.n	271e <start_read.isra.0+0x5a>
	error = set_resolution(sequence);
    275a:	2201      	movs	r2, #1
    p_reg->RESOLUTION = resolution;
    275c:	4b36      	ldr	r3, [pc, #216]	; (2838 <start_read.isra.0+0x174>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    275e:	2901      	cmp	r1, #1
    2760:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
	if (error) {
		return error;
	}

	error = set_oversampling(sequence, active_channels);
    2764:	7c6a      	ldrb	r2, [r5, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    2766:	d959      	bls.n	281c <start_read.isra.0+0x158>
    2768:	2a00      	cmp	r2, #0
    276a:	d1af      	bne.n	26cc <start_read.isra.0+0x8>
    p_reg->OVERSAMPLE = oversample;
    276c:	f8c3 25f4 	str.w	r2, [r3, #1524]	; 0x5f4
	if (sequence->options) {
    2770:	682a      	ldr	r2, [r5, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
    2772:	004b      	lsls	r3, r1, #1
	if (sequence->options) {
    2774:	b112      	cbz	r2, 277c <start_read.isra.0+0xb8>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
    2776:	8992      	ldrh	r2, [r2, #12]
    2778:	fb02 3303 	mla	r3, r2, r3, r3
	if (sequence->buffer_size < needed_buffer_size) {
    277c:	68ea      	ldr	r2, [r5, #12]
    277e:	429a      	cmp	r2, r3
    2780:	d356      	bcc.n	2830 <start_read.isra.0+0x16c>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    2782:	4b2d      	ldr	r3, [pc, #180]	; (2838 <start_read.isra.0+0x174>)
    2784:	68aa      	ldr	r2, [r5, #8]
    2786:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
    278a:	462f      	mov	r7, r5
    p_reg->RESULT.MAXCNT = size;
    278c:	f8c3 1630 	str.w	r1, [r3, #1584]	; 0x630
    2790:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    2792:	4c2a      	ldr	r4, [pc, #168]	; (283c <start_read.isra.0+0x178>)
    2794:	f104 067c 	add.w	r6, r4, #124	; 0x7c
    2798:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    279a:	683b      	ldr	r3, [r7, #0]
    279c:	6033      	str	r3, [r6, #0]
	ctx->status = 0;

	if (sequence->options) {
    279e:	682b      	ldr	r3, [r5, #0]
	ctx->status = 0;
    27a0:	2600      	movs	r6, #0
    27a2:	6726      	str	r6, [r4, #112]	; 0x70
	if (sequence->options) {
    27a4:	2b00      	cmp	r3, #0
    27a6:	d03c      	beq.n	2822 <start_read.isra.0+0x15e>
		ctx->options = *sequence->options;
    27a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    27aa:	f104 0590 	add.w	r5, r4, #144	; 0x90
    27ae:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
    27b2:	67e5      	str	r5, [r4, #124]	; 0x7c
		ctx->sampling_index = 0U;
    27b4:	f8a4 60a0 	strh.w	r6, [r4, #160]	; 0xa0

		if (ctx->options.interval_us != 0U) {
    27b8:	b398      	cbz	r0, 2822 <start_read.isra.0+0x15e>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    27ba:	f3bf 8f5b 	dmb	ish
    27be:	e854 3f00 	ldrex	r3, [r4]
    27c2:	e844 6200 	strex	r2, r6, [r4]
    27c6:	2a00      	cmp	r2, #0
    27c8:	d1f9      	bne.n	27be <start_read.isra.0+0xfa>
    27ca:	f3bf 8f5b 	dmb	ish
			return (t * to_hz + off) / from_hz;
    27ce:	481c      	ldr	r0, [pc, #112]	; (2840 <start_read.isra.0+0x17c>)
    27d0:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
    27d4:	4a1b      	ldr	r2, [pc, #108]	; (2844 <start_read.isra.0+0x180>)
    27d6:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    27da:	2100      	movs	r1, #0
    27dc:	2300      	movs	r3, #0
    27de:	fbe5 0106 	umlal	r0, r1, r5, r6
    27e2:	f7fd fc8d 	bl	100 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
    27e6:	2200      	movs	r2, #0
    27e8:	e9cd 0100 	strd	r0, r1, [sp]
    27ec:	2300      	movs	r3, #0
    27ee:	f104 0008 	add.w	r0, r4, #8
    27f2:	f005 f8a1 	bl	7938 <z_impl_k_timer_start>
	if (ctx->asynchronous) {
    27f6:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    27fa:	b9bb      	cbnz	r3, 282c <start_read.isra.0+0x168>
	return z_impl_k_sem_take(sem, timeout);
    27fc:	4812      	ldr	r0, [pc, #72]	; (2848 <start_read.isra.0+0x184>)
    27fe:	f04f 32ff 	mov.w	r2, #4294967295
    2802:	f04f 33ff 	mov.w	r3, #4294967295
    2806:	f004 fab1 	bl	6d6c <z_impl_k_sem_take>
	return ctx->status;
    280a:	6f20      	ldr	r0, [r4, #112]	; 0x70

	adc_context_start_read(&m_data.ctx, sequence);

	error = adc_context_wait_for_completion(&m_data.ctx);
	return error;
}
    280c:	b003      	add	sp, #12
    280e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
    2810:	2202      	movs	r2, #2
		break;
    2812:	e7a3      	b.n	275c <start_read.isra.0+0x98>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
    2814:	2203      	movs	r2, #3
		break;
    2816:	e7a1      	b.n	275c <start_read.isra.0+0x98>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
    2818:	2200      	movs	r2, #0
    281a:	e79f      	b.n	275c <start_read.isra.0+0x98>
	switch (sequence->oversampling) {
    281c:	2a08      	cmp	r2, #8
    281e:	d9a5      	bls.n	276c <start_read.isra.0+0xa8>
    2820:	e754      	b.n	26cc <start_read.isra.0+0x8>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
    2822:	f894 008e 	ldrb.w	r0, [r4, #142]	; 0x8e
    2826:	f7ff fed3 	bl	25d0 <adc_context_start_sampling.isra.0>
    282a:	e7e4      	b.n	27f6 <start_read.isra.0+0x132>
		return 0;
    282c:	2000      	movs	r0, #0
	return error;
    282e:	e7ed      	b.n	280c <start_read.isra.0+0x148>
		return -ENOMEM;
    2830:	f06f 000b 	mvn.w	r0, #11
    2834:	e7ea      	b.n	280c <start_read.isra.0+0x148>
    2836:	bf00      	nop
    2838:	40007000 	.word	0x40007000
    283c:	20000000 	.word	0x20000000
    2840:	000f423f 	.word	0x000f423f
    2844:	000f4240 	.word	0x000f4240
    2848:	20000058 	.word	0x20000058

0000284c <adc_nrfx_read_async>:
#ifdef CONFIG_ADC_ASYNC
/* Implementation of the ADC driver API function: adc_read_async. */
static int adc_nrfx_read_async(const struct device *dev,
			       const struct adc_sequence *sequence,
			       struct k_poll_signal *async)
{
    284c:	b570      	push	{r4, r5, r6, lr}
    284e:	460c      	mov	r4, r1
    2850:	4616      	mov	r6, r2
    2852:	4d0d      	ldr	r5, [pc, #52]	; (2888 <adc_nrfx_read_async+0x3c>)
    2854:	f04f 32ff 	mov.w	r2, #4294967295
    2858:	f04f 33ff 	mov.w	r3, #4294967295
    285c:	f105 0040 	add.w	r0, r5, #64	; 0x40
    2860:	f004 fa84 	bl	6d6c <z_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
    2864:	2301      	movs	r3, #1
	int error;

	adc_context_lock(&m_data.ctx, true, async);
	error = start_read(dev, sequence);
    2866:	4620      	mov	r0, r4
    2868:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
	ctx->signal = signal;
    286c:	676e      	str	r6, [r5, #116]	; 0x74
    286e:	f7ff ff29 	bl	26c4 <start_read.isra.0>
	if (ctx->asynchronous && (status == 0)) {
    2872:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    2876:	4604      	mov	r4, r0
    2878:	b103      	cbz	r3, 287c <adc_nrfx_read_async+0x30>
    287a:	b110      	cbz	r0, 2882 <adc_nrfx_read_async+0x36>
	z_impl_k_sem_give(sem);
    287c:	4803      	ldr	r0, [pc, #12]	; (288c <adc_nrfx_read_async+0x40>)
    287e:	f004 fa31 	bl	6ce4 <z_impl_k_sem_give>
	adc_context_release(&m_data.ctx, error);

	return error;
}
    2882:	4620      	mov	r0, r4
    2884:	bd70      	pop	{r4, r5, r6, pc}
    2886:	bf00      	nop
    2888:	20000000 	.word	0x20000000
    288c:	20000040 	.word	0x20000040

00002890 <init_saadc>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2890:	4b0d      	ldr	r3, [pc, #52]	; (28c8 <init_saadc+0x38>)
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
    2892:	b510      	push	{r4, lr}
    2894:	2400      	movs	r4, #0
    2896:	601c      	str	r4, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    2898:	681b      	ldr	r3, [r3, #0]
    289a:	4b0c      	ldr	r3, [pc, #48]	; (28cc <init_saadc+0x3c>)
    289c:	601c      	str	r4, [r3, #0]
    289e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    28a0:	4b0b      	ldr	r3, [pc, #44]	; (28d0 <init_saadc+0x40>)
    28a2:	2212      	movs	r2, #18
    28a4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
    28a8:	2007      	movs	r0, #7
    28aa:	f7ff fa37 	bl	1d1c <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    28ae:	4622      	mov	r2, r4
    28b0:	2101      	movs	r1, #1
    28b2:	2007      	movs	r0, #7
    28b4:	f7ff fa50 	bl	1d58 <z_arm_irq_priority_set>
	return z_impl_k_sem_count_get(sem);
    28b8:	4806      	ldr	r0, [pc, #24]	; (28d4 <init_saadc+0x44>)
	if (!k_sem_count_get(&ctx->lock)) {
    28ba:	6c83      	ldr	r3, [r0, #72]	; 0x48
    28bc:	b913      	cbnz	r3, 28c4 <init_saadc+0x34>
	z_impl_k_sem_give(sem);
    28be:	3040      	adds	r0, #64	; 0x40
    28c0:	f004 fa10 	bl	6ce4 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
    28c4:	2000      	movs	r0, #0
    28c6:	bd10      	pop	{r4, pc}
    28c8:	40007104 	.word	0x40007104
    28cc:	40007110 	.word	0x40007110
    28d0:	40007000 	.word	0x40007000
    28d4:	20000000 	.word	0x20000000

000028d8 <saadc_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    28d8:	4b34      	ldr	r3, [pc, #208]	; (29ac <saadc_irq_handler+0xd4>)
    28da:	681a      	ldr	r2, [r3, #0]
{
    28dc:	b510      	push	{r4, lr}
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
    28de:	2a00      	cmp	r2, #0
    28e0:	d055      	beq.n	298e <saadc_irq_handler+0xb6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    28e2:	2200      	movs	r2, #0
    28e4:	601a      	str	r2, [r3, #0]
    28e6:	681b      	ldr	r3, [r3, #0]
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
    28e8:	4c31      	ldr	r4, [pc, #196]	; (29b0 <saadc_irq_handler+0xd8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    28ea:	4b32      	ldr	r3, [pc, #200]	; (29b4 <saadc_irq_handler+0xdc>)
    28ec:	2101      	movs	r1, #1
    28ee:	6019      	str	r1, [r3, #0]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
    28f0:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
    28f4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    28f6:	b3db      	cbz	r3, 2970 <saadc_irq_handler+0x98>
		adc_sequence_callback callback = ctx->options.callback;
    28f8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
    28fc:	b143      	cbz	r3, 2910 <saadc_irq_handler+0x38>
			action = callback(dev,
    28fe:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
    2902:	f104 017c 	add.w	r1, r4, #124	; 0x7c
    2906:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
    2908:	2801      	cmp	r0, #1
    290a:	d014      	beq.n	2936 <saadc_irq_handler+0x5e>
    290c:	2802      	cmp	r0, #2
    290e:	d029      	beq.n	2964 <saadc_irq_handler+0x8c>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
    2910:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
    2914:	f8b4 209c 	ldrh.w	r2, [r4, #156]	; 0x9c
    2918:	429a      	cmp	r2, r3
    291a:	d923      	bls.n	2964 <saadc_irq_handler+0x8c>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
    291c:	3301      	adds	r3, #1
    291e:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
    2922:	4b25      	ldr	r3, [pc, #148]	; (29b8 <saadc_irq_handler+0xe0>)
    2924:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
    2928:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
    292c:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
    292e:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    2932:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
    2936:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    293a:	b92b      	cbnz	r3, 2948 <saadc_irq_handler+0x70>
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
    293c:	f894 008e 	ldrb.w	r0, [r4, #142]	; 0x8e
}
    2940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2944:	f7ff be44 	b.w	25d0 <adc_context_start_sampling.isra.0>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    2948:	f3bf 8f5b 	dmb	ish
    294c:	e854 3f00 	ldrex	r3, [r4]
    2950:	1e5a      	subs	r2, r3, #1
    2952:	e844 2100 	strex	r1, r2, [r4]
    2956:	2900      	cmp	r1, #0
    2958:	d1f8      	bne.n	294c <saadc_irq_handler+0x74>
    295a:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
    295e:	2b01      	cmp	r3, #1
    2960:	dcec      	bgt.n	293c <saadc_irq_handler+0x64>
    2962:	bd10      	pop	{r4, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
    2964:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    2968:	b113      	cbz	r3, 2970 <saadc_irq_handler+0x98>
	z_impl_k_timer_stop(timer);
    296a:	4814      	ldr	r0, [pc, #80]	; (29bc <saadc_irq_handler+0xe4>)
    296c:	f006 f91b 	bl	8ba6 <z_impl_k_timer_stop>
	if (ctx->asynchronous) {
    2970:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    2974:	b14b      	cbz	r3, 298a <saadc_irq_handler+0xb2>
		if (ctx->signal) {
    2976:	6f60      	ldr	r0, [r4, #116]	; 0x74
    2978:	b110      	cbz	r0, 2980 <saadc_irq_handler+0xa8>
	return z_impl_k_poll_signal_raise(sig, result);
    297a:	2100      	movs	r1, #0
    297c:	f002 ff28 	bl	57d0 <z_impl_k_poll_signal_raise>
	z_impl_k_sem_give(sem);
    2980:	480f      	ldr	r0, [pc, #60]	; (29c0 <saadc_irq_handler+0xe8>)
    2982:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2986:	f004 b9ad 	b.w	6ce4 <z_impl_k_sem_give>
    298a:	480e      	ldr	r0, [pc, #56]	; (29c4 <saadc_irq_handler+0xec>)
    298c:	e7f9      	b.n	2982 <saadc_irq_handler+0xaa>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    298e:	4b0e      	ldr	r3, [pc, #56]	; (29c8 <saadc_irq_handler+0xf0>)
    2990:	6819      	ldr	r1, [r3, #0]
	} else if (nrf_saadc_event_check(NRF_SAADC,
    2992:	2900      	cmp	r1, #0
    2994:	d0e5      	beq.n	2962 <saadc_irq_handler+0x8a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2996:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2998:	4a06      	ldr	r2, [pc, #24]	; (29b4 <saadc_irq_handler+0xdc>)
    299a:	681b      	ldr	r3, [r3, #0]
    299c:	2301      	movs	r3, #1
    299e:	6013      	str	r3, [r2, #0]
    29a0:	f842 3c08 	str.w	r3, [r2, #-8]
    29a4:	f842 3c04 	str.w	r3, [r2, #-4]
}
    29a8:	e7db      	b.n	2962 <saadc_irq_handler+0x8a>
    29aa:	bf00      	nop
    29ac:	40007104 	.word	0x40007104
    29b0:	20000000 	.word	0x20000000
    29b4:	40007008 	.word	0x40007008
    29b8:	40007000 	.word	0x40007000
    29bc:	20000008 	.word	0x20000008
    29c0:	20000040 	.word	0x20000040
    29c4:	20000058 	.word	0x20000058
    29c8:	40007110 	.word	0x40007110

000029cc <adc_nrfx_read>:
{
    29cc:	b538      	push	{r3, r4, r5, lr}
    29ce:	460c      	mov	r4, r1
	return z_impl_k_sem_take(sem, timeout);
    29d0:	4d0c      	ldr	r5, [pc, #48]	; (2a04 <adc_nrfx_read+0x38>)
    29d2:	f04f 32ff 	mov.w	r2, #4294967295
    29d6:	f04f 33ff 	mov.w	r3, #4294967295
    29da:	f105 0040 	add.w	r0, r5, #64	; 0x40
    29de:	f004 f9c5 	bl	6d6c <z_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
    29e2:	2300      	movs	r3, #0
	error = start_read(dev, sequence);
    29e4:	4620      	mov	r0, r4
    29e6:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
	ctx->signal = signal;
    29ea:	676b      	str	r3, [r5, #116]	; 0x74
    29ec:	f7ff fe6a 	bl	26c4 <start_read.isra.0>
	if (ctx->asynchronous && (status == 0)) {
    29f0:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    29f4:	4604      	mov	r4, r0
    29f6:	b103      	cbz	r3, 29fa <adc_nrfx_read+0x2e>
    29f8:	b110      	cbz	r0, 2a00 <adc_nrfx_read+0x34>
	z_impl_k_sem_give(sem);
    29fa:	4803      	ldr	r0, [pc, #12]	; (2a08 <adc_nrfx_read+0x3c>)
    29fc:	f004 f972 	bl	6ce4 <z_impl_k_sem_give>
}
    2a00:	4620      	mov	r0, r4
    2a02:	bd38      	pop	{r3, r4, r5, pc}
    2a04:	20000000 	.word	0x20000000
    2a08:	20000040 	.word	0x20000040

00002a0c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    2a10:	4c10      	ldr	r4, [pc, #64]	; (2a54 <onoff_start+0x48>)
    2a12:	1b07      	subs	r7, r0, r4
    2a14:	f3c7 1747 	ubfx	r7, r7, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
    2a18:	f04f 080c 	mov.w	r8, #12
    2a1c:	fb08 f807 	mul.w	r8, r8, r7
{
    2a20:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    2a22:	f108 0048 	add.w	r0, r8, #72	; 0x48
{
    2a26:	460d      	mov	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
    2a28:	4420      	add	r0, r4
    2a2a:	2140      	movs	r1, #64	; 0x40
    2a2c:	f005 fdae 	bl	858c <set_starting_state>
	if (err < 0) {
    2a30:	1e01      	subs	r1, r0, #0
    2a32:	db09      	blt.n	2a48 <onoff_start+0x3c>
	subdata->cb = cb;
    2a34:	4b08      	ldr	r3, [pc, #32]	; (2a58 <onoff_start+0x4c>)
    2a36:	4444      	add	r4, r8
	subdata->user_data = user_data;
    2a38:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    2a3c:	4b07      	ldr	r3, [pc, #28]	; (2a5c <onoff_start+0x50>)
    2a3e:	f853 3037 	ldr.w	r3, [r3, r7, lsl #3]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    2a42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    2a46:	4718      	bx	r3
		notify(mgr, err);
    2a48:	4630      	mov	r0, r6
    2a4a:	462b      	mov	r3, r5
}
    2a4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    2a50:	4718      	bx	r3
    2a52:	bf00      	nop
    2a54:	20000b88 	.word	0x20000b88
    2a58:	000085ef 	.word	0x000085ef
    2a5c:	00008f48 	.word	0x00008f48

00002a60 <get_status>:
{
    2a60:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2a62:	b2cc      	uxtb	r4, r1
    2a64:	2c01      	cmp	r4, #1
{
    2a66:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2a68:	d909      	bls.n	2a7e <get_status+0x1e>
    2a6a:	4909      	ldr	r1, [pc, #36]	; (2a90 <get_status+0x30>)
    2a6c:	4809      	ldr	r0, [pc, #36]	; (2a94 <get_status+0x34>)
    2a6e:	4a0a      	ldr	r2, [pc, #40]	; (2a98 <get_status+0x38>)
    2a70:	2379      	movs	r3, #121	; 0x79
    2a72:	f005 fcf4 	bl	845e <printk>
    2a76:	4808      	ldr	r0, [pc, #32]	; (2a98 <get_status+0x38>)
    2a78:	2179      	movs	r1, #121	; 0x79
    2a7a:	f005 fc19 	bl	82b0 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    2a7e:	692b      	ldr	r3, [r5, #16]
    2a80:	210c      	movs	r1, #12
    2a82:	fb04 3401 	mla	r4, r4, r1, r3
    2a86:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
    2a88:	f000 0007 	and.w	r0, r0, #7
    2a8c:	bd38      	pop	{r3, r4, r5, pc}
    2a8e:	bf00      	nop
    2a90:	00009a2f 	.word	0x00009a2f
    2a94:	00009190 	.word	0x00009190
    2a98:	000099f2 	.word	0x000099f2

00002a9c <stop>:
{
    2a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a9e:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2aa0:	2c01      	cmp	r4, #1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    2aa2:	6907      	ldr	r7, [r0, #16]
{
    2aa4:	4605      	mov	r5, r0
    2aa6:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2aa8:	d90b      	bls.n	2ac2 <stop+0x26>
    2aaa:	4918      	ldr	r1, [pc, #96]	; (2b0c <stop+0x70>)
    2aac:	4818      	ldr	r0, [pc, #96]	; (2b10 <stop+0x74>)
    2aae:	4a19      	ldr	r2, [pc, #100]	; (2b14 <stop+0x78>)
    2ab0:	f240 134d 	movw	r3, #333	; 0x14d
    2ab4:	f005 fcd3 	bl	845e <printk>
    2ab8:	4816      	ldr	r0, [pc, #88]	; (2b14 <stop+0x78>)
    2aba:	f240 114d 	movw	r1, #333	; 0x14d
    2abe:	f005 fbf7 	bl	82b0 <assert_post_action>
	__asm__ volatile(
    2ac2:	f04f 0320 	mov.w	r3, #32
    2ac6:	f3ef 8211 	mrs	r2, BASEPRI
    2aca:	f383 8812 	msr	BASEPRI_MAX, r3
    2ace:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    2ad2:	230c      	movs	r3, #12
    2ad4:	fb03 7104 	mla	r1, r3, r4, r7
    2ad8:	6c89      	ldr	r1, [r1, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    2ada:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
    2ade:	d001      	beq.n	2ae4 <stop+0x48>
    2ae0:	428e      	cmp	r6, r1
    2ae2:	d110      	bne.n	2b06 <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    2ae4:	fb03 7304 	mla	r3, r3, r4, r7
    2ae8:	2101      	movs	r1, #1
    2aea:	6499      	str	r1, [r3, #72]	; 0x48
	int err = 0;
    2aec:	2000      	movs	r0, #0
	__asm__ volatile(
    2aee:	f382 8811 	msr	BASEPRI, r2
    2af2:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    2af6:	b928      	cbnz	r0, 2b04 <stop+0x68>
	get_sub_config(dev, type)->stop();
    2af8:	6869      	ldr	r1, [r5, #4]
    2afa:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
    2afe:	6863      	ldr	r3, [r4, #4]
    2b00:	4798      	blx	r3
	return 0;
    2b02:	2000      	movs	r0, #0
}
    2b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    2b06:	f04f 30ff 	mov.w	r0, #4294967295
    2b0a:	e7f0      	b.n	2aee <stop+0x52>
    2b0c:	00009a2f 	.word	0x00009a2f
    2b10:	00009190 	.word	0x00009190
    2b14:	000099f2 	.word	0x000099f2

00002b18 <onoff_stop>:
{
    2b18:	b570      	push	{r4, r5, r6, lr}
    2b1a:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    2b1c:	4906      	ldr	r1, [pc, #24]	; (2b38 <onoff_stop+0x20>)
    2b1e:	1a41      	subs	r1, r0, r1
{
    2b20:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2b22:	1149      	asrs	r1, r1, #5
    2b24:	4805      	ldr	r0, [pc, #20]	; (2b3c <onoff_stop+0x24>)
    2b26:	2240      	movs	r2, #64	; 0x40
    2b28:	f7ff ffb8 	bl	2a9c <stop>
	notify(mgr, res);
    2b2c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2b2e:	4601      	mov	r1, r0
	notify(mgr, res);
    2b30:	4620      	mov	r0, r4
}
    2b32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    2b36:	4718      	bx	r3
    2b38:	20000b88 	.word	0x20000b88
    2b3c:	00008c6c 	.word	0x00008c6c

00002b40 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2b40:	2200      	movs	r2, #0
{
    2b42:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2b44:	2101      	movs	r1, #1
{
    2b46:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2b48:	4610      	mov	r0, r2
    2b4a:	f7ff f905 	bl	1d58 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    2b4e:	2000      	movs	r0, #0
    2b50:	f7ff f8e4 	bl	1d1c <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    2b54:	480f      	ldr	r0, [pc, #60]	; (2b94 <clk_init+0x54>)
    2b56:	f001 f8c3 	bl	3ce0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    2b5a:	4b0f      	ldr	r3, [pc, #60]	; (2b98 <clk_init+0x58>)
    2b5c:	4298      	cmp	r0, r3
    2b5e:	d115      	bne.n	2b8c <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    2b60:	f001 f8e2 	bl	3d28 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    2b64:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    2b66:	490d      	ldr	r1, [pc, #52]	; (2b9c <clk_init+0x5c>)
    2b68:	4630      	mov	r0, r6
    2b6a:	f005 fc63 	bl	8434 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    2b6e:	2800      	cmp	r0, #0
    2b70:	db0b      	blt.n	2b8a <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2b72:	2501      	movs	r5, #1
    2b74:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
    2b76:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2b78:	4908      	ldr	r1, [pc, #32]	; (2b9c <clk_init+0x5c>)
    2b7a:	f104 0020 	add.w	r0, r4, #32
    2b7e:	f005 fc59 	bl	8434 <onoff_manager_init>
		if (err < 0) {
    2b82:	2800      	cmp	r0, #0
    2b84:	db01      	blt.n	2b8a <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2b86:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
    2b88:	2000      	movs	r0, #0
}
    2b8a:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    2b8c:	f06f 0004 	mvn.w	r0, #4
    2b90:	e7fb      	b.n	2b8a <clk_init+0x4a>
    2b92:	bf00      	nop
    2b94:	00002bd5 	.word	0x00002bd5
    2b98:	0bad0000 	.word	0x0bad0000
    2b9c:	00008f58 	.word	0x00008f58

00002ba0 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    2ba0:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    2ba2:	230c      	movs	r3, #12
    2ba4:	4809      	ldr	r0, [pc, #36]	; (2bcc <clkstarted_handle.constprop.0+0x2c>)
    2ba6:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    2ba8:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    2baa:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    2bac:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
    2bb0:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    2bb2:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
    2bb4:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    2bb6:	4418      	add	r0, r3
    2bb8:	f005 fd06 	bl	85c8 <set_on_state>
	if (callback) {
    2bbc:	b12d      	cbz	r5, 2bca <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    2bbe:	4632      	mov	r2, r6
    2bc0:	462b      	mov	r3, r5
    2bc2:	4803      	ldr	r0, [pc, #12]	; (2bd0 <clkstarted_handle.constprop.0+0x30>)
}
    2bc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    2bc8:	4718      	bx	r3
}
    2bca:	bd70      	pop	{r4, r5, r6, pc}
    2bcc:	20000b88 	.word	0x20000b88
    2bd0:	00008c6c 	.word	0x00008c6c

00002bd4 <clock_event_handler>:
	switch (event) {
    2bd4:	2801      	cmp	r0, #1
{
    2bd6:	b508      	push	{r3, lr}
	switch (event) {
    2bd8:	d006      	beq.n	2be8 <clock_event_handler+0x14>
    2bda:	2803      	cmp	r0, #3
    2bdc:	d008      	beq.n	2bf0 <clock_event_handler+0x1c>
    2bde:	b9a8      	cbnz	r0, 2c0c <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    2be0:	4b10      	ldr	r3, [pc, #64]	; (2c24 <clock_event_handler+0x50>)
    2be2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2be4:	075b      	lsls	r3, r3, #29
    2be6:	d11b      	bne.n	2c20 <clock_event_handler+0x4c>
}
    2be8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    2bec:	f7ff bfd8 	b.w	2ba0 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
    2bf0:	490d      	ldr	r1, [pc, #52]	; (2c28 <clock_event_handler+0x54>)
    2bf2:	4a0e      	ldr	r2, [pc, #56]	; (2c2c <clock_event_handler+0x58>)
    2bf4:	480e      	ldr	r0, [pc, #56]	; (2c30 <clock_event_handler+0x5c>)
    2bf6:	f240 235e 	movw	r3, #606	; 0x25e
    2bfa:	f005 fc30 	bl	845e <printk>
    2bfe:	f240 215e 	movw	r1, #606	; 0x25e
}
    2c02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    2c06:	4809      	ldr	r0, [pc, #36]	; (2c2c <clock_event_handler+0x58>)
    2c08:	f005 bb52 	b.w	82b0 <assert_post_action>
    2c0c:	4906      	ldr	r1, [pc, #24]	; (2c28 <clock_event_handler+0x54>)
    2c0e:	4a07      	ldr	r2, [pc, #28]	; (2c2c <clock_event_handler+0x58>)
    2c10:	4807      	ldr	r0, [pc, #28]	; (2c30 <clock_event_handler+0x5c>)
    2c12:	f240 2362 	movw	r3, #610	; 0x262
    2c16:	f005 fc22 	bl	845e <printk>
    2c1a:	f240 2162 	movw	r1, #610	; 0x262
    2c1e:	e7f0      	b.n	2c02 <clock_event_handler+0x2e>
}
    2c20:	bd08      	pop	{r3, pc}
    2c22:	bf00      	nop
    2c24:	20000b88 	.word	0x20000b88
    2c28:	00009cef 	.word	0x00009cef
    2c2c:	000099f2 	.word	0x000099f2
    2c30:	00009190 	.word	0x00009190

00002c34 <generic_hfclk_start>:
{
    2c34:	b508      	push	{r3, lr}
	__asm__ volatile(
    2c36:	f04f 0320 	mov.w	r3, #32
    2c3a:	f3ef 8111 	mrs	r1, BASEPRI
    2c3e:	f383 8812 	msr	BASEPRI_MAX, r3
    2c42:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    2c46:	4a12      	ldr	r2, [pc, #72]	; (2c90 <generic_hfclk_start+0x5c>)
    2c48:	6813      	ldr	r3, [r2, #0]
    2c4a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    2c4e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    2c52:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    2c54:	d00c      	beq.n	2c70 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2c56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2c5a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2c5e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    2c62:	f013 0301 	ands.w	r3, r3, #1
    2c66:	d003      	beq.n	2c70 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    2c68:	480a      	ldr	r0, [pc, #40]	; (2c94 <generic_hfclk_start+0x60>)
    2c6a:	f005 fcad 	bl	85c8 <set_on_state>
			already_started = true;
    2c6e:	2301      	movs	r3, #1
	__asm__ volatile(
    2c70:	f381 8811 	msr	BASEPRI, r1
    2c74:	f3bf 8f6f 	isb	sy
	if (already_started) {
    2c78:	b123      	cbz	r3, 2c84 <generic_hfclk_start+0x50>
}
    2c7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    2c7e:	2000      	movs	r0, #0
    2c80:	f7ff bf8e 	b.w	2ba0 <clkstarted_handle.constprop.0>
}
    2c84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    2c88:	2001      	movs	r0, #1
    2c8a:	f001 b86d 	b.w	3d68 <nrfx_clock_start>
    2c8e:	bf00      	nop
    2c90:	20000be0 	.word	0x20000be0
    2c94:	20000bd0 	.word	0x20000bd0

00002c98 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2c98:	4b09      	ldr	r3, [pc, #36]	; (2cc0 <generic_hfclk_stop+0x28>)
    2c9a:	f3bf 8f5b 	dmb	ish
    2c9e:	e853 2f00 	ldrex	r2, [r3]
    2ca2:	f022 0102 	bic.w	r1, r2, #2
    2ca6:	e843 1000 	strex	r0, r1, [r3]
    2caa:	2800      	cmp	r0, #0
    2cac:	d1f7      	bne.n	2c9e <generic_hfclk_stop+0x6>
    2cae:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    2cb2:	07d3      	lsls	r3, r2, #31
    2cb4:	d402      	bmi.n	2cbc <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    2cb6:	2001      	movs	r0, #1
    2cb8:	f001 b8aa 	b.w	3e10 <nrfx_clock_stop>
}
    2cbc:	4770      	bx	lr
    2cbe:	bf00      	nop
    2cc0:	20000be0 	.word	0x20000be0

00002cc4 <api_blocking_start>:
{
    2cc4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2cc6:	2200      	movs	r2, #0
    2cc8:	2301      	movs	r3, #1
    2cca:	e9cd 2302 	strd	r2, r3, [sp, #8]
    2cce:	ab04      	add	r3, sp, #16
    2cd0:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2cd4:	4a09      	ldr	r2, [pc, #36]	; (2cfc <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2cd6:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2cda:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2cdc:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2ce0:	f005 fc97 	bl	8612 <api_start>
	if (err < 0) {
    2ce4:	2800      	cmp	r0, #0
    2ce6:	db05      	blt.n	2cf4 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    2ce8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2cec:	2300      	movs	r3, #0
    2cee:	4668      	mov	r0, sp
    2cf0:	f004 f83c 	bl	6d6c <z_impl_k_sem_take>
}
    2cf4:	b007      	add	sp, #28
    2cf6:	f85d fb04 	ldr.w	pc, [sp], #4
    2cfa:	bf00      	nop
    2cfc:	0000860d 	.word	0x0000860d

00002d00 <z_nrf_clock_control_lf_on>:
{
    2d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2d04:	4949      	ldr	r1, [pc, #292]	; (2e2c <z_nrf_clock_control_lf_on+0x12c>)
    2d06:	f3bf 8f5b 	dmb	ish
    2d0a:	4605      	mov	r5, r0
    2d0c:	2201      	movs	r2, #1
    2d0e:	e851 3f00 	ldrex	r3, [r1]
    2d12:	e841 2000 	strex	r0, r2, [r1]
    2d16:	2800      	cmp	r0, #0
    2d18:	d1f9      	bne.n	2d0e <z_nrf_clock_control_lf_on+0xe>
    2d1a:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    2d1e:	b9a3      	cbnz	r3, 2d4a <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    2d20:	4943      	ldr	r1, [pc, #268]	; (2e30 <z_nrf_clock_control_lf_on+0x130>)
		err = onoff_request(mgr, &cli);
    2d22:	4844      	ldr	r0, [pc, #272]	; (2e34 <z_nrf_clock_control_lf_on+0x134>)
    2d24:	604b      	str	r3, [r1, #4]
    2d26:	60cb      	str	r3, [r1, #12]
    2d28:	608a      	str	r2, [r1, #8]
    2d2a:	f7fe fd6d 	bl	1808 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    2d2e:	2800      	cmp	r0, #0
    2d30:	da0b      	bge.n	2d4a <z_nrf_clock_control_lf_on+0x4a>
    2d32:	4941      	ldr	r1, [pc, #260]	; (2e38 <z_nrf_clock_control_lf_on+0x138>)
    2d34:	4841      	ldr	r0, [pc, #260]	; (2e3c <z_nrf_clock_control_lf_on+0x13c>)
    2d36:	4a42      	ldr	r2, [pc, #264]	; (2e40 <z_nrf_clock_control_lf_on+0x140>)
    2d38:	f44f 7308 	mov.w	r3, #544	; 0x220
    2d3c:	f005 fb8f 	bl	845e <printk>
    2d40:	483f      	ldr	r0, [pc, #252]	; (2e40 <z_nrf_clock_control_lf_on+0x140>)
    2d42:	f44f 7108 	mov.w	r1, #544	; 0x220
    2d46:	f005 fab3 	bl	82b0 <assert_post_action>
	switch (start_mode) {
    2d4a:	b3ad      	cbz	r5, 2db8 <z_nrf_clock_control_lf_on+0xb8>
    2d4c:	1e6b      	subs	r3, r5, #1
    2d4e:	2b01      	cmp	r3, #1
    2d50:	d856      	bhi.n	2e00 <z_nrf_clock_control_lf_on+0x100>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    2d52:	2d01      	cmp	r5, #1
    2d54:	d107      	bne.n	2d66 <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    2d56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2d5a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    2d5e:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    2d62:	2b01      	cmp	r3, #1
    2d64:	d028      	beq.n	2db8 <z_nrf_clock_control_lf_on+0xb8>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2d66:	f005 ff09 	bl	8b7c <k_is_in_isr>
    2d6a:	4604      	mov	r4, r0
    2d6c:	b918      	cbnz	r0, 2d76 <z_nrf_clock_control_lf_on+0x76>
	return !z_sys_post_kernel;
    2d6e:	4b35      	ldr	r3, [pc, #212]	; (2e44 <z_nrf_clock_control_lf_on+0x144>)
	int key = isr_mode ? irq_lock() : 0;
    2d70:	781b      	ldrb	r3, [r3, #0]
    2d72:	2b00      	cmp	r3, #0
    2d74:	d152      	bne.n	2e1c <z_nrf_clock_control_lf_on+0x11c>
	__asm__ volatile(
    2d76:	f04f 0320 	mov.w	r3, #32
    2d7a:	f3ef 8611 	mrs	r6, BASEPRI
    2d7e:	f383 8812 	msr	BASEPRI_MAX, r3
    2d82:	f3bf 8f6f 	isb	sy
    2d86:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2d88:	4f2f      	ldr	r7, [pc, #188]	; (2e48 <z_nrf_clock_control_lf_on+0x148>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2d8a:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 2e50 <z_nrf_clock_control_lf_on+0x150>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2d8e:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 2e54 <z_nrf_clock_control_lf_on+0x154>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2d92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2d96:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2d9a:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    2d9e:	03d2      	lsls	r2, r2, #15
    2da0:	d50c      	bpl.n	2dbc <z_nrf_clock_control_lf_on+0xbc>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    2da2:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    2da6:	2b01      	cmp	r3, #1
    2da8:	d001      	beq.n	2dae <z_nrf_clock_control_lf_on+0xae>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    2daa:	2d01      	cmp	r5, #1
    2dac:	d106      	bne.n	2dbc <z_nrf_clock_control_lf_on+0xbc>
	if (isr_mode) {
    2dae:	b30c      	cbz	r4, 2df4 <z_nrf_clock_control_lf_on+0xf4>
	__asm__ volatile(
    2db0:	f386 8811 	msr	BASEPRI, r6
    2db4:	f3bf 8f6f 	isb	sy
}
    2db8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    2dbc:	b1ac      	cbz	r4, 2dea <z_nrf_clock_control_lf_on+0xea>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    2dbe:	4630      	mov	r0, r6
    2dc0:	f7fe ff44 	bl	1c4c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    2dc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2dc8:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    2dcc:	2b00      	cmp	r3, #0
    2dce:	d1e0      	bne.n	2d92 <z_nrf_clock_control_lf_on+0x92>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2dd0:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    2dd2:	2900      	cmp	r1, #0
    2dd4:	d0dd      	beq.n	2d92 <z_nrf_clock_control_lf_on+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2dd6:	603b      	str	r3, [r7, #0]
    2dd8:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    2dda:	2301      	movs	r3, #1
    2ddc:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    2de0:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2de4:	f8c9 3000 	str.w	r3, [r9]
}
    2de8:	e7d3      	b.n	2d92 <z_nrf_clock_control_lf_on+0x92>
	return z_impl_k_sleep(timeout);
    2dea:	2100      	movs	r1, #0
    2dec:	2021      	movs	r0, #33	; 0x21
    2dee:	f003 fe0d 	bl	6a0c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2df2:	e7e7      	b.n	2dc4 <z_nrf_clock_control_lf_on+0xc4>
    p_reg->INTENSET = mask;
    2df4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2df8:	2202      	movs	r2, #2
    2dfa:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    2dfe:	e7db      	b.n	2db8 <z_nrf_clock_control_lf_on+0xb8>
		__ASSERT_NO_MSG(false);
    2e00:	4912      	ldr	r1, [pc, #72]	; (2e4c <z_nrf_clock_control_lf_on+0x14c>)
    2e02:	480e      	ldr	r0, [pc, #56]	; (2e3c <z_nrf_clock_control_lf_on+0x13c>)
    2e04:	4a0e      	ldr	r2, [pc, #56]	; (2e40 <z_nrf_clock_control_lf_on+0x140>)
    2e06:	f240 2332 	movw	r3, #562	; 0x232
    2e0a:	f005 fb28 	bl	845e <printk>
}
    2e0e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
    2e12:	480b      	ldr	r0, [pc, #44]	; (2e40 <z_nrf_clock_control_lf_on+0x140>)
    2e14:	f240 2132 	movw	r1, #562	; 0x232
    2e18:	f005 ba4a 	b.w	82b0 <assert_post_action>
    p_reg->INTENCLR = mask;
    2e1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2e20:	2202      	movs	r2, #2
    2e22:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    2e26:	4606      	mov	r6, r0
}
    2e28:	e7ae      	b.n	2d88 <z_nrf_clock_control_lf_on+0x88>
    2e2a:	bf00      	nop
    2e2c:	20000be4 	.word	0x20000be4
    2e30:	20000b78 	.word	0x20000b78
    2e34:	20000ba8 	.word	0x20000ba8
    2e38:	00009a53 	.word	0x00009a53
    2e3c:	00009190 	.word	0x00009190
    2e40:	000099f2 	.word	0x000099f2
    2e44:	20000ca9 	.word	0x20000ca9
    2e48:	40000104 	.word	0x40000104
    2e4c:	00009cef 	.word	0x00009cef
    2e50:	e000e100 	.word	0xe000e100
    2e54:	40000008 	.word	0x40000008

00002e58 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    2e58:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    2e5a:	4b08      	ldr	r3, [pc, #32]	; (2e7c <uart_console_init+0x24>)
    2e5c:	4808      	ldr	r0, [pc, #32]	; (2e80 <uart_console_init+0x28>)
    2e5e:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    2e60:	f005 fe1a 	bl	8a98 <z_device_ready>
    2e64:	b138      	cbz	r0, 2e76 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    2e66:	4807      	ldr	r0, [pc, #28]	; (2e84 <uart_console_init+0x2c>)
    2e68:	f7ff fb4e 	bl	2508 <__stdout_hook_install>
	__printk_hook_install(console_out);
    2e6c:	4805      	ldr	r0, [pc, #20]	; (2e84 <uart_console_init+0x2c>)
    2e6e:	f7fe feb1 	bl	1bd4 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    2e72:	2000      	movs	r0, #0
}
    2e74:	bd08      	pop	{r3, pc}
		return -ENODEV;
    2e76:	f06f 0012 	mvn.w	r0, #18
    2e7a:	e7fb      	b.n	2e74 <uart_console_init+0x1c>
    2e7c:	20000be8 	.word	0x20000be8
    2e80:	00008ccc 	.word	0x00008ccc
    2e84:	00002e89 	.word	0x00002e89

00002e88 <console_out>:
	if ('\n' == c) {
    2e88:	280a      	cmp	r0, #10
{
    2e8a:	b538      	push	{r3, r4, r5, lr}
    2e8c:	4d07      	ldr	r5, [pc, #28]	; (2eac <console_out+0x24>)
    2e8e:	4604      	mov	r4, r0
	if ('\n' == c) {
    2e90:	d104      	bne.n	2e9c <console_out+0x14>
    2e92:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    2e94:	6883      	ldr	r3, [r0, #8]
    2e96:	210d      	movs	r1, #13
    2e98:	685b      	ldr	r3, [r3, #4]
    2e9a:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    2e9c:	6828      	ldr	r0, [r5, #0]
    2e9e:	6883      	ldr	r3, [r0, #8]
    2ea0:	b2e1      	uxtb	r1, r4
    2ea2:	685b      	ldr	r3, [r3, #4]
    2ea4:	4798      	blx	r3
}
    2ea6:	4620      	mov	r0, r4
    2ea8:	bd38      	pop	{r3, r4, r5, pc}
    2eaa:	bf00      	nop
    2eac:	20000be8 	.word	0x20000be8

00002eb0 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    2eb0:	b570      	push	{r4, r5, r6, lr}
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    2eb2:	6905      	ldr	r5, [r0, #16]
{
    2eb4:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    2eb6:	460c      	mov	r4, r1
    2eb8:	b961      	cbnz	r1, 2ed4 <gpio_nrfx_manage_callback+0x24>
    2eba:	4922      	ldr	r1, [pc, #136]	; (2f44 <gpio_nrfx_manage_callback+0x94>)
    2ebc:	4a22      	ldr	r2, [pc, #136]	; (2f48 <gpio_nrfx_manage_callback+0x98>)
    2ebe:	4823      	ldr	r0, [pc, #140]	; (2f4c <gpio_nrfx_manage_callback+0x9c>)
    2ec0:	2324      	movs	r3, #36	; 0x24
    2ec2:	f005 facc 	bl	845e <printk>
    2ec6:	4822      	ldr	r0, [pc, #136]	; (2f50 <gpio_nrfx_manage_callback+0xa0>)
    2ec8:	f005 fac9 	bl	845e <printk>
    2ecc:	481e      	ldr	r0, [pc, #120]	; (2f48 <gpio_nrfx_manage_callback+0x98>)
    2ece:	2124      	movs	r1, #36	; 0x24
    2ed0:	f005 f9ee 	bl	82b0 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    2ed4:	6863      	ldr	r3, [r4, #4]
    2ed6:	b963      	cbnz	r3, 2ef2 <gpio_nrfx_manage_callback+0x42>
    2ed8:	491e      	ldr	r1, [pc, #120]	; (2f54 <gpio_nrfx_manage_callback+0xa4>)
    2eda:	4a1b      	ldr	r2, [pc, #108]	; (2f48 <gpio_nrfx_manage_callback+0x98>)
    2edc:	481b      	ldr	r0, [pc, #108]	; (2f4c <gpio_nrfx_manage_callback+0x9c>)
    2ede:	2325      	movs	r3, #37	; 0x25
    2ee0:	f005 fabd 	bl	845e <printk>
    2ee4:	481c      	ldr	r0, [pc, #112]	; (2f58 <gpio_nrfx_manage_callback+0xa8>)
    2ee6:	f005 faba 	bl	845e <printk>
    2eea:	4817      	ldr	r0, [pc, #92]	; (2f48 <gpio_nrfx_manage_callback+0x98>)
    2eec:	2125      	movs	r1, #37	; 0x25
    2eee:	f005 f9df 	bl	82b0 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
    2ef2:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    2ef4:	b15b      	cbz	r3, 2f0e <gpio_nrfx_manage_callback+0x5e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    2ef6:	2200      	movs	r2, #0
    2ef8:	429c      	cmp	r4, r3
    2efa:	d113      	bne.n	2f24 <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
    2efc:	6823      	ldr	r3, [r4, #0]
    2efe:	b95a      	cbnz	r2, 2f18 <gpio_nrfx_manage_callback+0x68>
    2f00:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
    2f02:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    2f04:	4294      	cmp	r4, r2
    2f06:	d100      	bne.n	2f0a <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
    2f08:	60ab      	str	r3, [r5, #8]
	parent->next = child;
    2f0a:	2300      	movs	r3, #0
    2f0c:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    2f0e:	b976      	cbnz	r6, 2f2e <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    2f10:	2000      	movs	r0, #0
				     callback, set);
}
    2f12:	bd70      	pop	{r4, r5, r6, pc}
    2f14:	460b      	mov	r3, r1
    2f16:	e7ef      	b.n	2ef8 <gpio_nrfx_manage_callback+0x48>
    2f18:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    2f1a:	68ab      	ldr	r3, [r5, #8]
    2f1c:	429c      	cmp	r4, r3
	list->tail = node;
    2f1e:	bf08      	it	eq
    2f20:	60aa      	streq	r2, [r5, #8]
}
    2f22:	e7f2      	b.n	2f0a <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2f24:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    2f26:	461a      	mov	r2, r3
    2f28:	2900      	cmp	r1, #0
    2f2a:	d1f3      	bne.n	2f14 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
    2f2c:	b13e      	cbz	r6, 2f3e <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
    2f2e:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
    2f30:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    2f32:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
    2f34:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    2f36:	2800      	cmp	r0, #0
    2f38:	d1ea      	bne.n	2f10 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    2f3a:	60ac      	str	r4, [r5, #8]
}
    2f3c:	e7e9      	b.n	2f12 <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
    2f3e:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    2f42:	e7e6      	b.n	2f12 <gpio_nrfx_manage_callback+0x62>
    2f44:	00009a8f 	.word	0x00009a8f
    2f48:	00009a62 	.word	0x00009a62
    2f4c:	00009190 	.word	0x00009190
    2f50:	00009a98 	.word	0x00009a98
    2f54:	00009aa7 	.word	0x00009aa7
    2f58:	00009ab9 	.word	0x00009ab9

00002f5c <nrfx_gpio_handler>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2f5c:	0943      	lsrs	r3, r0, #5
}

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
    2f5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2f62:	d003      	beq.n	2f6c <nrfx_gpio_handler+0x10>
    2f64:	2b01      	cmp	r3, #1
    2f66:	d036      	beq.n	2fd6 <nrfx_gpio_handler+0x7a>

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
}
    2f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2f6c:	4f1b      	ldr	r7, [pc, #108]	; (2fdc <nrfx_gpio_handler+0x80>)
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2f6e:	693b      	ldr	r3, [r7, #16]
    2f70:	685c      	ldr	r4, [r3, #4]
    2f72:	2c00      	cmp	r4, #0
    2f74:	d0f8      	beq.n	2f68 <nrfx_gpio_handler+0xc>
    2f76:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
    2f78:	f8df 806c 	ldr.w	r8, [pc, #108]	; 2fe8 <nrfx_gpio_handler+0x8c>
    2f7c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 2fec <nrfx_gpio_handler+0x90>
    2f80:	f8df a06c 	ldr.w	sl, [pc, #108]	; 2ff0 <nrfx_gpio_handler+0x94>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    2f84:	f000 001f 	and.w	r0, r0, #31
	gpio_fire_callbacks(list, port, BIT(pin));
    2f88:	2601      	movs	r6, #1
    2f8a:	2d00      	cmp	r5, #0
    2f8c:	fa06 f600 	lsl.w	r6, r6, r0
	return node->next;
    2f90:	bf38      	it	cc
    2f92:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
    2f94:	68a3      	ldr	r3, [r4, #8]
    2f96:	421e      	tst	r6, r3
    2f98:	d014      	beq.n	2fc4 <nrfx_gpio_handler+0x68>
			__ASSERT(cb->handler, "No callback handler!");
    2f9a:	6863      	ldr	r3, [r4, #4]
    2f9c:	b963      	cbnz	r3, 2fb8 <nrfx_gpio_handler+0x5c>
    2f9e:	4649      	mov	r1, r9
    2fa0:	2345      	movs	r3, #69	; 0x45
    2fa2:	4642      	mov	r2, r8
    2fa4:	4650      	mov	r0, sl
    2fa6:	f005 fa5a 	bl	845e <printk>
    2faa:	480d      	ldr	r0, [pc, #52]	; (2fe0 <nrfx_gpio_handler+0x84>)
    2fac:	f005 fa57 	bl	845e <printk>
    2fb0:	2145      	movs	r1, #69	; 0x45
    2fb2:	4640      	mov	r0, r8
    2fb4:	f005 f97c 	bl	82b0 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
    2fb8:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    2fbc:	4621      	mov	r1, r4
    2fbe:	4032      	ands	r2, r6
    2fc0:	4638      	mov	r0, r7
    2fc2:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2fc4:	2d00      	cmp	r5, #0
    2fc6:	d0cf      	beq.n	2f68 <nrfx_gpio_handler+0xc>
    2fc8:	682b      	ldr	r3, [r5, #0]
    2fca:	2b00      	cmp	r3, #0
    2fcc:	bf38      	it	cc
    2fce:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2fd0:	462c      	mov	r4, r5
    2fd2:	461d      	mov	r5, r3
    2fd4:	e7de      	b.n	2f94 <nrfx_gpio_handler+0x38>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2fd6:	4f03      	ldr	r7, [pc, #12]	; (2fe4 <nrfx_gpio_handler+0x88>)
    2fd8:	e7c9      	b.n	2f6e <nrfx_gpio_handler+0x12>
    2fda:	bf00      	nop
    2fdc:	00008c84 	.word	0x00008c84
    2fe0:	00009ab9 	.word	0x00009ab9
    2fe4:	00008c9c 	.word	0x00008c9c
    2fe8:	00009a62 	.word	0x00009a62
    2fec:	00009ad0 	.word	0x00009ad0
    2ff0:	00009190 	.word	0x00009190

00002ff4 <gpio_nrfx_pin_interrupt_configure>:
{
    2ff4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2ff6:	6840      	ldr	r0, [r0, #4]
    2ff8:	7b05      	ldrb	r5, [r0, #12]
    2ffa:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
    2ffe:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    3002:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    3006:	f04f 0500 	mov.w	r5, #0
    300a:	d104      	bne.n	3016 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    300c:	4620      	mov	r0, r4
    300e:	f001 fa97 	bl	4540 <nrfx_gpiote_trigger_disable>
	return 0;
    3012:	2000      	movs	r0, #0
    3014:	e054      	b.n	30c0 <gpio_nrfx_pin_interrupt_configure+0xcc>
	if (mode == GPIO_INT_MODE_LEVEL) {
    3016:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
    301a:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    301e:	d151      	bne.n	30c4 <gpio_nrfx_pin_interrupt_configure+0xd0>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    3020:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    3024:	bf0c      	ite	eq
    3026:	2304      	moveq	r3, #4
    3028:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    302a:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    302e:	6883      	ldr	r3, [r0, #8]
    3030:	fa23 f101 	lsr.w	r1, r3, r1
    3034:	f011 0101 	ands.w	r1, r1, #1
    3038:	d155      	bne.n	30e6 <gpio_nrfx_pin_interrupt_configure+0xf2>
    303a:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    303e:	d152      	bne.n	30e6 <gpio_nrfx_pin_interrupt_configure+0xf2>
    switch (port)
    3040:	0966      	lsrs	r6, r4, #5
    3042:	d04a      	beq.n	30da <gpio_nrfx_pin_interrupt_configure+0xe6>
            mask = P1_FEATURE_PINS_PRESENT;
    3044:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3048:	2e01      	cmp	r6, #1
    304a:	bf08      	it	eq
    304c:	4619      	moveq	r1, r3
    pin_number &= 0x1F;
    304e:	f004 051f 	and.w	r5, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    3052:	40e9      	lsrs	r1, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3054:	07ca      	lsls	r2, r1, #31
    3056:	d40b      	bmi.n	3070 <gpio_nrfx_pin_interrupt_configure+0x7c>
    3058:	492b      	ldr	r1, [pc, #172]	; (3108 <gpio_nrfx_pin_interrupt_configure+0x114>)
    305a:	482c      	ldr	r0, [pc, #176]	; (310c <gpio_nrfx_pin_interrupt_configure+0x118>)
    305c:	4a2c      	ldr	r2, [pc, #176]	; (3110 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    305e:	f240 2329 	movw	r3, #553	; 0x229
    3062:	f005 f9fc 	bl	845e <printk>
    3066:	482a      	ldr	r0, [pc, #168]	; (3110 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    3068:	f240 2129 	movw	r1, #553	; 0x229
    306c:	f005 f920 	bl	82b0 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3070:	b16e      	cbz	r6, 308e <gpio_nrfx_pin_interrupt_configure+0x9a>
    3072:	2e01      	cmp	r6, #1
    3074:	d034      	beq.n	30e0 <gpio_nrfx_pin_interrupt_configure+0xec>
            NRFX_ASSERT(0);
    3076:	4927      	ldr	r1, [pc, #156]	; (3114 <gpio_nrfx_pin_interrupt_configure+0x120>)
    3078:	4824      	ldr	r0, [pc, #144]	; (310c <gpio_nrfx_pin_interrupt_configure+0x118>)
    307a:	4a25      	ldr	r2, [pc, #148]	; (3110 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    307c:	f240 232e 	movw	r3, #558	; 0x22e
    3080:	f005 f9ed 	bl	845e <printk>
    3084:	4822      	ldr	r0, [pc, #136]	; (3110 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    3086:	f240 212e 	movw	r1, #558	; 0x22e
    308a:	f005 f911 	bl	82b0 <assert_post_action>
        case 0: return NRF_P0;
    308e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    3092:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    3096:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    309a:	07db      	lsls	r3, r3, #31
    309c:	d423      	bmi.n	30e6 <gpio_nrfx_pin_interrupt_configure+0xf2>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    309e:	f10d 0507 	add.w	r5, sp, #7
    30a2:	4629      	mov	r1, r5
    30a4:	4620      	mov	r0, r4
    30a6:	f001 f975 	bl	4394 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    30aa:	4b1b      	ldr	r3, [pc, #108]	; (3118 <gpio_nrfx_pin_interrupt_configure+0x124>)
    30ac:	4298      	cmp	r0, r3
    30ae:	d119      	bne.n	30e4 <gpio_nrfx_pin_interrupt_configure+0xf0>
			err = nrfx_gpiote_channel_alloc(&ch);
    30b0:	4628      	mov	r0, r5
    30b2:	f001 f9cf 	bl	4454 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    30b6:	4b19      	ldr	r3, [pc, #100]	; (311c <gpio_nrfx_pin_interrupt_configure+0x128>)
    30b8:	4298      	cmp	r0, r3
    30ba:	d013      	beq.n	30e4 <gpio_nrfx_pin_interrupt_configure+0xf0>
				return -ENOMEM;
    30bc:	f06f 000b 	mvn.w	r0, #11
}
    30c0:	b004      	add	sp, #16
    30c2:	bd70      	pop	{r4, r5, r6, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    30c4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    30c8:	d005      	beq.n	30d6 <gpio_nrfx_pin_interrupt_configure+0xe2>
    30ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    30ce:	bf0c      	ite	eq
    30d0:	2302      	moveq	r3, #2
    30d2:	2301      	movne	r3, #1
    30d4:	e7a9      	b.n	302a <gpio_nrfx_pin_interrupt_configure+0x36>
    30d6:	2303      	movs	r3, #3
    30d8:	e7a7      	b.n	302a <gpio_nrfx_pin_interrupt_configure+0x36>
            mask = P0_FEATURE_PINS_PRESENT;
    30da:	f04f 31ff 	mov.w	r1, #4294967295
    30de:	e7b6      	b.n	304e <gpio_nrfx_pin_interrupt_configure+0x5a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    30e0:	4b0f      	ldr	r3, [pc, #60]	; (3120 <gpio_nrfx_pin_interrupt_configure+0x12c>)
    30e2:	e7d6      	b.n	3092 <gpio_nrfx_pin_interrupt_configure+0x9e>
		trigger_config.p_in_channel = &ch;
    30e4:	9503      	str	r5, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    30e6:	2300      	movs	r3, #0
    30e8:	4619      	mov	r1, r3
    30ea:	aa02      	add	r2, sp, #8
    30ec:	4620      	mov	r0, r4
    30ee:	f001 f833 	bl	4158 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    30f2:	4b0a      	ldr	r3, [pc, #40]	; (311c <gpio_nrfx_pin_interrupt_configure+0x128>)
    30f4:	4298      	cmp	r0, r3
    30f6:	d104      	bne.n	3102 <gpio_nrfx_pin_interrupt_configure+0x10e>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    30f8:	2101      	movs	r1, #1
    30fa:	4620      	mov	r0, r4
    30fc:	f001 f9b0 	bl	4460 <nrfx_gpiote_trigger_enable>
    3100:	e787      	b.n	3012 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EIO;
    3102:	f06f 0004 	mvn.w	r0, #4
    3106:	e7db      	b.n	30c0 <gpio_nrfx_pin_interrupt_configure+0xcc>
    3108:	00009b0f 	.word	0x00009b0f
    310c:	00009190 	.word	0x00009190
    3110:	00009adc 	.word	0x00009adc
    3114:	00009cef 	.word	0x00009cef
    3118:	0bad0004 	.word	0x0bad0004
    311c:	0bad0000 	.word	0x0bad0000
    3120:	50000300 	.word	0x50000300

00003124 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    3124:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    3126:	f001 f985 	bl	4434 <nrfx_gpiote_is_init>
    312a:	4604      	mov	r4, r0
    312c:	b968      	cbnz	r0, 314a <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    312e:	f001 f959 	bl	43e4 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    3132:	4b08      	ldr	r3, [pc, #32]	; (3154 <gpio_nrfx_init+0x30>)
    3134:	4298      	cmp	r0, r3
    3136:	d10a      	bne.n	314e <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    3138:	4807      	ldr	r0, [pc, #28]	; (3158 <gpio_nrfx_init+0x34>)
    313a:	4621      	mov	r1, r4
    313c:	f001 f924 	bl	4388 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    3140:	4622      	mov	r2, r4
    3142:	2105      	movs	r1, #5
    3144:	2006      	movs	r0, #6
    3146:	f7fe fe07 	bl	1d58 <z_arm_irq_priority_set>
		return 0;
    314a:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    314c:	bd10      	pop	{r4, pc}
		return -EIO;
    314e:	f06f 0004 	mvn.w	r0, #4
    3152:	e7fb      	b.n	314c <gpio_nrfx_init+0x28>
    3154:	0bad0000 	.word	0x0bad0000
    3158:	00002f5d 	.word	0x00002f5d

0000315c <gpio_nrfx_pin_configure>:
{
    315c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    3160:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3162:	7b3b      	ldrb	r3, [r7, #12]
    3164:	f001 051f 	and.w	r5, r1, #31
{
    3168:	b085      	sub	sp, #20
    316a:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    316c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    3170:	4614      	mov	r4, r2
    3172:	b9ca      	cbnz	r2, 31a8 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    3174:	a902      	add	r1, sp, #8
    3176:	4628      	mov	r0, r5
    3178:	f001 f90c 	bl	4394 <nrfx_gpiote_channel_get>
    317c:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    317e:	4628      	mov	r0, r5
    3180:	f001 fa00 	bl	4584 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    3184:	4b48      	ldr	r3, [pc, #288]	; (32a8 <gpio_nrfx_pin_configure+0x14c>)
    3186:	4298      	cmp	r0, r3
    3188:	d004      	beq.n	3194 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    318a:	f06f 0004 	mvn.w	r0, #4
}
    318e:	b005      	add	sp, #20
    3190:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    3194:	4284      	cmp	r4, r0
    3196:	d105      	bne.n	31a4 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    3198:	f89d 0008 	ldrb.w	r0, [sp, #8]
    319c:	f001 f954 	bl	4448 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    31a0:	42a0      	cmp	r0, r4
    31a2:	d1f2      	bne.n	318a <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    31a4:	2000      	movs	r0, #0
    31a6:	e7f2      	b.n	318e <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    31a8:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    31ac:	f10d 0103 	add.w	r1, sp, #3
    31b0:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    31b2:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    31b6:	f001 f8ed 	bl	4394 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    31ba:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    31bc:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    31be:	aa02      	add	r2, sp, #8
    31c0:	4649      	mov	r1, r9
    31c2:	4628      	mov	r0, r5
    31c4:	f000 ffc8 	bl	4158 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    31c8:	4b37      	ldr	r3, [pc, #220]	; (32a8 <gpio_nrfx_pin_configure+0x14c>)
    31ca:	4298      	cmp	r0, r3
    31cc:	d002      	beq.n	31d4 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    31ce:	f06f 0015 	mvn.w	r0, #21
    31d2:	e7dc      	b.n	318e <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    31d4:	4580      	cmp	r8, r0
    31d6:	d103      	bne.n	31e0 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    31d8:	f89d 0003 	ldrb.w	r0, [sp, #3]
    31dc:	f001 f934 	bl	4448 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    31e0:	05a3      	lsls	r3, r4, #22
    31e2:	d54e      	bpl.n	3282 <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    31e4:	4b31      	ldr	r3, [pc, #196]	; (32ac <gpio_nrfx_pin_configure+0x150>)
    31e6:	4a32      	ldr	r2, [pc, #200]	; (32b0 <gpio_nrfx_pin_configure+0x154>)
    31e8:	4023      	ands	r3, r4
    31ea:	4293      	cmp	r3, r2
    31ec:	d03a      	beq.n	3264 <gpio_nrfx_pin_configure+0x108>
    31ee:	d80c      	bhi.n	320a <gpio_nrfx_pin_configure+0xae>
    31f0:	2b06      	cmp	r3, #6
    31f2:	d014      	beq.n	321e <gpio_nrfx_pin_configure+0xc2>
    31f4:	d804      	bhi.n	3200 <gpio_nrfx_pin_configure+0xa4>
    31f6:	b193      	cbz	r3, 321e <gpio_nrfx_pin_configure+0xc2>
    31f8:	2b02      	cmp	r3, #2
    31fa:	d1e8      	bne.n	31ce <gpio_nrfx_pin_configure+0x72>
    31fc:	2304      	movs	r3, #4
    31fe:	e00e      	b.n	321e <gpio_nrfx_pin_configure+0xc2>
    3200:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3204:	d1e3      	bne.n	31ce <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    3206:	2301      	movs	r3, #1
    3208:	e009      	b.n	321e <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    320a:	4a2a      	ldr	r2, [pc, #168]	; (32b4 <gpio_nrfx_pin_configure+0x158>)
    320c:	4293      	cmp	r3, r2
    320e:	d02b      	beq.n	3268 <gpio_nrfx_pin_configure+0x10c>
    3210:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    3214:	d02a      	beq.n	326c <gpio_nrfx_pin_configure+0x110>
    3216:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    321a:	d1d8      	bne.n	31ce <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    321c:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    321e:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    3222:	f484 7380 	eor.w	r3, r4, #256	; 0x100
    3226:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
    322a:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    322c:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    3230:	bf54      	ite	pl
    3232:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    3236:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    3238:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
    323a:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    323e:	d517      	bpl.n	3270 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    3240:	687b      	ldr	r3, [r7, #4]
    3242:	2101      	movs	r1, #1
    3244:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    3248:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    324c:	2200      	movs	r2, #0
    324e:	a901      	add	r1, sp, #4
    3250:	4628      	mov	r0, r5
    3252:	f001 f829 	bl	42a8 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3256:	4b14      	ldr	r3, [pc, #80]	; (32a8 <gpio_nrfx_pin_configure+0x14c>)
    3258:	4298      	cmp	r0, r3
    325a:	bf14      	ite	ne
    325c:	f06f 0015 	mvnne.w	r0, #21
    3260:	2000      	moveq	r0, #0
    3262:	e794      	b.n	318e <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    3264:	2307      	movs	r3, #7
    3266:	e7da      	b.n	321e <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
    3268:	2305      	movs	r3, #5
    326a:	e7d8      	b.n	321e <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
    326c:	2303      	movs	r3, #3
    326e:	e7d6      	b.n	321e <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    3270:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    3272:	bf41      	itttt	mi
    3274:	687b      	ldrmi	r3, [r7, #4]
    3276:	2101      	movmi	r1, #1
    3278:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    327c:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    3280:	e7e4      	b.n	324c <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
    3282:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3284:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    3288:	bf54      	ite	pl
    328a:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    328e:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3290:	461a      	mov	r2, r3
    3292:	a901      	add	r1, sp, #4
    3294:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    3296:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    329a:	f000 ff5d 	bl	4158 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    329e:	4b02      	ldr	r3, [pc, #8]	; (32a8 <gpio_nrfx_pin_configure+0x14c>)
    32a0:	4298      	cmp	r0, r3
    32a2:	f43f af7f 	beq.w	31a4 <gpio_nrfx_pin_configure+0x48>
    32a6:	e792      	b.n	31ce <gpio_nrfx_pin_configure+0x72>
    32a8:	0bad0000 	.word	0x0bad0000
    32ac:	00f00006 	.word	0x00f00006
    32b0:	00100006 	.word	0x00100006
    32b4:	00400002 	.word	0x00400002

000032b8 <pwm_nrfx_get_cycles_per_sec>:
{
	/* TODO: Since this function might be removed, we will always return
	 * 16MHz from this function and handle the conversion with prescaler,
	 * etc, in the pin set function. See issue #6958.
	 */
	*cycles = 16ul * 1000ul * 1000ul;
    32b8:	4802      	ldr	r0, [pc, #8]	; (32c4 <pwm_nrfx_get_cycles_per_sec+0xc>)
    32ba:	2100      	movs	r1, #0
    32bc:	e9c2 0100 	strd	r0, r1, [r2]

	return 0;
}
    32c0:	2000      	movs	r0, #0
    32c2:	4770      	bx	lr
    32c4:	00f42400 	.word	0x00f42400

000032c8 <pwm_nrfx_init>:
	.pin_set = pwm_nrfx_pin_set,
	.get_cycles_per_sec = pwm_nrfx_get_cycles_per_sec,
};

static int pwm_nrfx_init(const struct device *dev)
{
    32c8:	4602      	mov	r2, r0
	const struct pwm_nrfx_config *config = dev->config;
    32ca:	6840      	ldr	r0, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;

	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
    32cc:	6912      	ldr	r2, [r2, #16]
{
    32ce:	b538      	push	{r3, r4, r5, lr}
    32d0:	f100 0308 	add.w	r3, r0, #8
    32d4:	3204      	adds	r2, #4
    32d6:	f100 040c 	add.w	r4, r0, #12
    32da:	4619      	mov	r1, r3
		bool inverted = config->initial_config.output_pins[i] & NRFX_PWM_PIN_INVERTED;
		uint16_t value = (inverted)?(PWM_NRFX_CH_VALUE_INVERTED):(PWM_NRFX_CH_VALUE_NORMAL);
    32dc:	f913 5b01 	ldrsb.w	r5, [r3], #1
    32e0:	2d00      	cmp	r5, #0
    32e2:	bfb4      	ite	lt
    32e4:	2500      	movlt	r5, #0
    32e6:	f44f 4500 	movge.w	r5, #32768	; 0x8000
	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
    32ea:	42a3      	cmp	r3, r4

		data->current[i] = value;
    32ec:	f822 5b02 	strh.w	r5, [r2], #2
	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
    32f0:	d1f4      	bne.n	32dc <pwm_nrfx_init+0x14>
	};

	nrfx_err_t result = nrfx_pwm_init(&config->pwm,
    32f2:	2300      	movs	r3, #0
    32f4:	461a      	mov	r2, r3
    32f6:	f001 fb07 	bl	4908 <nrfx_pwm_init>
					  &config->initial_config,
					  NULL,
					  NULL);
	if (result != NRFX_SUCCESS) {
    32fa:	4b03      	ldr	r3, [pc, #12]	; (3308 <pwm_nrfx_init+0x40>)
		LOG_ERR("Failed to initialize device: %s", dev->name);
		return -EBUSY;
    32fc:	4298      	cmp	r0, r3
	}

	return 0;
}
    32fe:	bf14      	ite	ne
    3300:	f06f 000f 	mvnne.w	r0, #15
    3304:	2000      	moveq	r0, #0
    3306:	bd38      	pop	{r3, r4, r5, pc}
    3308:	0bad0000 	.word	0x0bad0000

0000330c <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    330c:	6802      	ldr	r2, [r0, #0]
    switch (port)
    330e:	0953      	lsrs	r3, r2, #5
{
    3310:	b510      	push	{r4, lr}
    3312:	4604      	mov	r4, r0
    switch (port)
    3314:	d02c      	beq.n	3370 <nrf_gpio_pin_port_decode+0x64>
    3316:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    3318:	f64f 73ff 	movw	r3, #65535	; 0xffff
    331c:	bf18      	it	ne
    331e:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    3320:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    3324:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3326:	07db      	lsls	r3, r3, #31
    3328:	d40b      	bmi.n	3342 <nrf_gpio_pin_port_decode+0x36>
    332a:	4914      	ldr	r1, [pc, #80]	; (337c <nrf_gpio_pin_port_decode+0x70>)
    332c:	4814      	ldr	r0, [pc, #80]	; (3380 <nrf_gpio_pin_port_decode+0x74>)
    332e:	4a15      	ldr	r2, [pc, #84]	; (3384 <nrf_gpio_pin_port_decode+0x78>)
    3330:	f240 2329 	movw	r3, #553	; 0x229
    3334:	f005 f893 	bl	845e <printk>
    3338:	4812      	ldr	r0, [pc, #72]	; (3384 <nrf_gpio_pin_port_decode+0x78>)
    333a:	f240 2129 	movw	r1, #553	; 0x229
    333e:	f004 ffb7 	bl	82b0 <assert_post_action>
    uint32_t pin_number = *p_pin;
    3342:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    3344:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3348:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    334a:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    334c:	d00d      	beq.n	336a <nrf_gpio_pin_port_decode+0x5e>
    334e:	2b01      	cmp	r3, #1
    3350:	d011      	beq.n	3376 <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    3352:	490d      	ldr	r1, [pc, #52]	; (3388 <nrf_gpio_pin_port_decode+0x7c>)
    3354:	480a      	ldr	r0, [pc, #40]	; (3380 <nrf_gpio_pin_port_decode+0x74>)
    3356:	4a0b      	ldr	r2, [pc, #44]	; (3384 <nrf_gpio_pin_port_decode+0x78>)
    3358:	f240 232e 	movw	r3, #558	; 0x22e
    335c:	f005 f87f 	bl	845e <printk>
    3360:	4808      	ldr	r0, [pc, #32]	; (3384 <nrf_gpio_pin_port_decode+0x78>)
    3362:	f240 212e 	movw	r1, #558	; 0x22e
    3366:	f004 ffa3 	bl	82b0 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    336a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    336e:	bd10      	pop	{r4, pc}
    switch (port)
    3370:	f04f 33ff 	mov.w	r3, #4294967295
    3374:	e7d4      	b.n	3320 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    3376:	4805      	ldr	r0, [pc, #20]	; (338c <nrf_gpio_pin_port_decode+0x80>)
    3378:	e7f9      	b.n	336e <nrf_gpio_pin_port_decode+0x62>
    337a:	bf00      	nop
    337c:	00009b0f 	.word	0x00009b0f
    3380:	00009190 	.word	0x00009190
    3384:	00009adc 	.word	0x00009adc
    3388:	00009cef 	.word	0x00009cef
    338c:	50000300 	.word	0x50000300

00003390 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    3390:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    3392:	794b      	ldrb	r3, [r1, #5]
    3394:	2b01      	cmp	r3, #1
    3396:	d026      	beq.n	33e6 <uarte_nrfx_configure+0x56>
    3398:	2b03      	cmp	r3, #3
    339a:	d121      	bne.n	33e0 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    339c:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    339e:	798b      	ldrb	r3, [r1, #6]
    33a0:	2b03      	cmp	r3, #3
    33a2:	d11d      	bne.n	33e0 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    33a4:	79cc      	ldrb	r4, [r1, #7]
    33a6:	b10c      	cbz	r4, 33ac <uarte_nrfx_configure+0x1c>
    33a8:	2c01      	cmp	r4, #1
    33aa:	d119      	bne.n	33e0 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    33ac:	790a      	ldrb	r2, [r1, #4]
    33ae:	b112      	cbz	r2, 33b6 <uarte_nrfx_configure+0x26>
    33b0:	2a02      	cmp	r2, #2
    33b2:	d115      	bne.n	33e0 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    33b4:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    33b6:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    33b8:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    33ba:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    33be:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    33c0:	d065      	beq.n	348e <uarte_nrfx_configure+0xfe>
    33c2:	d82d      	bhi.n	3420 <uarte_nrfx_configure+0x90>
    33c4:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    33c8:	d064      	beq.n	3494 <uarte_nrfx_configure+0x104>
    33ca:	d816      	bhi.n	33fa <uarte_nrfx_configure+0x6a>
    33cc:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    33d0:	d062      	beq.n	3498 <uarte_nrfx_configure+0x108>
    33d2:	d80a      	bhi.n	33ea <uarte_nrfx_configure+0x5a>
    33d4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    33d8:	d061      	beq.n	349e <uarte_nrfx_configure+0x10e>
    33da:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    33de:	d061      	beq.n	34a4 <uarte_nrfx_configure+0x114>
    33e0:	f06f 0085 	mvn.w	r0, #133	; 0x85
    33e4:	e052      	b.n	348c <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    33e6:	2600      	movs	r6, #0
    33e8:	e7d9      	b.n	339e <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    33ea:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    33ee:	d05c      	beq.n	34aa <uarte_nrfx_configure+0x11a>
    33f0:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    33f4:	d1f4      	bne.n	33e0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    33f6:	4b37      	ldr	r3, [pc, #220]	; (34d4 <uarte_nrfx_configure+0x144>)
    33f8:	e03c      	b.n	3474 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    33fa:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    33fe:	d057      	beq.n	34b0 <uarte_nrfx_configure+0x120>
    3400:	d807      	bhi.n	3412 <uarte_nrfx_configure+0x82>
    3402:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    3406:	d055      	beq.n	34b4 <uarte_nrfx_configure+0x124>
    3408:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    340c:	d1e8      	bne.n	33e0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    340e:	4b32      	ldr	r3, [pc, #200]	; (34d8 <uarte_nrfx_configure+0x148>)
    3410:	e030      	b.n	3474 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3412:	f647 2712 	movw	r7, #31250	; 0x7a12
    3416:	42bb      	cmp	r3, r7
    3418:	d1e2      	bne.n	33e0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    341a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    341e:	e029      	b.n	3474 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3420:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    3424:	d048      	beq.n	34b8 <uarte_nrfx_configure+0x128>
    3426:	d813      	bhi.n	3450 <uarte_nrfx_configure+0xc0>
    3428:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    342c:	d047      	beq.n	34be <uarte_nrfx_configure+0x12e>
    342e:	d809      	bhi.n	3444 <uarte_nrfx_configure+0xb4>
    3430:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    3434:	42bb      	cmp	r3, r7
    3436:	d044      	beq.n	34c2 <uarte_nrfx_configure+0x132>
    3438:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    343c:	d1d0      	bne.n	33e0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    343e:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    3442:	e017      	b.n	3474 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3444:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    3448:	d1ca      	bne.n	33e0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    344a:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    344e:	e011      	b.n	3474 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3450:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    3454:	d038      	beq.n	34c8 <uarte_nrfx_configure+0x138>
    3456:	d808      	bhi.n	346a <uarte_nrfx_configure+0xda>
    3458:	4f20      	ldr	r7, [pc, #128]	; (34dc <uarte_nrfx_configure+0x14c>)
    345a:	42bb      	cmp	r3, r7
    345c:	d037      	beq.n	34ce <uarte_nrfx_configure+0x13e>
    345e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    3462:	d1bd      	bne.n	33e0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    3464:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    3468:	e004      	b.n	3474 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    346a:	4f1d      	ldr	r7, [pc, #116]	; (34e0 <uarte_nrfx_configure+0x150>)
    346c:	42bb      	cmp	r3, r7
    346e:	d1b7      	bne.n	33e0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    3470:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    3474:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    3478:	6903      	ldr	r3, [r0, #16]
    347a:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    347c:	4334      	orrs	r4, r6
    347e:	4322      	orrs	r2, r4
    3480:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    3482:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    3486:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    348a:	2000      	movs	r0, #0
}
    348c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    348e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    3492:	e7ef      	b.n	3474 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    3494:	4b13      	ldr	r3, [pc, #76]	; (34e4 <uarte_nrfx_configure+0x154>)
    3496:	e7ed      	b.n	3474 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    3498:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    349c:	e7ea      	b.n	3474 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    349e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    34a2:	e7e7      	b.n	3474 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    34a4:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    34a8:	e7e4      	b.n	3474 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    34aa:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    34ae:	e7e1      	b.n	3474 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    34b0:	4b0d      	ldr	r3, [pc, #52]	; (34e8 <uarte_nrfx_configure+0x158>)
    34b2:	e7df      	b.n	3474 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    34b4:	4b0d      	ldr	r3, [pc, #52]	; (34ec <uarte_nrfx_configure+0x15c>)
    34b6:	e7dd      	b.n	3474 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    34b8:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    34bc:	e7da      	b.n	3474 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    34be:	4b0c      	ldr	r3, [pc, #48]	; (34f0 <uarte_nrfx_configure+0x160>)
    34c0:	e7d8      	b.n	3474 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    34c2:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    34c6:	e7d5      	b.n	3474 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    34c8:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    34cc:	e7d2      	b.n	3474 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    34ce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    34d2:	e7cf      	b.n	3474 <uarte_nrfx_configure+0xe4>
    34d4:	0013b000 	.word	0x0013b000
    34d8:	004ea000 	.word	0x004ea000
    34dc:	0003d090 	.word	0x0003d090
    34e0:	000f4240 	.word	0x000f4240
    34e4:	00275000 	.word	0x00275000
    34e8:	0075c000 	.word	0x0075c000
    34ec:	003af000 	.word	0x003af000
    34f0:	013a9000 	.word	0x013a9000

000034f4 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    34f4:	6802      	ldr	r2, [r0, #0]
    switch (port)
    34f6:	0953      	lsrs	r3, r2, #5
{
    34f8:	b510      	push	{r4, lr}
    34fa:	4604      	mov	r4, r0
    switch (port)
    34fc:	d02c      	beq.n	3558 <nrf_gpio_pin_port_decode+0x64>
    34fe:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    3500:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3504:	bf18      	it	ne
    3506:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    3508:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    350c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    350e:	07db      	lsls	r3, r3, #31
    3510:	d40b      	bmi.n	352a <nrf_gpio_pin_port_decode+0x36>
    3512:	4914      	ldr	r1, [pc, #80]	; (3564 <nrf_gpio_pin_port_decode+0x70>)
    3514:	4814      	ldr	r0, [pc, #80]	; (3568 <nrf_gpio_pin_port_decode+0x74>)
    3516:	4a15      	ldr	r2, [pc, #84]	; (356c <nrf_gpio_pin_port_decode+0x78>)
    3518:	f240 2329 	movw	r3, #553	; 0x229
    351c:	f004 ff9f 	bl	845e <printk>
    3520:	4812      	ldr	r0, [pc, #72]	; (356c <nrf_gpio_pin_port_decode+0x78>)
    3522:	f240 2129 	movw	r1, #553	; 0x229
    3526:	f004 fec3 	bl	82b0 <assert_post_action>
    uint32_t pin_number = *p_pin;
    352a:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    352c:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3530:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    3532:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3534:	d00d      	beq.n	3552 <nrf_gpio_pin_port_decode+0x5e>
    3536:	2b01      	cmp	r3, #1
    3538:	d011      	beq.n	355e <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    353a:	490d      	ldr	r1, [pc, #52]	; (3570 <nrf_gpio_pin_port_decode+0x7c>)
    353c:	480a      	ldr	r0, [pc, #40]	; (3568 <nrf_gpio_pin_port_decode+0x74>)
    353e:	4a0b      	ldr	r2, [pc, #44]	; (356c <nrf_gpio_pin_port_decode+0x78>)
    3540:	f240 232e 	movw	r3, #558	; 0x22e
    3544:	f004 ff8b 	bl	845e <printk>
    3548:	4808      	ldr	r0, [pc, #32]	; (356c <nrf_gpio_pin_port_decode+0x78>)
    354a:	f240 212e 	movw	r1, #558	; 0x22e
    354e:	f004 feaf 	bl	82b0 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3552:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    3556:	bd10      	pop	{r4, pc}
    switch (port)
    3558:	f04f 33ff 	mov.w	r3, #4294967295
    355c:	e7d4      	b.n	3508 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    355e:	4805      	ldr	r0, [pc, #20]	; (3574 <nrf_gpio_pin_port_decode+0x80>)
    3560:	e7f9      	b.n	3556 <nrf_gpio_pin_port_decode+0x62>
    3562:	bf00      	nop
    3564:	00009b0f 	.word	0x00009b0f
    3568:	00009190 	.word	0x00009190
    356c:	00009adc 	.word	0x00009adc
    3570:	00009cef 	.word	0x00009cef
    3574:	50000300 	.word	0x50000300

00003578 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    3578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    357a:	6906      	ldr	r6, [r0, #16]
{
    357c:	4605      	mov	r5, r0
    357e:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3580:	f005 fafc 	bl	8b7c <k_is_in_isr>
    3584:	b910      	cbnz	r0, 358c <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    3586:	4b2c      	ldr	r3, [pc, #176]	; (3638 <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
    3588:	781b      	ldrb	r3, [r3, #0]
    358a:	b983      	cbnz	r3, 35ae <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    358c:	f04f 0320 	mov.w	r3, #32
    3590:	f3ef 8411 	mrs	r4, BASEPRI
    3594:	f383 8812 	msr	BASEPRI_MAX, r3
    3598:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    359c:	4628      	mov	r0, r5
    359e:	f005 f990 	bl	88c2 <is_tx_ready>
    35a2:	bb28      	cbnz	r0, 35f0 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    35a4:	f384 8811 	msr	BASEPRI, r4
    35a8:	f3bf 8f6f 	isb	sy
}
    35ac:	e7ee      	b.n	358c <uarte_nrfx_poll_out+0x14>
{
    35ae:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    35b0:	4628      	mov	r0, r5
    35b2:	f005 f986 	bl	88c2 <is_tx_ready>
    35b6:	b970      	cbnz	r0, 35d6 <uarte_nrfx_poll_out+0x5e>
    35b8:	2001      	movs	r0, #1
    35ba:	f005 f9d8 	bl	896e <nrfx_busy_wait>
    35be:	3c01      	subs	r4, #1
    35c0:	d1f6      	bne.n	35b0 <uarte_nrfx_poll_out+0x38>
    35c2:	2100      	movs	r1, #0
    35c4:	2021      	movs	r0, #33	; 0x21
    35c6:	f003 fa21 	bl	6a0c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    35ca:	e7f0      	b.n	35ae <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    35cc:	f384 8811 	msr	BASEPRI, r4
    35d0:	f3bf 8f6f 	isb	sy
}
    35d4:	e7f5      	b.n	35c2 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    35d6:	f04f 0320 	mov.w	r3, #32
    35da:	f3ef 8411 	mrs	r4, BASEPRI
    35de:	f383 8812 	msr	BASEPRI_MAX, r3
    35e2:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    35e6:	4628      	mov	r0, r5
    35e8:	f005 f96b 	bl	88c2 <is_tx_ready>
    35ec:	2800      	cmp	r0, #0
    35ee:	d0ed      	beq.n	35cc <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    35f0:	f806 7f10 	strb.w	r7, [r6, #16]!
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    35f4:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    35f6:	680b      	ldr	r3, [r1, #0]
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    35f8:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    35fa:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    35fe:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3602:	2200      	movs	r2, #0
    3604:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    3608:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    360c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    3610:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3614:	684a      	ldr	r2, [r1, #4]
    3616:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3618:	bf41      	itttt	mi
    361a:	2208      	movmi	r2, #8
    361c:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    3620:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    3624:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3628:	2201      	movs	r2, #1
    362a:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    362c:	f384 8811 	msr	BASEPRI, r4
    3630:	f3bf 8f6f 	isb	sy
	tx_start(dev, &data->char_out, 1);

	irq_unlock(key);
}
    3634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3636:	bf00      	nop
    3638:	20000ca9 	.word	0x20000ca9

0000363c <uarte_instance_init.isra.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    363c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    3640:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
    3644:	6907      	ldr	r7, [r0, #16]
	return config->uarte_regs;
    3646:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    364a:	2300      	movs	r3, #0
    364c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    3650:	6038      	str	r0, [r7, #0]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
    3652:	6845      	ldr	r5, [r0, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3654:	68eb      	ldr	r3, [r5, #12]
static int uarte_instance_init(const struct device *dev,
    3656:	4606      	mov	r6, r0
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3658:	1c58      	adds	r0, r3, #1
    365a:	d013      	beq.n	3684 <uarte_instance_init.isra.0+0x48>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    365c:	a801      	add	r0, sp, #4
    365e:	9301      	str	r3, [sp, #4]
    3660:	f7ff ff48 	bl	34f4 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3664:	9a01      	ldr	r2, [sp, #4]
    3666:	2301      	movs	r3, #1
    3668:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    366a:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    366e:	68eb      	ldr	r3, [r5, #12]
    3670:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3672:	a801      	add	r0, sp, #4
    3674:	f7ff ff3e 	bl	34f4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    3678:	9b01      	ldr	r3, [sp, #4]
    367a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    367e:	2203      	movs	r2, #3
    3680:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3684:	692b      	ldr	r3, [r5, #16]
    3686:	1c59      	adds	r1, r3, #1
    3688:	d011      	beq.n	36ae <uarte_instance_init.isra.0+0x72>
			nrf_gpio_cfg_input(cfg->rx_pin,
    368a:	7f2a      	ldrb	r2, [r5, #28]
    368c:	9301      	str	r3, [sp, #4]
    368e:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3690:	a801      	add	r0, sp, #4
    3692:	bf14      	ite	ne
    3694:	f04f 0903 	movne.w	r9, #3
    3698:	f04f 0900 	moveq.w	r9, #0
    369c:	f7ff ff2a 	bl	34f4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    36a0:	9b01      	ldr	r3, [sp, #4]
    36a2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    36a6:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    36aa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    36ae:	696b      	ldr	r3, [r5, #20]
    36b0:	1c5a      	adds	r2, r3, #1
    36b2:	d013      	beq.n	36dc <uarte_instance_init.isra.0+0xa0>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    36b4:	a801      	add	r0, sp, #4
    36b6:	9301      	str	r3, [sp, #4]
    36b8:	f7ff ff1c 	bl	34f4 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    36bc:	9a01      	ldr	r2, [sp, #4]
    36be:	2301      	movs	r3, #1
    36c0:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    36c2:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    36c6:	696b      	ldr	r3, [r5, #20]
    36c8:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    36ca:	a801      	add	r0, sp, #4
    36cc:	f7ff ff12 	bl	34f4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    36d0:	9b01      	ldr	r3, [sp, #4]
    36d2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    36d6:	2203      	movs	r2, #3
    36d8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    36dc:	69ab      	ldr	r3, [r5, #24]
    36de:	1c58      	adds	r0, r3, #1
    36e0:	d011      	beq.n	3706 <uarte_instance_init.isra.0+0xca>
			nrf_gpio_cfg_input(cfg->cts_pin,
    36e2:	7f6a      	ldrb	r2, [r5, #29]
    36e4:	9301      	str	r3, [sp, #4]
    36e6:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    36e8:	a801      	add	r0, sp, #4
    36ea:	bf14      	ite	ne
    36ec:	f04f 0903 	movne.w	r9, #3
    36f0:	f04f 0900 	moveq.w	r9, #0
    36f4:	f7ff fefe 	bl	34f4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    36f8:	9b01      	ldr	r3, [sp, #4]
    36fa:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    36fe:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    3702:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    3706:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
    370a:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
    370c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    3710:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
    3714:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
    p_reg->PSEL.RTS = pselrts;
    3718:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    371c:	6931      	ldr	r1, [r6, #16]
    p_reg->PSEL.CTS = pselcts;
    371e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    3722:	3104      	adds	r1, #4
    3724:	4630      	mov	r0, r6
    3726:	f7ff fe33 	bl	3390 <uarte_nrfx_configure>
	if (err) {
    372a:	4605      	mov	r5, r0
    372c:	2800      	cmp	r0, #0
    372e:	d146      	bne.n	37be <uarte_instance_init.isra.0+0x182>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    3730:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    3734:	0799      	lsls	r1, r3, #30
    3736:	d519      	bpl.n	376c <uarte_instance_init.isra.0+0x130>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    3738:	f107 0012 	add.w	r0, r7, #18
    373c:	f001 f820 	bl	4780 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    3740:	4b22      	ldr	r3, [pc, #136]	; (37cc <uarte_instance_init.isra.0+0x190>)
    3742:	4298      	cmp	r0, r3
    3744:	d13f      	bne.n	37c6 <uarte_instance_init.isra.0+0x18a>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    3746:	7cb8      	ldrb	r0, [r7, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    3748:	00c3      	lsls	r3, r0, #3
    374a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    374e:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    3752:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    3756:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    375a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    375e:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    3762:	4a1b      	ldr	r2, [pc, #108]	; (37d0 <uarte_instance_init.isra.0+0x194>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    3764:	2301      	movs	r3, #1
    3766:	4083      	lsls	r3, r0
    3768:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    376c:	2308      	movs	r3, #8
    376e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    3772:	f898 3008 	ldrb.w	r3, [r8, #8]
    3776:	b95b      	cbnz	r3, 3790 <uarte_instance_init.isra.0+0x154>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3778:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    377c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    3780:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    3784:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    3788:	2301      	movs	r3, #1
    378a:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    378e:	6023      	str	r3, [r4, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    3790:	f8d8 3004 	ldr.w	r3, [r8, #4]
    3794:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    3796:	bf5c      	itt	pl
    3798:	f44f 7280 	movpl.w	r2, #256	; 0x100
    379c:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    37a0:	06db      	lsls	r3, r3, #27
    37a2:	bf44      	itt	mi
    37a4:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    37a8:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    37ac:	3710      	adds	r7, #16
    p_reg->TXD.MAXCNT = length;
    37ae:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    37b0:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    37b4:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    37b8:	2301      	movs	r3, #1
    37ba:	60a3      	str	r3, [r4, #8]
    37bc:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    37be:	4628      	mov	r0, r5
    37c0:	b003      	add	sp, #12
    37c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    37c6:	f06f 0504 	mvn.w	r5, #4
    37ca:	e7f8      	b.n	37be <uarte_instance_init.isra.0+0x182>
    37cc:	0bad0000 	.word	0x0bad0000
    37d0:	4001f000 	.word	0x4001f000

000037d4 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    37d4:	4919      	ldr	r1, [pc, #100]	; (383c <sys_clock_timeout_handler+0x68>)
{
    37d6:	b570      	push	{r4, r5, r6, lr}
    37d8:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    37da:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    37de:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    37e0:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    37e4:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    37e8:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    37ea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    37ee:	f04f 0500 	mov.w	r5, #0
    37f2:	d20a      	bcs.n	380a <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    37f4:	4b12      	ldr	r3, [pc, #72]	; (3840 <sys_clock_timeout_handler+0x6c>)
    37f6:	6819      	ldr	r1, [r3, #0]
    37f8:	060a      	lsls	r2, r1, #24
    37fa:	0a0b      	lsrs	r3, r1, #8
    37fc:	1992      	adds	r2, r2, r6
    37fe:	4911      	ldr	r1, [pc, #68]	; (3844 <sys_clock_timeout_handler+0x70>)
    3800:	f143 0300 	adc.w	r3, r3, #0
    3804:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    3808:	2501      	movs	r5, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    380a:	f003 fec5 	bl	7598 <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    380e:	00a3      	lsls	r3, r4, #2
    3810:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3814:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    3818:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    381c:	42b2      	cmp	r2, r6
    381e:	d10b      	bne.n	3838 <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    3820:	b91d      	cbnz	r5, 382a <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
    3822:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    3826:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    382a:	4b07      	ldr	r3, [pc, #28]	; (3848 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    382c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    3830:	fa00 f404 	lsl.w	r4, r0, r4
    3834:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    3838:	bd70      	pop	{r4, r5, r6, pc}
    383a:	bf00      	nop
    383c:	200003f0 	.word	0x200003f0
    3840:	20000c1c 	.word	0x20000c1c
    3844:	200003d8 	.word	0x200003d8
    3848:	40011000 	.word	0x40011000

0000384c <compare_int_lock>:
{
    384c:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    384e:	2301      	movs	r3, #1
    3850:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3852:	4a11      	ldr	r2, [pc, #68]	; (3898 <compare_int_lock+0x4c>)
    3854:	f3bf 8f5b 	dmb	ish
    3858:	43dc      	mvns	r4, r3
    385a:	e852 1f00 	ldrex	r1, [r2]
    385e:	ea01 0c04 	and.w	ip, r1, r4
    3862:	e842 ce00 	strex	lr, ip, [r2]
    3866:	f1be 0f00 	cmp.w	lr, #0
    386a:	d1f6      	bne.n	385a <compare_int_lock+0xe>
    386c:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3870:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3874:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    3878:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    387c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    3880:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    3884:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3888:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
    388c:	420b      	tst	r3, r1
}
    388e:	bf14      	ite	ne
    3890:	2001      	movne	r0, #1
    3892:	2000      	moveq	r0, #0
    3894:	bd10      	pop	{r4, pc}
    3896:	bf00      	nop
    3898:	20000c18 	.word	0x20000c18

0000389c <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
    389c:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    389e:	4a12      	ldr	r2, [pc, #72]	; (38e8 <compare_int_unlock.part.0+0x4c>)
    38a0:	f3bf 8f5b 	dmb	ish
    38a4:	4083      	lsls	r3, r0
    38a6:	e852 1f00 	ldrex	r1, [r2]
    38aa:	4319      	orrs	r1, r3
    38ac:	e842 1c00 	strex	ip, r1, [r2]
    38b0:	f1bc 0f00 	cmp.w	ip, #0
    38b4:	d1f7      	bne.n	38a6 <compare_int_unlock.part.0+0xa>
    38b6:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    38ba:	4a0c      	ldr	r2, [pc, #48]	; (38ec <compare_int_unlock.part.0+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    38bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    38c0:	4083      	lsls	r3, r0
    38c2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    38c6:	4b0a      	ldr	r3, [pc, #40]	; (38f0 <compare_int_unlock.part.0+0x54>)
    38c8:	f3bf 8f5b 	dmb	ish
    38cc:	681b      	ldr	r3, [r3, #0]
    38ce:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    38d2:	fa23 f000 	lsr.w	r0, r3, r0
    38d6:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    38d8:	bf42      	ittt	mi
    38da:	4b06      	ldrmi	r3, [pc, #24]	; (38f4 <compare_int_unlock.part.0+0x58>)
    38dc:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    38e0:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    38e4:	4770      	bx	lr
    38e6:	bf00      	nop
    38e8:	20000c18 	.word	0x20000c18
    38ec:	40011000 	.word	0x40011000
    38f0:	20000c14 	.word	0x20000c14
    38f4:	e000e100 	.word	0xe000e100

000038f8 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    38f8:	4b0d      	ldr	r3, [pc, #52]	; (3930 <z_nrf_rtc_timer_read+0x38>)
    38fa:	681b      	ldr	r3, [r3, #0]
    38fc:	0a19      	lsrs	r1, r3, #8
    38fe:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    3900:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    3904:	4b0b      	ldr	r3, [pc, #44]	; (3934 <z_nrf_rtc_timer_read+0x3c>)
    3906:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    390a:	18c0      	adds	r0, r0, r3
    390c:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    3910:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3914:	d20a      	bcs.n	392c <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    3916:	4b08      	ldr	r3, [pc, #32]	; (3938 <z_nrf_rtc_timer_read+0x40>)
    3918:	e9d3 2300 	ldrd	r2, r3, [r3]
    391c:	4299      	cmp	r1, r3
    391e:	bf08      	it	eq
    3920:	4290      	cmpeq	r0, r2
    3922:	d203      	bcs.n	392c <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    3924:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    3928:	f141 0100 	adc.w	r1, r1, #0
}
    392c:	4770      	bx	lr
    392e:	bf00      	nop
    3930:	20000c1c 	.word	0x20000c1c
    3934:	40011000 	.word	0x40011000
    3938:	200003d8 	.word	0x200003d8

0000393c <compare_set>:
{
    393c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3940:	b085      	sub	sp, #20
    3942:	4616      	mov	r6, r2
    3944:	461f      	mov	r7, r3
    3946:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    3948:	f7ff ff80 	bl	384c <compare_int_lock>
    394c:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    394e:	f7ff ffd3 	bl	38f8 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    3952:	42b9      	cmp	r1, r7
    3954:	bf08      	it	eq
    3956:	42b0      	cmpeq	r0, r6
    3958:	d27f      	bcs.n	3a5a <compare_set+0x11e>
		if (target_time - curr_time > COUNTER_SPAN) {
    395a:	ebb6 0800 	subs.w	r8, r6, r0
    395e:	eb67 0901 	sbc.w	r9, r7, r1
    3962:	2300      	movs	r3, #0
    3964:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    3968:	454b      	cmp	r3, r9
    396a:	bf08      	it	eq
    396c:	4542      	cmpeq	r2, r8
    396e:	f0c0 8085 	bcc.w	3a7c <compare_set+0x140>
		if (target_time != cc_data[chan].target_time) {
    3972:	4b44      	ldr	r3, [pc, #272]	; (3a84 <compare_set+0x148>)
    3974:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    3978:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    397c:	429f      	cmp	r7, r3
    397e:	bf08      	it	eq
    3980:	4296      	cmpeq	r6, r2
    3982:	d054      	beq.n	3a2e <compare_set+0xf2>
    3984:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3988:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    398c:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    3990:	f105 0850 	add.w	r8, r5, #80	; 0x50
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3994:	fa0b f205 	lsl.w	r2, fp, r5
    3998:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    399c:	ea4f 0888 	mov.w	r8, r8, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    39a0:	fa1f f888 	uxth.w	r8, r8
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    39a4:	9202      	str	r2, [sp, #8]
     return p_reg->COUNTER;
    39a6:	4a38      	ldr	r2, [pc, #224]	; (3a88 <compare_set+0x14c>)
    return p_reg->CC[ch];
    39a8:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
	return absolute_time & COUNTER_MAX;
    39ac:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    39b0:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
    39b4:	f508 3888 	add.w	r8, r8, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    39b8:	461c      	mov	r4, r3
    39ba:	4693      	mov	fp, r2
     return p_reg->COUNTER;
    39bc:	f8d2 a504 	ldr.w	sl, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    39c0:	eba0 000a 	sub.w	r0, r0, sl
    39c4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    39c8:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    39cc:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    39ce:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
    39d2:	d105      	bne.n	39e0 <compare_set+0xa4>
    39d4:	9303      	str	r3, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
    39d6:	2013      	movs	r0, #19
    39d8:	f005 f8e1 	bl	8b9e <z_impl_k_busy_wait>
    39dc:	4a2a      	ldr	r2, [pc, #168]	; (3a88 <compare_set+0x14c>)
    39de:	9b03      	ldr	r3, [sp, #12]
    p_reg->EVTENSET = mask;
    39e0:	9902      	ldr	r1, [sp, #8]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    39e2:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
    39e6:	eba4 000c 	sub.w	r0, r4, ip
    39ea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    39ee:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    39f2:	bf88      	it	hi
    39f4:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    39f6:	2000      	movs	r0, #0
    39f8:	f8c8 0000 	str.w	r0, [r8]
    39fc:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
    3a00:	f8cb 1344 	str.w	r1, [fp, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3a04:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    3a08:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    3a0c:	f8db 0504 	ldr.w	r0, [fp, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    3a10:	4582      	cmp	sl, r0
    3a12:	d006      	beq.n	3a22 <compare_set+0xe6>
	return (a - b) & COUNTER_MAX;
    3a14:	1a20      	subs	r0, r4, r0
    3a16:	3802      	subs	r0, #2
    3a18:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    3a1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3a20:	d819      	bhi.n	3a56 <compare_set+0x11a>
	return (a - b) & COUNTER_MAX;
    3a22:	1ae4      	subs	r4, r4, r3
    3a24:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    3a28:	1932      	adds	r2, r6, r4
    3a2a:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
    3a2e:	4c15      	ldr	r4, [pc, #84]	; (3a84 <compare_set+0x148>)
    3a30:	0129      	lsls	r1, r5, #4
    3a32:	eb04 1005 	add.w	r0, r4, r5, lsl #4
    3a36:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
    3a3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	cc_data[chan].user_context = user_data;
    3a3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	cc_data[chan].callback = handler;
    3a3e:	5062      	str	r2, [r4, r1]
	cc_data[chan].user_context = user_data;
    3a40:	6043      	str	r3, [r0, #4]
	return ret;
    3a42:	2400      	movs	r4, #0
	if (key) {
    3a44:	9b01      	ldr	r3, [sp, #4]
    3a46:	b113      	cbz	r3, 3a4e <compare_set+0x112>
    3a48:	4628      	mov	r0, r5
    3a4a:	f7ff ff27 	bl	389c <compare_int_unlock.part.0>
}
    3a4e:	4620      	mov	r0, r4
    3a50:	b005      	add	sp, #20
    3a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3a56:	4620      	mov	r0, r4
    3a58:	e7b0      	b.n	39bc <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
    3a5a:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3a5c:	4a0b      	ldr	r2, [pc, #44]	; (3a8c <compare_set+0x150>)
    3a5e:	f3bf 8f5b 	dmb	ish
    3a62:	40ab      	lsls	r3, r5
    3a64:	e852 1f00 	ldrex	r1, [r2]
    3a68:	4319      	orrs	r1, r3
    3a6a:	e842 1000 	strex	r0, r1, [r2]
    3a6e:	2800      	cmp	r0, #0
    3a70:	d1f8      	bne.n	3a64 <compare_set+0x128>
    3a72:	f3bf 8f5b 	dmb	ish
    3a76:	4632      	mov	r2, r6
    3a78:	463b      	mov	r3, r7
    3a7a:	e7d8      	b.n	3a2e <compare_set+0xf2>
			return -EINVAL;
    3a7c:	f06f 0415 	mvn.w	r4, #21
    3a80:	e7e0      	b.n	3a44 <compare_set+0x108>
    3a82:	bf00      	nop
    3a84:	200003e0 	.word	0x200003e0
    3a88:	40011000 	.word	0x40011000
    3a8c:	20000c14 	.word	0x20000c14

00003a90 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    3a90:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    3a92:	4b19      	ldr	r3, [pc, #100]	; (3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>)
    p_reg->PRESCALER = val;
    3a94:	4d19      	ldr	r5, [pc, #100]	; (3afc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x64>)
    3a96:	2400      	movs	r4, #0
    3a98:	f04f 30ff 	mov.w	r0, #4294967295
    3a9c:	f04f 31ff 	mov.w	r1, #4294967295
    3aa0:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    3aa4:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    3aa8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3aac:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3ab0:	4b13      	ldr	r3, [pc, #76]	; (3b00 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x68>)
    3ab2:	2602      	movs	r6, #2
    3ab4:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    3ab8:	2101      	movs	r1, #1
    3aba:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    3abe:	2011      	movs	r0, #17
    3ac0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3ac4:	4622      	mov	r2, r4
    3ac6:	f7fe f947 	bl	1d58 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    3aca:	2011      	movs	r0, #17
    3acc:	f7fe f926 	bl	1d1c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    3ad0:	4a0c      	ldr	r2, [pc, #48]	; (3b04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6c>)
    3ad2:	2301      	movs	r3, #1
    3ad4:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    3ad6:	4a0c      	ldr	r2, [pc, #48]	; (3b08 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x70>)
    3ad8:	602b      	str	r3, [r5, #0]
    3ada:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    3adc:	4b0b      	ldr	r3, [pc, #44]	; (3b0c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x74>)
    3ade:	4a0c      	ldr	r2, [pc, #48]	; (3b10 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x78>)
    3ae0:	9300      	str	r3, [sp, #0]
    3ae2:	9401      	str	r4, [sp, #4]
    3ae4:	2300      	movs	r3, #0
    3ae6:	4620      	mov	r0, r4
    3ae8:	f7ff ff28 	bl	393c <compare_set>

	z_nrf_clock_control_lf_on(mode);
    3aec:	4630      	mov	r0, r6
    3aee:	f7ff f907 	bl	2d00 <z_nrf_clock_control_lf_on>

	return 0;
}
    3af2:	4620      	mov	r0, r4
    3af4:	b002      	add	sp, #8
    3af6:	bd70      	pop	{r4, r5, r6, pc}
    3af8:	200003e0 	.word	0x200003e0
    3afc:	40011000 	.word	0x40011000
    3b00:	e000e100 	.word	0xe000e100
    3b04:	40011008 	.word	0x40011008
    3b08:	20000c18 	.word	0x20000c18
    3b0c:	000037d5 	.word	0x000037d5
    3b10:	007fffff 	.word	0x007fffff

00003b14 <rtc_nrf_isr>:
{
    3b14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    3b18:	4c34      	ldr	r4, [pc, #208]	; (3bec <rtc_nrf_isr+0xd8>)
    3b1a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    3b1e:	079a      	lsls	r2, r3, #30
    3b20:	d509      	bpl.n	3b36 <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3b22:	4b33      	ldr	r3, [pc, #204]	; (3bf0 <rtc_nrf_isr+0xdc>)
    3b24:	681a      	ldr	r2, [r3, #0]
    3b26:	b132      	cbz	r2, 3b36 <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3b28:	2200      	movs	r2, #0
    3b2a:	601a      	str	r2, [r3, #0]
		overflow_cnt++;
    3b2c:	4a31      	ldr	r2, [pc, #196]	; (3bf4 <rtc_nrf_isr+0xe0>)
    3b2e:	681b      	ldr	r3, [r3, #0]
    3b30:	6813      	ldr	r3, [r2, #0]
    3b32:	3301      	adds	r3, #1
    3b34:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    3b36:	f04f 0320 	mov.w	r3, #32
    3b3a:	f3ef 8211 	mrs	r2, BASEPRI
    3b3e:	f383 8812 	msr	BASEPRI_MAX, r3
    3b42:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    3b46:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    3b4a:	03db      	lsls	r3, r3, #15
    3b4c:	d512      	bpl.n	3b74 <rtc_nrf_isr+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3b4e:	f3bf 8f5b 	dmb	ish
    3b52:	4b29      	ldr	r3, [pc, #164]	; (3bf8 <rtc_nrf_isr+0xe4>)
    3b54:	e853 1f00 	ldrex	r1, [r3]
    3b58:	f021 0001 	bic.w	r0, r1, #1
    3b5c:	e843 0600 	strex	r6, r0, [r3]
    3b60:	2e00      	cmp	r6, #0
    3b62:	d1f7      	bne.n	3b54 <rtc_nrf_isr+0x40>
    3b64:	f3bf 8f5b 	dmb	ish
    3b68:	4b24      	ldr	r3, [pc, #144]	; (3bfc <rtc_nrf_isr+0xe8>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3b6a:	2900      	cmp	r1, #0
    3b6c:	d136      	bne.n	3bdc <rtc_nrf_isr+0xc8>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3b6e:	6819      	ldr	r1, [r3, #0]
		if (result) {
    3b70:	2900      	cmp	r1, #0
    3b72:	d133      	bne.n	3bdc <rtc_nrf_isr+0xc8>
{
    3b74:	2300      	movs	r3, #0
	__asm__ volatile(
    3b76:	f382 8811 	msr	BASEPRI, r2
    3b7a:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    3b7e:	b353      	cbz	r3, 3bd6 <rtc_nrf_isr+0xc2>
		curr_time = z_nrf_rtc_timer_read();
    3b80:	f7ff feba 	bl	38f8 <z_nrf_rtc_timer_read>
    3b84:	4606      	mov	r6, r0
	__asm__ volatile(
    3b86:	f04f 0320 	mov.w	r3, #32
    3b8a:	f3ef 8011 	mrs	r0, BASEPRI
    3b8e:	f383 8812 	msr	BASEPRI_MAX, r3
    3b92:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    3b96:	4b1a      	ldr	r3, [pc, #104]	; (3c00 <rtc_nrf_isr+0xec>)
    3b98:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    3b9c:	4549      	cmp	r1, r9
    3b9e:	bf08      	it	eq
    3ba0:	4546      	cmpeq	r6, r8
    3ba2:	f04f 0200 	mov.w	r2, #0
    3ba6:	d31e      	bcc.n	3be6 <rtc_nrf_isr+0xd2>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3ba8:	f04f 36ff 	mov.w	r6, #4294967295
    3bac:	f04f 37ff 	mov.w	r7, #4294967295
			user_context = cc_data[chan].user_context;
    3bb0:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3bb4:	e9c3 6702 	strd	r6, r7, [r3, #8]
			cc_data[chan].callback = NULL;
    3bb8:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    3bba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3bbe:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    3bc2:	f380 8811 	msr	BASEPRI, r0
    3bc6:	f3bf 8f6f 	isb	sy
		if (handler) {
    3bca:	b121      	cbz	r1, 3bd6 <rtc_nrf_isr+0xc2>
			handler(chan, expire_time, user_context);
    3bcc:	9500      	str	r5, [sp, #0]
    3bce:	4642      	mov	r2, r8
    3bd0:	464b      	mov	r3, r9
    3bd2:	2000      	movs	r0, #0
    3bd4:	4788      	blx	r1
}
    3bd6:	b003      	add	sp, #12
    3bd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3bdc:	2100      	movs	r1, #0
    3bde:	6019      	str	r1, [r3, #0]
    3be0:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3be2:	2301      	movs	r3, #1
}
    3be4:	e7c7      	b.n	3b76 <rtc_nrf_isr+0x62>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    3be6:	4611      	mov	r1, r2
    3be8:	e7eb      	b.n	3bc2 <rtc_nrf_isr+0xae>
    3bea:	bf00      	nop
    3bec:	40011000 	.word	0x40011000
    3bf0:	40011104 	.word	0x40011104
    3bf4:	20000c1c 	.word	0x20000c1c
    3bf8:	20000c14 	.word	0x20000c14
    3bfc:	40011140 	.word	0x40011140
    3c00:	200003e0 	.word	0x200003e0

00003c04 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3c04:	4b14      	ldr	r3, [pc, #80]	; (3c58 <sys_clock_set_timeout+0x54>)
{
    3c06:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3c08:	f1b0 3fff 	cmp.w	r0, #4294967295
    3c0c:	bf08      	it	eq
    3c0e:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3c10:	1e44      	subs	r4, r0, #1
    3c12:	2c00      	cmp	r4, #0
    3c14:	dd1e      	ble.n	3c54 <sys_clock_set_timeout+0x50>
    3c16:	429c      	cmp	r4, r3
    3c18:	bfa8      	it	ge
    3c1a:	461c      	movge	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    3c1c:	f7ff fe6c 	bl	38f8 <z_nrf_rtc_timer_read>
    3c20:	4b0e      	ldr	r3, [pc, #56]	; (3c5c <sys_clock_set_timeout+0x58>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3c22:	490f      	ldr	r1, [pc, #60]	; (3c60 <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    3c24:	e9d3 2300 	ldrd	r2, r3, [r3]
    3c28:	1a80      	subs	r0, r0, r2
		ticks = 0;
    3c2a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3c2e:	bf28      	it	cs
    3c30:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    3c32:	3001      	adds	r0, #1
    3c34:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
    3c36:	4808      	ldr	r0, [pc, #32]	; (3c58 <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3c38:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    3c3a:	4284      	cmp	r4, r0
    3c3c:	bf28      	it	cs
    3c3e:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3c40:	1912      	adds	r2, r2, r4
    3c42:	f04f 0000 	mov.w	r0, #0
    3c46:	9001      	str	r0, [sp, #4]
    3c48:	f143 0300 	adc.w	r3, r3, #0
    3c4c:	f7ff fe76 	bl	393c <compare_set>
}
    3c50:	b002      	add	sp, #8
    3c52:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3c54:	2400      	movs	r4, #0
    3c56:	e7e1      	b.n	3c1c <sys_clock_set_timeout+0x18>
    3c58:	007fffff 	.word	0x007fffff
    3c5c:	200003f0 	.word	0x200003f0
    3c60:	000037d5 	.word	0x000037d5

00003c64 <sys_clock_elapsed>:
{
    3c64:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    3c66:	f7ff fe47 	bl	38f8 <z_nrf_rtc_timer_read>
    3c6a:	4b02      	ldr	r3, [pc, #8]	; (3c74 <sys_clock_elapsed+0x10>)
    3c6c:	681b      	ldr	r3, [r3, #0]
}
    3c6e:	1ac0      	subs	r0, r0, r3
    3c70:	bd08      	pop	{r3, pc}
    3c72:	bf00      	nop
    3c74:	200003f0 	.word	0x200003f0

00003c78 <nrf_clock_is_running.constprop.0>:
NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
    3c78:	b508      	push	{r3, lr}
    switch (domain)
    3c7a:	b178      	cbz	r0, 3c9c <nrf_clock_is_running.constprop.0+0x24>
    3c7c:	2801      	cmp	r0, #1
    3c7e:	d01c      	beq.n	3cba <nrf_clock_is_running.constprop.0+0x42>
            NRFX_ASSERT(0);
    3c80:	4a14      	ldr	r2, [pc, #80]	; (3cd4 <nrf_clock_is_running.constprop.0+0x5c>)
    3c82:	4915      	ldr	r1, [pc, #84]	; (3cd8 <nrf_clock_is_running.constprop.0+0x60>)
    3c84:	4815      	ldr	r0, [pc, #84]	; (3cdc <nrf_clock_is_running.constprop.0+0x64>)
    3c86:	f44f 734f 	mov.w	r3, #828	; 0x33c
    3c8a:	f004 fbe8 	bl	845e <printk>
    3c8e:	4811      	ldr	r0, [pc, #68]	; (3cd4 <nrf_clock_is_running.constprop.0+0x5c>)
    3c90:	f44f 714f 	mov.w	r1, #828	; 0x33c
    3c94:	f004 fb0c 	bl	82b0 <assert_post_action>
            return false;
    3c98:	2000      	movs	r0, #0
    3c9a:	e00d      	b.n	3cb8 <nrf_clock_is_running.constprop.0+0x40>
            if (p_clk_src != NULL)
    3c9c:	b131      	cbz	r1, 3cac <nrf_clock_is_running.constprop.0+0x34>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3c9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3ca2:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    3ca6:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    3caa:	600b      	str	r3, [r1, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3cac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3cb0:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3cb4:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
    3cb8:	bd08      	pop	{r3, pc}
            if (p_clk_src != NULL)
    3cba:	b131      	cbz	r1, 3cca <nrf_clock_is_running.constprop.0+0x52>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3cbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3cc0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    3cc4:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    3cc8:	700b      	strb	r3, [r1, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3cca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3cce:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
    3cd2:	e7ef      	b.n	3cb4 <nrf_clock_is_running.constprop.0+0x3c>
    3cd4:	00009b47 	.word	0x00009b47
    3cd8:	00009cef 	.word	0x00009cef
    3cdc:	00009190 	.word	0x00009190

00003ce0 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    3ce0:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
    3ce2:	4604      	mov	r4, r0
    3ce4:	b948      	cbnz	r0, 3cfa <nrfx_clock_init+0x1a>
    3ce6:	490a      	ldr	r1, [pc, #40]	; (3d10 <nrfx_clock_init+0x30>)
    3ce8:	480a      	ldr	r0, [pc, #40]	; (3d14 <nrfx_clock_init+0x34>)
    3cea:	4a0b      	ldr	r2, [pc, #44]	; (3d18 <nrfx_clock_init+0x38>)
    3cec:	23bd      	movs	r3, #189	; 0xbd
    3cee:	f004 fbb6 	bl	845e <printk>
    3cf2:	4809      	ldr	r0, [pc, #36]	; (3d18 <nrfx_clock_init+0x38>)
    3cf4:	21bd      	movs	r1, #189	; 0xbd
    3cf6:	f004 fadb 	bl	82b0 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    3cfa:	4b08      	ldr	r3, [pc, #32]	; (3d1c <nrfx_clock_init+0x3c>)
    3cfc:	791a      	ldrb	r2, [r3, #4]
    3cfe:	b922      	cbnz	r2, 3d0a <nrfx_clock_init+0x2a>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    3d00:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
    3d02:	4807      	ldr	r0, [pc, #28]	; (3d20 <nrfx_clock_init+0x40>)
        m_clock_cb.event_handler = event_handler;
    3d04:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    3d06:	809a      	strh	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    3d08:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    3d0a:	4806      	ldr	r0, [pc, #24]	; (3d24 <nrfx_clock_init+0x44>)
    return err_code;
    3d0c:	e7fc      	b.n	3d08 <nrfx_clock_init+0x28>
    3d0e:	bf00      	nop
    3d10:	00009bb8 	.word	0x00009bb8
    3d14:	00009190 	.word	0x00009190
    3d18:	00009b7b 	.word	0x00009b7b
    3d1c:	20000c20 	.word	0x20000c20
    3d20:	0bad0000 	.word	0x0bad0000
    3d24:	0bad000c 	.word	0x0bad000c

00003d28 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    3d28:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3d2a:	4b0b      	ldr	r3, [pc, #44]	; (3d58 <nrfx_clock_enable+0x30>)
    3d2c:	791b      	ldrb	r3, [r3, #4]
    3d2e:	b94b      	cbnz	r3, 3d44 <nrfx_clock_enable+0x1c>
    3d30:	490a      	ldr	r1, [pc, #40]	; (3d5c <nrfx_clock_enable+0x34>)
    3d32:	480b      	ldr	r0, [pc, #44]	; (3d60 <nrfx_clock_enable+0x38>)
    3d34:	4a0b      	ldr	r2, [pc, #44]	; (3d64 <nrfx_clock_enable+0x3c>)
    3d36:	23d6      	movs	r3, #214	; 0xd6
    3d38:	f004 fb91 	bl	845e <printk>
    3d3c:	4809      	ldr	r0, [pc, #36]	; (3d64 <nrfx_clock_enable+0x3c>)
    3d3e:	21d6      	movs	r1, #214	; 0xd6
    3d40:	f004 fab6 	bl	82b0 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    3d44:	2000      	movs	r0, #0
    3d46:	f7fd fff9 	bl	1d3c <arch_irq_is_enabled>
    3d4a:	b918      	cbnz	r0, 3d54 <nrfx_clock_enable+0x2c>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    3d4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    3d50:	f7fd bfe4 	b.w	1d1c <arch_irq_enable>
    3d54:	bd08      	pop	{r3, pc}
    3d56:	bf00      	nop
    3d58:	20000c20 	.word	0x20000c20
    3d5c:	00009bc6 	.word	0x00009bc6
    3d60:	00009190 	.word	0x00009190
    3d64:	00009b7b 	.word	0x00009b7b

00003d68 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3d68:	4b22      	ldr	r3, [pc, #136]	; (3df4 <nrfx_clock_start+0x8c>)
    3d6a:	791b      	ldrb	r3, [r3, #4]
{
    3d6c:	b513      	push	{r0, r1, r4, lr}
    3d6e:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3d70:	b95b      	cbnz	r3, 3d8a <nrfx_clock_start+0x22>
    3d72:	4921      	ldr	r1, [pc, #132]	; (3df8 <nrfx_clock_start+0x90>)
    3d74:	4821      	ldr	r0, [pc, #132]	; (3dfc <nrfx_clock_start+0x94>)
    3d76:	4a22      	ldr	r2, [pc, #136]	; (3e00 <nrfx_clock_start+0x98>)
    3d78:	f44f 7389 	mov.w	r3, #274	; 0x112
    3d7c:	f004 fb6f 	bl	845e <printk>
    3d80:	481f      	ldr	r0, [pc, #124]	; (3e00 <nrfx_clock_start+0x98>)
    3d82:	f44f 7189 	mov.w	r1, #274	; 0x112
    3d86:	f004 fa93 	bl	82b0 <assert_post_action>
    switch (domain)
    3d8a:	b174      	cbz	r4, 3daa <nrfx_clock_start+0x42>
    3d8c:	2c01      	cmp	r4, #1
    3d8e:	d027      	beq.n	3de0 <nrfx_clock_start+0x78>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    3d90:	4a1b      	ldr	r2, [pc, #108]	; (3e00 <nrfx_clock_start+0x98>)
    3d92:	491c      	ldr	r1, [pc, #112]	; (3e04 <nrfx_clock_start+0x9c>)
    3d94:	4819      	ldr	r0, [pc, #100]	; (3dfc <nrfx_clock_start+0x94>)
    3d96:	f44f 73a2 	mov.w	r3, #324	; 0x144
    3d9a:	f004 fb60 	bl	845e <printk>
    3d9e:	4818      	ldr	r0, [pc, #96]	; (3e00 <nrfx_clock_start+0x98>)
    3da0:	f44f 71a2 	mov.w	r1, #324	; 0x144
    3da4:	f004 fa84 	bl	82b0 <assert_post_action>
            break;
    }
}
    3da8:	e016      	b.n	3dd8 <nrfx_clock_start+0x70>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    3daa:	a901      	add	r1, sp, #4
    3dac:	4620      	mov	r0, r4
    3dae:	f7ff ff63 	bl	3c78 <nrf_clock_is_running.constprop.0>
    3db2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3db6:	b188      	cbz	r0, 3ddc <nrfx_clock_start+0x74>
    3db8:	9a01      	ldr	r2, [sp, #4]
    3dba:	2a01      	cmp	r2, #1
    3dbc:	d10e      	bne.n	3ddc <nrfx_clock_start+0x74>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3dbe:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3dc2:	4b11      	ldr	r3, [pc, #68]	; (3e08 <nrfx_clock_start+0xa0>)
    3dc4:	2200      	movs	r2, #0
    3dc6:	601a      	str	r2, [r3, #0]
    3dc8:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3dca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3dce:	2202      	movs	r2, #2
    3dd0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3dd4:	2201      	movs	r2, #1
    3dd6:	609a      	str	r2, [r3, #8]
}
    3dd8:	b002      	add	sp, #8
    3dda:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    3ddc:	2200      	movs	r2, #0
    3dde:	e7ee      	b.n	3dbe <nrfx_clock_start+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3de0:	4b0a      	ldr	r3, [pc, #40]	; (3e0c <nrfx_clock_start+0xa4>)
    3de2:	2200      	movs	r2, #0
    3de4:	601a      	str	r2, [r3, #0]
    3de6:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3de8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3dec:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3df0:	601c      	str	r4, [r3, #0]
}
    3df2:	e7f1      	b.n	3dd8 <nrfx_clock_start+0x70>
    3df4:	20000c20 	.word	0x20000c20
    3df8:	00009bc6 	.word	0x00009bc6
    3dfc:	00009190 	.word	0x00009190
    3e00:	00009b7b 	.word	0x00009b7b
    3e04:	00009cef 	.word	0x00009cef
    3e08:	40000104 	.word	0x40000104
    3e0c:	40000100 	.word	0x40000100

00003e10 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    3e10:	b537      	push	{r0, r1, r2, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3e12:	4d2f      	ldr	r5, [pc, #188]	; (3ed0 <nrfx_clock_stop+0xc0>)
    3e14:	792a      	ldrb	r2, [r5, #4]
{
    3e16:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3e18:	b95a      	cbnz	r2, 3e32 <nrfx_clock_stop+0x22>
    3e1a:	492e      	ldr	r1, [pc, #184]	; (3ed4 <nrfx_clock_stop+0xc4>)
    3e1c:	482e      	ldr	r0, [pc, #184]	; (3ed8 <nrfx_clock_stop+0xc8>)
    3e1e:	4a2f      	ldr	r2, [pc, #188]	; (3edc <nrfx_clock_stop+0xcc>)
    3e20:	f240 134b 	movw	r3, #331	; 0x14b
    3e24:	f004 fb1b 	bl	845e <printk>
    3e28:	482c      	ldr	r0, [pc, #176]	; (3edc <nrfx_clock_stop+0xcc>)
    3e2a:	f240 114b 	movw	r1, #331	; 0x14b
    3e2e:	f004 fa3f 	bl	82b0 <assert_post_action>
    switch (domain)
    3e32:	b17c      	cbz	r4, 3e54 <nrfx_clock_stop+0x44>
    3e34:	2c01      	cmp	r4, #1
    3e36:	d028      	beq.n	3e8a <nrfx_clock_stop+0x7a>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    3e38:	4929      	ldr	r1, [pc, #164]	; (3ee0 <nrfx_clock_stop+0xd0>)
    3e3a:	4827      	ldr	r0, [pc, #156]	; (3ed8 <nrfx_clock_stop+0xc8>)
    3e3c:	4a27      	ldr	r2, [pc, #156]	; (3edc <nrfx_clock_stop+0xcc>)
    3e3e:	f240 1367 	movw	r3, #359	; 0x167
    3e42:	f004 fb0c 	bl	845e <printk>
    3e46:	4825      	ldr	r0, [pc, #148]	; (3edc <nrfx_clock_stop+0xcc>)
    3e48:	f240 1167 	movw	r1, #359	; 0x167
    3e4c:	f004 fa30 	bl	82b0 <assert_post_action>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    3e50:	b003      	add	sp, #12
    3e52:	bd30      	pop	{r4, r5, pc}
    p_reg->INTENCLR = mask;
    3e54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3e58:	2202      	movs	r2, #2
    3e5a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3e5e:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    3e62:	f503 7382 	add.w	r3, r3, #260	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3e66:	2201      	movs	r2, #1
    3e68:	681b      	ldr	r3, [r3, #0]
    3e6a:	4b1e      	ldr	r3, [pc, #120]	; (3ee4 <nrfx_clock_stop+0xd4>)
    3e6c:	f242 7410 	movw	r4, #10000	; 0x2710
    3e70:	601a      	str	r2, [r3, #0]
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    3e72:	2100      	movs	r1, #0
    3e74:	4608      	mov	r0, r1
    3e76:	f7ff feff 	bl	3c78 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    3e7a:	2800      	cmp	r0, #0
    3e7c:	d0e8      	beq.n	3e50 <nrfx_clock_stop+0x40>
    3e7e:	2001      	movs	r0, #1
    3e80:	f004 fd75 	bl	896e <nrfx_busy_wait>
    3e84:	3c01      	subs	r4, #1
    3e86:	d1f4      	bne.n	3e72 <nrfx_clock_stop+0x62>
    3e88:	e7e2      	b.n	3e50 <nrfx_clock_stop+0x40>
    p_reg->INTENCLR = mask;
    3e8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3e8e:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    3e90:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3e94:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    3e98:	f503 7380 	add.w	r3, r3, #256	; 0x100
    3e9c:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3e9e:	4b12      	ldr	r3, [pc, #72]	; (3ee8 <nrfx_clock_stop+0xd8>)
    3ea0:	601c      	str	r4, [r3, #0]
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    3ea2:	f88d 4007 	strb.w	r4, [sp, #7]
    3ea6:	f242 7410 	movw	r4, #10000	; 0x2710
    3eaa:	f10d 0107 	add.w	r1, sp, #7
    3eae:	2001      	movs	r0, #1
    3eb0:	f7ff fee2 	bl	3c78 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    3eb4:	b910      	cbnz	r0, 3ebc <nrfx_clock_stop+0xac>
            m_clock_cb.hfclk_started = false;
    3eb6:	2300      	movs	r3, #0
    3eb8:	716b      	strb	r3, [r5, #5]
    3eba:	e7c9      	b.n	3e50 <nrfx_clock_stop+0x40>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    3ebc:	f89d 0007 	ldrb.w	r0, [sp, #7]
    3ec0:	2801      	cmp	r0, #1
    3ec2:	d1f8      	bne.n	3eb6 <nrfx_clock_stop+0xa6>
    3ec4:	f004 fd53 	bl	896e <nrfx_busy_wait>
    3ec8:	3c01      	subs	r4, #1
    3eca:	d1ee      	bne.n	3eaa <nrfx_clock_stop+0x9a>
    3ecc:	e7f3      	b.n	3eb6 <nrfx_clock_stop+0xa6>
    3ece:	bf00      	nop
    3ed0:	20000c20 	.word	0x20000c20
    3ed4:	00009bc6 	.word	0x00009bc6
    3ed8:	00009190 	.word	0x00009190
    3edc:	00009b7b 	.word	0x00009b7b
    3ee0:	00009cef 	.word	0x00009cef
    3ee4:	4000000c 	.word	0x4000000c
    3ee8:	40000004 	.word	0x40000004

00003eec <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3eec:	4b16      	ldr	r3, [pc, #88]	; (3f48 <nrfx_power_clock_irq_handler+0x5c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    3eee:	b507      	push	{r0, r1, r2, lr}
    3ef0:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    3ef2:	b16a      	cbz	r2, 3f10 <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3ef4:	2200      	movs	r2, #0
    3ef6:	601a      	str	r2, [r3, #0]
    3ef8:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    3efa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3efe:	2201      	movs	r2, #1
    3f00:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    3f04:	4b11      	ldr	r3, [pc, #68]	; (3f4c <nrfx_power_clock_irq_handler+0x60>)
    3f06:	7958      	ldrb	r0, [r3, #5]
    3f08:	b910      	cbnz	r0, 3f10 <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
    3f0a:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    3f0c:	681b      	ldr	r3, [r3, #0]
    3f0e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3f10:	4b0f      	ldr	r3, [pc, #60]	; (3f50 <nrfx_power_clock_irq_handler+0x64>)
    3f12:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    3f14:	b16a      	cbz	r2, 3f32 <nrfx_power_clock_irq_handler+0x46>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3f16:	2000      	movs	r0, #0
    3f18:	6018      	str	r0, [r3, #0]
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
    3f1a:	a901      	add	r1, sp, #4
    3f1c:	681b      	ldr	r3, [r3, #0]
    3f1e:	f7ff feab 	bl	3c78 <nrf_clock_is_running.constprop.0>
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    3f22:	9a01      	ldr	r2, [sp, #4]
    3f24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3f28:	b932      	cbnz	r2, 3f38 <nrfx_power_clock_irq_handler+0x4c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3f2a:	2201      	movs	r2, #1
    3f2c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3f30:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    3f32:	b003      	add	sp, #12
    3f34:	f85d fb04 	ldr.w	pc, [sp], #4
    p_reg->INTENCLR = mask;
    3f38:	2202      	movs	r2, #2
    3f3a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3f3e:	4b03      	ldr	r3, [pc, #12]	; (3f4c <nrfx_power_clock_irq_handler+0x60>)
    3f40:	2001      	movs	r0, #1
    3f42:	681b      	ldr	r3, [r3, #0]
    3f44:	4798      	blx	r3
}
    3f46:	e7f4      	b.n	3f32 <nrfx_power_clock_irq_handler+0x46>
    3f48:	40000100 	.word	0x40000100
    3f4c:	20000c20 	.word	0x20000c20
    3f50:	40000104 	.word	0x40000104

00003f54 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    3f54:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    3f56:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    3f58:	6803      	ldr	r3, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    3f5a:	fab3 f283 	clz	r2, r3
        if (idx < 0) {
    3f5e:	2a20      	cmp	r2, #32
        idx = 31 - NRF_CLZ(prev_mask);
    3f60:	f1c2 041f 	rsb	r4, r2, #31
        if (idx < 0) {
    3f64:	d014      	beq.n	3f90 <nrfx_flag32_alloc+0x3c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3f66:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    3f6a:	fa05 f204 	lsl.w	r2, r5, r4
    3f6e:	ea23 0202 	bic.w	r2, r3, r2
    3f72:	e850 6f00 	ldrex	r6, [r0]
    3f76:	429e      	cmp	r6, r3
    3f78:	d104      	bne.n	3f84 <nrfx_flag32_alloc+0x30>
    3f7a:	e840 2c00 	strex	ip, r2, [r0]
    3f7e:	f1bc 0f00 	cmp.w	ip, #0
    3f82:	d1f6      	bne.n	3f72 <nrfx_flag32_alloc+0x1e>
    3f84:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    3f88:	d1e6      	bne.n	3f58 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    3f8a:	4802      	ldr	r0, [pc, #8]	; (3f94 <nrfx_flag32_alloc+0x40>)
    *p_flag = idx;
    3f8c:	700c      	strb	r4, [r1, #0]
}
    3f8e:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    3f90:	4801      	ldr	r0, [pc, #4]	; (3f98 <nrfx_flag32_alloc+0x44>)
    3f92:	e7fc      	b.n	3f8e <nrfx_flag32_alloc+0x3a>
    3f94:	0bad0000 	.word	0x0bad0000
    3f98:	0bad0002 	.word	0x0bad0002

00003f9c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    3f9c:	6803      	ldr	r3, [r0, #0]
    3f9e:	40cb      	lsrs	r3, r1
    3fa0:	07db      	lsls	r3, r3, #31
{
    3fa2:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    3fa4:	d415      	bmi.n	3fd2 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    3fa6:	2301      	movs	r3, #1
    3fa8:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    3fac:	6803      	ldr	r3, [r0, #0]
    3fae:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    3fb2:	ea41 0203 	orr.w	r2, r1, r3
    3fb6:	e850 4f00 	ldrex	r4, [r0]
    3fba:	429c      	cmp	r4, r3
    3fbc:	d104      	bne.n	3fc8 <nrfx_flag32_free+0x2c>
    3fbe:	e840 2c00 	strex	ip, r2, [r0]
    3fc2:	f1bc 0f00 	cmp.w	ip, #0
    3fc6:	d1f6      	bne.n	3fb6 <nrfx_flag32_free+0x1a>
    3fc8:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    3fcc:	d1ee      	bne.n	3fac <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    3fce:	4802      	ldr	r0, [pc, #8]	; (3fd8 <nrfx_flag32_free+0x3c>)
}
    3fd0:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3fd2:	4802      	ldr	r0, [pc, #8]	; (3fdc <nrfx_flag32_free+0x40>)
    3fd4:	e7fc      	b.n	3fd0 <nrfx_flag32_free+0x34>
    3fd6:	bf00      	nop
    3fd8:	0bad0000 	.word	0x0bad0000
    3fdc:	0bad0004 	.word	0x0bad0004

00003fe0 <pin_is_task_output>:
 *
 * @return True if pin is task output.
 */
static bool pin_is_task_output(uint32_t pin)
{
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    3fe0:	4b05      	ldr	r3, [pc, #20]	; (3ff8 <pin_is_task_output+0x18>)
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3fe2:	3008      	adds	r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    3fe4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    3fe8:	f000 0022 	and.w	r0, r0, #34	; 0x22
}
    3fec:	f1a0 0322 	sub.w	r3, r0, #34	; 0x22
    3ff0:	4258      	negs	r0, r3
    3ff2:	4158      	adcs	r0, r3
    3ff4:	4770      	bx	lr
    3ff6:	bf00      	nop
    3ff8:	20000100 	.word	0x20000100

00003ffc <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    3ffc:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3ffe:	f100 0308 	add.w	r3, r0, #8
    4002:	4c0c      	ldr	r4, [pc, #48]	; (4034 <call_handler+0x38>)
    4004:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    4008:	05da      	lsls	r2, r3, #23
{
    400a:	4605      	mov	r5, r0
    400c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    400e:	d507      	bpl.n	4020 <call_handler+0x24>
    4010:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    4014:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    4018:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    401c:	6852      	ldr	r2, [r2, #4]
    401e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    4020:	68a3      	ldr	r3, [r4, #8]
    4022:	b12b      	cbz	r3, 4030 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    4024:	68e2      	ldr	r2, [r4, #12]
    4026:	4631      	mov	r1, r6
    4028:	4628      	mov	r0, r5
    }
}
    402a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    402e:	4718      	bx	r3
}
    4030:	bd70      	pop	{r4, r5, r6, pc}
    4032:	bf00      	nop
    4034:	20000100 	.word	0x20000100

00004038 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4038:	4b19      	ldr	r3, [pc, #100]	; (40a0 <release_handler+0x68>)
    403a:	3008      	adds	r0, #8
{
    403c:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    403e:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    4042:	05d1      	lsls	r1, r2, #23
    4044:	d51d      	bpl.n	4082 <release_handler+0x4a>
    4046:	f3c2 2143 	ubfx	r1, r2, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    404a:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
    404e:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4052:	f103 0410 	add.w	r4, r3, #16
    4056:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    4058:	f834 2b02 	ldrh.w	r2, [r4], #2
    405c:	f412 7f80 	tst.w	r2, #256	; 0x100
    4060:	d003      	beq.n	406a <release_handler+0x32>
    4062:	f3c2 2243 	ubfx	r2, r2, #9, #4
    4066:	4291      	cmp	r1, r2
    4068:	d00b      	beq.n	4082 <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    406a:	3001      	adds	r0, #1
    406c:	2830      	cmp	r0, #48	; 0x30
    406e:	d1f3      	bne.n	4058 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    4070:	2200      	movs	r2, #0
    4072:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    4076:	480b      	ldr	r0, [pc, #44]	; (40a4 <release_handler+0x6c>)
    4078:	f7ff ff90 	bl	3f9c <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    407c:	4b0a      	ldr	r3, [pc, #40]	; (40a8 <release_handler+0x70>)
    407e:	4298      	cmp	r0, r3
    4080:	d100      	bne.n	4084 <release_handler+0x4c>
}
    4082:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    4084:	4909      	ldr	r1, [pc, #36]	; (40ac <release_handler+0x74>)
    4086:	480a      	ldr	r0, [pc, #40]	; (40b0 <release_handler+0x78>)
    4088:	4a0a      	ldr	r2, [pc, #40]	; (40b4 <release_handler+0x7c>)
    408a:	f44f 7399 	mov.w	r3, #306	; 0x132
    408e:	f004 f9e6 	bl	845e <printk>
}
    4092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    4096:	4807      	ldr	r0, [pc, #28]	; (40b4 <release_handler+0x7c>)
    4098:	f44f 7199 	mov.w	r1, #306	; 0x132
    409c:	f004 b908 	b.w	82b0 <assert_post_action>
    40a0:	20000100 	.word	0x20000100
    40a4:	20000174 	.word	0x20000174
    40a8:	0bad0000 	.word	0x0bad0000
    40ac:	00009c48 	.word	0x00009c48
    40b0:	00009190 	.word	0x00009190
    40b4:	00009be4 	.word	0x00009be4

000040b8 <pin_handler_trigger_uninit>:
{
    40b8:	b538      	push	{r3, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    40ba:	4c0a      	ldr	r4, [pc, #40]	; (40e4 <pin_handler_trigger_uninit+0x2c>)
    40bc:	f100 0508 	add.w	r5, r0, #8
    40c0:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
    if (pin_in_use_by_te(pin))
    40c4:	069a      	lsls	r2, r3, #26
    40c6:	d506      	bpl.n	40d6 <pin_handler_trigger_uninit+0x1e>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    40c8:	0b5b      	lsrs	r3, r3, #13
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    40ca:	4a07      	ldr	r2, [pc, #28]	; (40e8 <pin_handler_trigger_uninit+0x30>)
    40cc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    40d0:	2100      	movs	r1, #0
    40d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    release_handler(pin);
    40d6:	f7ff ffaf 	bl	4038 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    40da:	2300      	movs	r3, #0
    40dc:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    40e0:	bd38      	pop	{r3, r4, r5, pc}
    40e2:	bf00      	nop
    40e4:	20000100 	.word	0x20000100
    40e8:	40006000 	.word	0x40006000

000040ec <nrf_gpio_pin_port_decode>:
{
    40ec:	b510      	push	{r4, lr}
    40ee:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    40f0:	6800      	ldr	r0, [r0, #0]
    40f2:	f004 fc3e 	bl	8972 <nrf_gpio_pin_present_check>
    40f6:	b958      	cbnz	r0, 4110 <nrf_gpio_pin_port_decode+0x24>
    40f8:	4912      	ldr	r1, [pc, #72]	; (4144 <nrf_gpio_pin_port_decode+0x58>)
    40fa:	4813      	ldr	r0, [pc, #76]	; (4148 <nrf_gpio_pin_port_decode+0x5c>)
    40fc:	4a13      	ldr	r2, [pc, #76]	; (414c <nrf_gpio_pin_port_decode+0x60>)
    40fe:	f240 2329 	movw	r3, #553	; 0x229
    4102:	f004 f9ac 	bl	845e <printk>
    4106:	4811      	ldr	r0, [pc, #68]	; (414c <nrf_gpio_pin_port_decode+0x60>)
    4108:	f240 2129 	movw	r1, #553	; 0x229
    410c:	f004 f8d0 	bl	82b0 <assert_post_action>
    uint32_t pin_number = *p_pin;
    4110:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    4112:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4116:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    4118:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    411a:	d00d      	beq.n	4138 <nrf_gpio_pin_port_decode+0x4c>
    411c:	2b01      	cmp	r3, #1
    411e:	d00e      	beq.n	413e <nrf_gpio_pin_port_decode+0x52>
            NRFX_ASSERT(0);
    4120:	490b      	ldr	r1, [pc, #44]	; (4150 <nrf_gpio_pin_port_decode+0x64>)
    4122:	4809      	ldr	r0, [pc, #36]	; (4148 <nrf_gpio_pin_port_decode+0x5c>)
    4124:	4a09      	ldr	r2, [pc, #36]	; (414c <nrf_gpio_pin_port_decode+0x60>)
    4126:	f240 232e 	movw	r3, #558	; 0x22e
    412a:	f004 f998 	bl	845e <printk>
    412e:	4807      	ldr	r0, [pc, #28]	; (414c <nrf_gpio_pin_port_decode+0x60>)
    4130:	f240 212e 	movw	r1, #558	; 0x22e
    4134:	f004 f8bc 	bl	82b0 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4138:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    413c:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
    413e:	4805      	ldr	r0, [pc, #20]	; (4154 <nrf_gpio_pin_port_decode+0x68>)
    4140:	e7fc      	b.n	413c <nrf_gpio_pin_port_decode+0x50>
    4142:	bf00      	nop
    4144:	00009b0f 	.word	0x00009b0f
    4148:	00009190 	.word	0x00009190
    414c:	00009adc 	.word	0x00009adc
    4150:	00009cef 	.word	0x00009cef
    4154:	50000300 	.word	0x50000300

00004158 <nrfx_gpiote_input_configure>:
{
    4158:	b5f0      	push	{r4, r5, r6, r7, lr}
    415a:	4604      	mov	r4, r0
    415c:	b085      	sub	sp, #20
    415e:	4617      	mov	r7, r2
    4160:	461d      	mov	r5, r3
    if (p_input_config)
    4162:	b1f1      	cbz	r1, 41a2 <nrfx_gpiote_input_configure+0x4a>
        if (pin_is_task_output(pin))
    4164:	f7ff ff3c 	bl	3fe0 <pin_is_task_output>
    4168:	b110      	cbz	r0, 4170 <nrfx_gpiote_input_configure+0x18>
                return NRFX_ERROR_INVALID_PARAM;
    416a:	484a      	ldr	r0, [pc, #296]	; (4294 <nrfx_gpiote_input_configure+0x13c>)
}
    416c:	b005      	add	sp, #20
    416e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    4170:	460b      	mov	r3, r1
    4172:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    4176:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    417a:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    417e:	f10d 020f 	add.w	r2, sp, #15
    4182:	f10d 010e 	add.w	r1, sp, #14
    4186:	4620      	mov	r0, r4
    4188:	f004 fc08 	bl	899c <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    418c:	4a42      	ldr	r2, [pc, #264]	; (4298 <nrfx_gpiote_input_configure+0x140>)
    418e:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    4192:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    4196:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    419a:	f043 0301 	orr.w	r3, r3, #1
    419e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    41a2:	b197      	cbz	r7, 41ca <nrfx_gpiote_input_configure+0x72>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    41a4:	4b3c      	ldr	r3, [pc, #240]	; (4298 <nrfx_gpiote_input_configure+0x140>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    41a6:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    41a8:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    41aa:	f104 0008 	add.w	r0, r4, #8
    41ae:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
    41b2:	078f      	lsls	r7, r1, #30
    41b4:	d50c      	bpl.n	41d0 <nrfx_gpiote_input_configure+0x78>
            if (use_evt)
    41b6:	2a00      	cmp	r2, #0
    41b8:	d1d7      	bne.n	416a <nrfx_gpiote_input_configure+0x12>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    41ba:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    41be:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    41c2:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
    41c6:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
    41ca:	bbcd      	cbnz	r5, 4240 <nrfx_gpiote_input_configure+0xe8>
    return NRFX_SUCCESS;
    41cc:	4833      	ldr	r0, [pc, #204]	; (429c <nrfx_gpiote_input_configure+0x144>)
    41ce:	e7cd      	b.n	416c <nrfx_gpiote_input_configure+0x14>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    41d0:	f021 0120 	bic.w	r1, r1, #32
    41d4:	04c9      	lsls	r1, r1, #19
    41d6:	0cc9      	lsrs	r1, r1, #19
    41d8:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
    41dc:	2a00      	cmp	r2, #0
    41de:	d0ec      	beq.n	41ba <nrfx_gpiote_input_configure+0x62>
                if (!edge)
    41e0:	2e03      	cmp	r6, #3
    41e2:	d8c2      	bhi.n	416a <nrfx_gpiote_input_configure+0x12>
                uint8_t ch = *p_trigger_config->p_in_channel;
    41e4:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    41e6:	b92e      	cbnz	r6, 41f4 <nrfx_gpiote_input_configure+0x9c>
    41e8:	4a2d      	ldr	r2, [pc, #180]	; (42a0 <nrfx_gpiote_input_configure+0x148>)
    41ea:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    41ee:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    41f2:	e7e2      	b.n	41ba <nrfx_gpiote_input_configure+0x62>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    41f4:	00ba      	lsls	r2, r7, #2
    41f6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    41fa:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    41fe:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    4202:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    4206:	f02c 0c03 	bic.w	ip, ip, #3
    420a:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    420e:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    4212:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
    4216:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    421a:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    421e:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    4222:	ea4f 2c04 	mov.w	ip, r4, lsl #8
    4226:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
    422a:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
    422e:	ea4c 0c0e 	orr.w	ip, ip, lr
    4232:	f041 0120 	orr.w	r1, r1, #32
    4236:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
    423a:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    423e:	e7bc      	b.n	41ba <nrfx_gpiote_input_configure+0x62>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    4240:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    4244:	4620      	mov	r0, r4
    4246:	f7ff fef7 	bl	4038 <release_handler>
    if (!handler)
    424a:	2e00      	cmp	r6, #0
    424c:	d0be      	beq.n	41cc <nrfx_gpiote_input_configure+0x74>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    424e:	4d12      	ldr	r5, [pc, #72]	; (4298 <nrfx_gpiote_input_configure+0x140>)
    4250:	682b      	ldr	r3, [r5, #0]
    4252:	429e      	cmp	r6, r3
    4254:	d104      	bne.n	4260 <nrfx_gpiote_input_configure+0x108>
    4256:	686b      	ldr	r3, [r5, #4]
    4258:	429f      	cmp	r7, r3
    425a:	d101      	bne.n	4260 <nrfx_gpiote_input_configure+0x108>
    425c:	2200      	movs	r2, #0
    425e:	e00a      	b.n	4276 <nrfx_gpiote_input_configure+0x11e>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    4260:	4810      	ldr	r0, [pc, #64]	; (42a4 <nrfx_gpiote_input_configure+0x14c>)
    4262:	f10d 010f 	add.w	r1, sp, #15
    4266:	f7ff fe75 	bl	3f54 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    426a:	4b0c      	ldr	r3, [pc, #48]	; (429c <nrfx_gpiote_input_configure+0x144>)
    426c:	4298      	cmp	r0, r3
    426e:	f47f af7d 	bne.w	416c <nrfx_gpiote_input_configure+0x14>
        handler_id = (int32_t)id;
    4272:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    4276:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    427a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    427e:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    4280:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4282:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    4286:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    428a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    428e:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    4292:	e79b      	b.n	41cc <nrfx_gpiote_input_configure+0x74>
    4294:	0bad0004 	.word	0x0bad0004
    4298:	20000100 	.word	0x20000100
    429c:	0bad0000 	.word	0x0bad0000
    42a0:	40006000 	.word	0x40006000
    42a4:	20000174 	.word	0x20000174

000042a8 <nrfx_gpiote_output_configure>:
{
    42a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    42aa:	4604      	mov	r4, r0
    42ac:	b085      	sub	sp, #20
    42ae:	4615      	mov	r5, r2
    if (p_config)
    42b0:	b309      	cbz	r1, 42f6 <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    42b2:	f100 0708 	add.w	r7, r0, #8
    42b6:	4e31      	ldr	r6, [pc, #196]	; (437c <nrfx_gpiote_output_configure+0xd4>)
    42b8:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    42bc:	0798      	lsls	r0, r3, #30
    42be:	d401      	bmi.n	42c4 <nrfx_gpiote_output_configure+0x1c>
    42c0:	069a      	lsls	r2, r3, #26
    42c2:	d458      	bmi.n	4376 <nrfx_gpiote_output_configure+0xce>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    42c4:	f013 0f1c 	tst.w	r3, #28
    42c8:	d002      	beq.n	42d0 <nrfx_gpiote_output_configure+0x28>
    42ca:	784b      	ldrb	r3, [r1, #1]
    42cc:	2b01      	cmp	r3, #1
    42ce:	d052      	beq.n	4376 <nrfx_gpiote_output_configure+0xce>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    42d0:	2301      	movs	r3, #1
    42d2:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    42d6:	2300      	movs	r3, #0
    42d8:	e9cd 1300 	strd	r1, r3, [sp]
    42dc:	1c4a      	adds	r2, r1, #1
    42de:	1c8b      	adds	r3, r1, #2
    42e0:	4620      	mov	r0, r4
    42e2:	f10d 010f 	add.w	r1, sp, #15
    42e6:	f004 fb59 	bl	899c <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    42ea:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    42ee:	f043 0303 	orr.w	r3, r3, #3
    42f2:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    42f6:	b915      	cbnz	r5, 42fe <nrfx_gpiote_output_configure+0x56>
    return NRFX_SUCCESS;
    42f8:	4821      	ldr	r0, [pc, #132]	; (4380 <nrfx_gpiote_output_configure+0xd8>)
}
    42fa:	b005      	add	sp, #20
    42fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    42fe:	4e1f      	ldr	r6, [pc, #124]	; (437c <nrfx_gpiote_output_configure+0xd4>)
    4300:	f104 0708 	add.w	r7, r4, #8
    4304:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    4308:	0783      	lsls	r3, r0, #30
    430a:	d534      	bpl.n	4376 <nrfx_gpiote_output_configure+0xce>
        uint32_t ch = p_task_config->task_ch;
    430c:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    4310:	4661      	mov	r1, ip
    4312:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    4314:	f020 0020 	bic.w	r0, r0, #32
    4318:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    431c:	04c0      	lsls	r0, r0, #19
    431e:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    4322:	0cc0      	lsrs	r0, r0, #19
    4324:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    4328:	2300      	movs	r3, #0
    432a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    432e:	786a      	ldrb	r2, [r5, #1]
    4330:	2a00      	cmp	r2, #0
    4332:	d0e1      	beq.n	42f8 <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    4334:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    4338:	78ad      	ldrb	r5, [r5, #2]
    433a:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    433e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    4342:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4346:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    434a:	0223      	lsls	r3, r4, #8
    434c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4350:	0412      	lsls	r2, r2, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4352:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4356:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    435a:	052d      	lsls	r5, r5, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    435c:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    435e:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4362:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4366:	432b      	orrs	r3, r5
    4368:	f040 0020 	orr.w	r0, r0, #32
    436c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    4370:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    4374:	e7c0      	b.n	42f8 <nrfx_gpiote_output_configure+0x50>
            return NRFX_ERROR_INVALID_PARAM;
    4376:	4803      	ldr	r0, [pc, #12]	; (4384 <nrfx_gpiote_output_configure+0xdc>)
    4378:	e7bf      	b.n	42fa <nrfx_gpiote_output_configure+0x52>
    437a:	bf00      	nop
    437c:	20000100 	.word	0x20000100
    4380:	0bad0000 	.word	0x0bad0000
    4384:	0bad0004 	.word	0x0bad0004

00004388 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    4388:	4b01      	ldr	r3, [pc, #4]	; (4390 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    438a:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    438e:	4770      	bx	lr
    4390:	20000100 	.word	0x20000100

00004394 <nrfx_gpiote_channel_get>:
{
    4394:	b538      	push	{r3, r4, r5, lr}
    4396:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    4398:	460d      	mov	r5, r1
    439a:	b959      	cbnz	r1, 43b4 <nrfx_gpiote_channel_get+0x20>
    439c:	490b      	ldr	r1, [pc, #44]	; (43cc <nrfx_gpiote_channel_get+0x38>)
    439e:	480c      	ldr	r0, [pc, #48]	; (43d0 <nrfx_gpiote_channel_get+0x3c>)
    43a0:	4a0c      	ldr	r2, [pc, #48]	; (43d4 <nrfx_gpiote_channel_get+0x40>)
    43a2:	f240 2335 	movw	r3, #565	; 0x235
    43a6:	f004 f85a 	bl	845e <printk>
    43aa:	480a      	ldr	r0, [pc, #40]	; (43d4 <nrfx_gpiote_channel_get+0x40>)
    43ac:	f240 2135 	movw	r1, #565	; 0x235
    43b0:	f003 ff7e 	bl	82b0 <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    43b4:	3408      	adds	r4, #8
    43b6:	4b08      	ldr	r3, [pc, #32]	; (43d8 <nrfx_gpiote_channel_get+0x44>)
    43b8:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin))
    43bc:	069a      	lsls	r2, r3, #26
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    43be:	bf43      	ittte	mi
    43c0:	0b5b      	lsrmi	r3, r3, #13
    43c2:	702b      	strbmi	r3, [r5, #0]
        return NRFX_SUCCESS;
    43c4:	4805      	ldrmi	r0, [pc, #20]	; (43dc <nrfx_gpiote_channel_get+0x48>)
        return NRFX_ERROR_INVALID_PARAM;
    43c6:	4806      	ldrpl	r0, [pc, #24]	; (43e0 <nrfx_gpiote_channel_get+0x4c>)
}
    43c8:	bd38      	pop	{r3, r4, r5, pc}
    43ca:	bf00      	nop
    43cc:	00009c5c 	.word	0x00009c5c
    43d0:	00009190 	.word	0x00009190
    43d4:	00009be4 	.word	0x00009be4
    43d8:	20000100 	.word	0x20000100
    43dc:	0bad0000 	.word	0x0bad0000
    43e0:	0bad0004 	.word	0x0bad0004

000043e4 <nrfx_gpiote_init>:
{
    43e4:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    43e6:	4c0e      	ldr	r4, [pc, #56]	; (4420 <nrfx_gpiote_init+0x3c>)
    43e8:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    43ec:	b9b5      	cbnz	r5, 441c <nrfx_gpiote_init+0x38>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    43ee:	2260      	movs	r2, #96	; 0x60
    43f0:	4629      	mov	r1, r5
    43f2:	f104 0010 	add.w	r0, r4, #16
    43f6:	f004 f88b 	bl	8510 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    43fa:	2006      	movs	r0, #6
    43fc:	f7fd fc8e 	bl	1d1c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4400:	4b08      	ldr	r3, [pc, #32]	; (4424 <nrfx_gpiote_init+0x40>)
    return err_code;
    4402:	4809      	ldr	r0, [pc, #36]	; (4428 <nrfx_gpiote_init+0x44>)
    4404:	601d      	str	r5, [r3, #0]
    4406:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    4408:	4b08      	ldr	r3, [pc, #32]	; (442c <nrfx_gpiote_init+0x48>)
    440a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    440e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    4412:	2301      	movs	r3, #1
    4414:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    4418:	6763      	str	r3, [r4, #116]	; 0x74
}
    441a:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    441c:	4804      	ldr	r0, [pc, #16]	; (4430 <nrfx_gpiote_init+0x4c>)
    441e:	e7fc      	b.n	441a <nrfx_gpiote_init+0x36>
    4420:	20000100 	.word	0x20000100
    4424:	4000617c 	.word	0x4000617c
    4428:	0bad0000 	.word	0x0bad0000
    442c:	40006000 	.word	0x40006000
    4430:	0bad0005 	.word	0x0bad0005

00004434 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    4434:	4b03      	ldr	r3, [pc, #12]	; (4444 <nrfx_gpiote_is_init+0x10>)
    4436:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    443a:	3800      	subs	r0, #0
    443c:	bf18      	it	ne
    443e:	2001      	movne	r0, #1
    4440:	4770      	bx	lr
    4442:	bf00      	nop
    4444:	20000100 	.word	0x20000100

00004448 <nrfx_gpiote_channel_free>:
{
    4448:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    444a:	4801      	ldr	r0, [pc, #4]	; (4450 <nrfx_gpiote_channel_free+0x8>)
    444c:	f7ff bda6 	b.w	3f9c <nrfx_flag32_free>
    4450:	20000170 	.word	0x20000170

00004454 <nrfx_gpiote_channel_alloc>:
{
    4454:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    4456:	4801      	ldr	r0, [pc, #4]	; (445c <nrfx_gpiote_channel_alloc+0x8>)
    4458:	f7ff bd7c 	b.w	3f54 <nrfx_flag32_alloc>
    445c:	20000170 	.word	0x20000170

00004460 <nrfx_gpiote_trigger_enable>:
{
    4460:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    4462:	4d31      	ldr	r5, [pc, #196]	; (4528 <nrfx_gpiote_trigger_enable+0xc8>)
    4464:	f100 0708 	add.w	r7, r0, #8
{
    4468:	4604      	mov	r4, r0
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    446a:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
    NRFX_ASSERT(pin_has_trigger(pin));
    446e:	f013 0f1c 	tst.w	r3, #28
{
    4472:	460e      	mov	r6, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    4474:	d10b      	bne.n	448e <nrfx_gpiote_trigger_enable+0x2e>
    4476:	492d      	ldr	r1, [pc, #180]	; (452c <nrfx_gpiote_trigger_enable+0xcc>)
    4478:	482d      	ldr	r0, [pc, #180]	; (4530 <nrfx_gpiote_trigger_enable+0xd0>)
    447a:	4a2e      	ldr	r2, [pc, #184]	; (4534 <nrfx_gpiote_trigger_enable+0xd4>)
    447c:	f240 33df 	movw	r3, #991	; 0x3df
    4480:	f003 ffed 	bl	845e <printk>
    4484:	482b      	ldr	r0, [pc, #172]	; (4534 <nrfx_gpiote_trigger_enable+0xd4>)
    4486:	f240 31df 	movw	r1, #991	; 0x3df
    448a:	f003 ff11 	bl	82b0 <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    448e:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4492:	0683      	lsls	r3, r0, #26
    4494:	d51f      	bpl.n	44d6 <nrfx_gpiote_trigger_enable+0x76>
    4496:	f010 0302 	ands.w	r3, r0, #2
    449a:	d11c      	bne.n	44d6 <nrfx_gpiote_trigger_enable+0x76>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    449c:	0b41      	lsrs	r1, r0, #13
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
    449e:	4608      	mov	r0, r1
    44a0:	f004 fa78 	bl	8994 <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
    44a4:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    44a8:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    44ac:	6003      	str	r3, [r0, #0]
    44ae:	6803      	ldr	r3, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    44b0:	008b      	lsls	r3, r1, #2
    44b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    44b6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    44ba:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    44be:	f042 0201 	orr.w	r2, r2, #1
    44c2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        if (int_enable)
    44c6:	b126      	cbz	r6, 44d2 <nrfx_gpiote_trigger_enable+0x72>
    p_reg->INTENSET = mask;
    44c8:	4a1b      	ldr	r2, [pc, #108]	; (4538 <nrfx_gpiote_trigger_enable+0xd8>)
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    44ca:	2301      	movs	r3, #1
    44cc:	408b      	lsls	r3, r1
    44ce:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    44d2:	b003      	add	sp, #12
    44d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
    44d6:	b95e      	cbnz	r6, 44f0 <nrfx_gpiote_trigger_enable+0x90>
    44d8:	4918      	ldr	r1, [pc, #96]	; (453c <nrfx_gpiote_trigger_enable+0xdc>)
    44da:	4815      	ldr	r0, [pc, #84]	; (4530 <nrfx_gpiote_trigger_enable+0xd0>)
    44dc:	4a15      	ldr	r2, [pc, #84]	; (4534 <nrfx_gpiote_trigger_enable+0xd4>)
    44de:	f240 33ee 	movw	r3, #1006	; 0x3ee
    44e2:	f003 ffbc 	bl	845e <printk>
    44e6:	4813      	ldr	r0, [pc, #76]	; (4534 <nrfx_gpiote_trigger_enable+0xd4>)
    44e8:	f240 31ee 	movw	r1, #1006	; 0x3ee
    44ec:	f003 fee0 	bl	82b0 <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    44f0:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
    44f4:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    44f8:	2b04      	cmp	r3, #4
    44fa:	d010      	beq.n	451e <nrfx_gpiote_trigger_enable+0xbe>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    44fc:	2b05      	cmp	r3, #5
    44fe:	d010      	beq.n	4522 <nrfx_gpiote_trigger_enable+0xc2>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4500:	a801      	add	r0, sp, #4
    4502:	9401      	str	r4, [sp, #4]
    4504:	f7ff fdf2 	bl	40ec <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4508:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    450a:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    450e:	40d9      	lsrs	r1, r3
    4510:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4514:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    4516:	4620      	mov	r0, r4
    4518:	f004 fa8b 	bl	8a32 <nrf_gpio_cfg_sense_set>
}
    451c:	e7d9      	b.n	44d2 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    451e:	2103      	movs	r1, #3
    4520:	e7f9      	b.n	4516 <nrfx_gpiote_trigger_enable+0xb6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    4522:	2102      	movs	r1, #2
    4524:	e7f7      	b.n	4516 <nrfx_gpiote_trigger_enable+0xb6>
    4526:	bf00      	nop
    4528:	20000100 	.word	0x20000100
    452c:	00009c66 	.word	0x00009c66
    4530:	00009190 	.word	0x00009190
    4534:	00009be4 	.word	0x00009be4
    4538:	40006000 	.word	0x40006000
    453c:	00009c7b 	.word	0x00009c7b

00004540 <nrfx_gpiote_trigger_disable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    4540:	4b0e      	ldr	r3, [pc, #56]	; (457c <nrfx_gpiote_trigger_disable+0x3c>)
    4542:	f100 0208 	add.w	r2, r0, #8
    4546:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    454a:	0699      	lsls	r1, r3, #26
    454c:	d513      	bpl.n	4576 <nrfx_gpiote_trigger_disable+0x36>
    454e:	079a      	lsls	r2, r3, #30
    4550:	d411      	bmi.n	4576 <nrfx_gpiote_trigger_disable+0x36>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4552:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    4554:	2201      	movs	r2, #1
    4556:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    4558:	009b      	lsls	r3, r3, #2
    455a:	4909      	ldr	r1, [pc, #36]	; (4580 <nrfx_gpiote_trigger_disable+0x40>)
    455c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4560:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    4564:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4568:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    456c:	f022 0203 	bic.w	r2, r2, #3
    4570:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    4574:	4770      	bx	lr
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4576:	2100      	movs	r1, #0
    4578:	f004 ba5b 	b.w	8a32 <nrf_gpio_cfg_sense_set>
    457c:	20000100 	.word	0x20000100
    4580:	40006000 	.word	0x40006000

00004584 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4584:	4b0e      	ldr	r3, [pc, #56]	; (45c0 <nrfx_gpiote_pin_uninit+0x3c>)
    4586:	f100 0208 	add.w	r2, r0, #8
{
    458a:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    458c:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    4590:	07db      	lsls	r3, r3, #31
{
    4592:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    4594:	d511      	bpl.n	45ba <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    4596:	f7ff ffd3 	bl	4540 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    459a:	4620      	mov	r0, r4
    459c:	f7ff fd8c 	bl	40b8 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    45a0:	a801      	add	r0, sp, #4
    45a2:	9401      	str	r4, [sp, #4]
    45a4:	f7ff fda2 	bl	40ec <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    45a8:	9b01      	ldr	r3, [sp, #4]
    45aa:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    45ae:	2202      	movs	r2, #2
    45b0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    45b4:	4803      	ldr	r0, [pc, #12]	; (45c4 <nrfx_gpiote_pin_uninit+0x40>)
}
    45b6:	b002      	add	sp, #8
    45b8:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    45ba:	4803      	ldr	r0, [pc, #12]	; (45c8 <nrfx_gpiote_pin_uninit+0x44>)
    45bc:	e7fb      	b.n	45b6 <nrfx_gpiote_pin_uninit+0x32>
    45be:	bf00      	nop
    45c0:	20000100 	.word	0x20000100
    45c4:	0bad0000 	.word	0x0bad0000
    45c8:	0bad0004 	.word	0x0bad0004

000045cc <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    45cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    45d0:	4b65      	ldr	r3, [pc, #404]	; (4768 <nrfx_gpiote_irq_handler+0x19c>)
    return p_reg->INTENSET & mask;
    45d2:	4866      	ldr	r0, [pc, #408]	; (476c <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    45d4:	4966      	ldr	r1, [pc, #408]	; (4770 <nrfx_gpiote_irq_handler+0x1a4>)
    uint32_t status = 0;
    45d6:	2500      	movs	r5, #0
{
    45d8:	b089      	sub	sp, #36	; 0x24
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    45da:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    45dc:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    45de:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    45e0:	b136      	cbz	r6, 45f0 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    45e2:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    45e6:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    45e8:	bf1e      	ittt	ne
    45ea:	601c      	strne	r4, [r3, #0]
    45ec:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    45ee:	4315      	orrne	r5, r2
        }
        mask <<= 1;
    45f0:	3304      	adds	r3, #4
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    45f2:	428b      	cmp	r3, r1
        mask <<= 1;
    45f4:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    45f8:	d1f1      	bne.n	45de <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    45fa:	4f5e      	ldr	r7, [pc, #376]	; (4774 <nrfx_gpiote_irq_handler+0x1a8>)
    45fc:	683b      	ldr	r3, [r7, #0]
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    45fe:	b37b      	cbz	r3, 4660 <nrfx_gpiote_irq_handler+0x94>
        *p_masks = gpio_regs[i]->LATCH;
    4600:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4604:	4e5c      	ldr	r6, [pc, #368]	; (4778 <nrfx_gpiote_irq_handler+0x1ac>)
    4606:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    460a:	9206      	str	r2, [sp, #24]
        gpio_regs[i]->LATCH = *p_masks;
    460c:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    4610:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    4614:	9307      	str	r3, [sp, #28]
        gpio_regs[i]->LATCH = *p_masks;
    4616:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    461a:	9601      	str	r6, [sp, #4]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    461c:	f10d 0918 	add.w	r9, sp, #24
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4620:	f04f 0800 	mov.w	r8, #0
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    4624:	f04f 0b01 	mov.w	fp, #1
            while (latch[i])
    4628:	f8d9 3000 	ldr.w	r3, [r9]
    462c:	b9f3      	cbnz	r3, 466c <nrfx_gpiote_irq_handler+0xa0>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    462e:	f108 0820 	add.w	r8, r8, #32
    4632:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    4636:	f109 0904 	add.w	r9, r9, #4
    463a:	d1f5      	bne.n	4628 <nrfx_gpiote_irq_handler+0x5c>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    463c:	603b      	str	r3, [r7, #0]
    463e:	683b      	ldr	r3, [r7, #0]
        gpio_regs[i]->LATCH = *p_masks;
    4640:	9901      	ldr	r1, [sp, #4]
        *p_masks = gpio_regs[i]->LATCH;
    4642:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4646:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    464a:	9206      	str	r2, [sp, #24]
        gpio_regs[i]->LATCH = *p_masks;
    464c:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    4650:	9b01      	ldr	r3, [sp, #4]
    4652:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
    4656:	9307      	str	r3, [sp, #28]
        gpio_regs[i]->LATCH = *p_masks;
    4658:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
    465c:	4313      	orrs	r3, r2
    465e:	d1dd      	bne.n	461c <nrfx_gpiote_irq_handler+0x50>
        mask &= ~NRFX_BIT(ch);
    4660:	2401      	movs	r4, #1
    while (mask)
    4662:	2d00      	cmp	r5, #0
    4664:	d168      	bne.n	4738 <nrfx_gpiote_irq_handler+0x16c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    4666:	b009      	add	sp, #36	; 0x24
    4668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    466c:	fa93 f3a3 	rbit	r3, r3
    4670:	fab3 f383 	clz	r3, r3
                pin += 32 * i;
    4674:	eb08 0603 	add.w	r6, r8, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4678:	f106 0208 	add.w	r2, r6, #8
    467c:	4b3f      	ldr	r3, [pc, #252]	; (477c <nrfx_gpiote_irq_handler+0x1b0>)
    467e:	9605      	str	r6, [sp, #20]
    4680:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
    4684:	f3c2 0382 	ubfx	r3, r2, #2, #3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    4688:	08f4      	lsrs	r4, r6, #3
    468a:	9302      	str	r3, [sp, #8]
    468c:	469a      	mov	sl, r3
    p_mask8[byte_idx] &= ~(1 << bit);
    468e:	ab06      	add	r3, sp, #24
    bit = BITMASK_RELBIT_GET(bit);
    4690:	f006 0007 	and.w	r0, r6, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    4694:	fa0b fc00 	lsl.w	ip, fp, r0
    4698:	5d18      	ldrb	r0, [r3, r4]
    469a:	ea20 000c 	bic.w	r0, r0, ip
    469e:	5518      	strb	r0, [r3, r4]
    46a0:	0891      	lsrs	r1, r2, #2
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    46a2:	a805      	add	r0, sp, #20
    46a4:	9103      	str	r1, [sp, #12]
    46a6:	f7ff fd21 	bl	40ec <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    46aa:	9c05      	ldr	r4, [sp, #20]
    if (is_level(trigger))
    46ac:	9903      	ldr	r1, [sp, #12]
    46ae:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    46b2:	074b      	lsls	r3, r1, #29
    46b4:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    46b8:	f3c4 4401 	ubfx	r4, r4, #16, #2
    46bc:	d523      	bpl.n	4706 <nrfx_gpiote_irq_handler+0x13a>
        call_handler(pin, trigger);
    46be:	4651      	mov	r1, sl
    46c0:	4630      	mov	r0, r6
    46c2:	f7ff fc9b 	bl	3ffc <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    46c6:	a805      	add	r0, sp, #20
    46c8:	9605      	str	r6, [sp, #20]
    46ca:	f7ff fd0f 	bl	40ec <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    46ce:	9a05      	ldr	r2, [sp, #20]
    46d0:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    46d4:	b2e4      	uxtb	r4, r4
    46d6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    46da:	f3c2 4201 	ubfx	r2, r2, #16, #2
    46de:	4294      	cmp	r4, r2
    46e0:	d107      	bne.n	46f2 <nrfx_gpiote_irq_handler+0x126>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    46e2:	2100      	movs	r1, #0
    46e4:	4630      	mov	r0, r6
    46e6:	f004 f9a4 	bl	8a32 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    46ea:	4621      	mov	r1, r4
    46ec:	4630      	mov	r0, r6
    46ee:	f004 f9a0 	bl	8a32 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    46f2:	a805      	add	r0, sp, #20
    46f4:	9605      	str	r6, [sp, #20]
    46f6:	f7ff fcf9 	bl	40ec <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    46fa:	9b05      	ldr	r3, [sp, #20]
    46fc:	fa0b f303 	lsl.w	r3, fp, r3
    4700:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
    4704:	e790      	b.n	4628 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4706:	2c02      	cmp	r4, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    4708:	bf0c      	ite	eq
    470a:	2103      	moveq	r1, #3
    470c:	2102      	movne	r1, #2
    470e:	4630      	mov	r0, r6
    4710:	f004 f98f 	bl	8a32 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    4714:	9b02      	ldr	r3, [sp, #8]
    4716:	2b03      	cmp	r3, #3
    4718:	d004      	beq.n	4724 <nrfx_gpiote_irq_handler+0x158>
    471a:	2c02      	cmp	r4, #2
    471c:	d107      	bne.n	472e <nrfx_gpiote_irq_handler+0x162>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    471e:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    4722:	d1e6      	bne.n	46f2 <nrfx_gpiote_irq_handler+0x126>
            call_handler(pin, trigger);
    4724:	4651      	mov	r1, sl
    4726:	4630      	mov	r0, r6
    4728:	f7ff fc68 	bl	3ffc <call_handler>
    472c:	e7e1      	b.n	46f2 <nrfx_gpiote_irq_handler+0x126>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    472e:	2c03      	cmp	r4, #3
    4730:	d1df      	bne.n	46f2 <nrfx_gpiote_irq_handler+0x126>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    4732:	f1ba 0f02 	cmp.w	sl, #2
    4736:	e7f4      	b.n	4722 <nrfx_gpiote_irq_handler+0x156>
        uint32_t ch = NRF_CTZ(mask);
    4738:	fa95 f3a5 	rbit	r3, r5
    473c:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    4740:	fa04 f203 	lsl.w	r2, r4, r3
    4744:	009b      	lsls	r3, r3, #2
    4746:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    474a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    474e:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    4752:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    4756:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    475a:	f3c0 2005 	ubfx	r0, r0, #8, #6
    475e:	f3c1 4101 	ubfx	r1, r1, #16, #2
    4762:	f7ff fc4b 	bl	3ffc <call_handler>
    4766:	e77c      	b.n	4662 <nrfx_gpiote_irq_handler+0x96>
    4768:	40006100 	.word	0x40006100
    476c:	40006000 	.word	0x40006000
    4770:	40006120 	.word	0x40006120
    4774:	4000617c 	.word	0x4000617c
    4778:	50000300 	.word	0x50000300
    477c:	20000100 	.word	0x20000100

00004780 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    4780:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    4782:	4801      	ldr	r0, [pc, #4]	; (4788 <nrfx_ppi_channel_alloc+0x8>)
    4784:	f7ff bbe6 	b.w	3f54 <nrfx_flag32_alloc>
    4788:	2000017c 	.word	0x2000017c

0000478c <nrf_pwm_sequence_set>:
}

NRF_STATIC_INLINE void nrf_pwm_sequence_set(NRF_PWM_Type *             p_reg,
                                            uint8_t                    seq_id,
                                            nrf_pwm_sequence_t const * p_seq)
{
    478c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4790:	4604      	mov	r4, r0
    4792:	460e      	mov	r6, r1
    NRFX_ASSERT(p_seq != NULL);
    4794:	4615      	mov	r5, r2
    4796:	b95a      	cbnz	r2, 47b0 <nrf_pwm_sequence_set+0x24>
    4798:	4932      	ldr	r1, [pc, #200]	; (4864 <nrf_pwm_sequence_set+0xd8>)
    479a:	4833      	ldr	r0, [pc, #204]	; (4868 <nrf_pwm_sequence_set+0xdc>)
    479c:	4a33      	ldr	r2, [pc, #204]	; (486c <nrf_pwm_sequence_set+0xe0>)
    479e:	f240 23a7 	movw	r3, #679	; 0x2a7
    47a2:	f003 fe5c 	bl	845e <printk>
    47a6:	4831      	ldr	r0, [pc, #196]	; (486c <nrf_pwm_sequence_set+0xe0>)
    47a8:	f240 21a7 	movw	r1, #679	; 0x2a7
    47ac:	f003 fd80 	bl	82b0 <assert_post_action>

    nrf_pwm_seq_ptr_set(      p_reg, seq_id, p_seq->values.p_raw);
    47b0:	682f      	ldr	r7, [r5, #0]
NRF_STATIC_INLINE void nrf_pwm_seq_ptr_set(NRF_PWM_Type *   p_reg,
                                           uint8_t          seq_id,
                                           uint16_t const * p_values)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(p_values != NULL);
    47b2:	b95f      	cbnz	r7, 47cc <nrf_pwm_sequence_set+0x40>
    47b4:	492e      	ldr	r1, [pc, #184]	; (4870 <nrf_pwm_sequence_set+0xe4>)
    47b6:	482c      	ldr	r0, [pc, #176]	; (4868 <nrf_pwm_sequence_set+0xdc>)
    47b8:	4a2c      	ldr	r2, [pc, #176]	; (486c <nrf_pwm_sequence_set+0xe0>)
    47ba:	f44f 732d 	mov.w	r3, #692	; 0x2b4
    47be:	f003 fe4e 	bl	845e <printk>
    47c2:	482a      	ldr	r0, [pc, #168]	; (486c <nrf_pwm_sequence_set+0xe0>)
    47c4:	f44f 712d 	mov.w	r1, #692	; 0x2b4
    47c8:	f003 fd72 	bl	82b0 <assert_post_action>
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
    47cc:	eb04 1846 	add.w	r8, r4, r6, lsl #5
    47d0:	f8c8 7520 	str.w	r7, [r8, #1312]	; 0x520
    nrf_pwm_seq_cnt_set(      p_reg, seq_id, p_seq->length);
    47d4:	88af      	ldrh	r7, [r5, #4]
NRF_STATIC_INLINE void nrf_pwm_seq_cnt_set(NRF_PWM_Type * p_reg,
                                           uint8_t        seq_id,
                                           uint16_t       length)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(length != 0);
    47d6:	2f00      	cmp	r7, #0
    47d8:	d138      	bne.n	484c <nrf_pwm_sequence_set+0xc0>
    47da:	4926      	ldr	r1, [pc, #152]	; (4874 <nrf_pwm_sequence_set+0xe8>)
    47dc:	4a23      	ldr	r2, [pc, #140]	; (486c <nrf_pwm_sequence_set+0xe0>)
    47de:	4822      	ldr	r0, [pc, #136]	; (4868 <nrf_pwm_sequence_set+0xdc>)
    47e0:	f240 23bd 	movw	r3, #701	; 0x2bd
    47e4:	f003 fe3b 	bl	845e <printk>
    47e8:	f240 21bd 	movw	r1, #701	; 0x2bd
    NRFX_ASSERT(length <= PWM_SEQ_CNT_CNT_Msk);
    47ec:	481f      	ldr	r0, [pc, #124]	; (486c <nrf_pwm_sequence_set+0xe0>)
    47ee:	f003 fd5f 	bl	82b0 <assert_post_action>
    p_reg->SEQ[seq_id].CNT = length;
    47f2:	f8c8 7524 	str.w	r7, [r8, #1316]	; 0x524
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
    47f6:	68af      	ldr	r7, [r5, #8]
NRF_STATIC_INLINE void nrf_pwm_seq_refresh_set(NRF_PWM_Type * p_reg,
                                               uint8_t        seq_id,
                                               uint32_t       refresh)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(refresh <= PWM_SEQ_REFRESH_CNT_Msk);
    47f8:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
    47fc:	d30b      	bcc.n	4816 <nrf_pwm_sequence_set+0x8a>
    47fe:	491e      	ldr	r1, [pc, #120]	; (4878 <nrf_pwm_sequence_set+0xec>)
    4800:	4819      	ldr	r0, [pc, #100]	; (4868 <nrf_pwm_sequence_set+0xdc>)
    4802:	4a1a      	ldr	r2, [pc, #104]	; (486c <nrf_pwm_sequence_set+0xe0>)
    4804:	f240 23c7 	movw	r3, #711	; 0x2c7
    4808:	f003 fe29 	bl	845e <printk>
    480c:	4817      	ldr	r0, [pc, #92]	; (486c <nrf_pwm_sequence_set+0xe0>)
    480e:	f240 21c7 	movw	r1, #711	; 0x2c7
    4812:	f003 fd4d 	bl	82b0 <assert_post_action>
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
    4816:	68ed      	ldr	r5, [r5, #12]
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    4818:	ea4f 1846 	mov.w	r8, r6, lsl #5
    481c:	eb04 1646 	add.w	r6, r4, r6, lsl #5
NRF_STATIC_INLINE void nrf_pwm_seq_end_delay_set(NRF_PWM_Type * p_reg,
                                                 uint8_t        seq_id,
                                                 uint32_t       end_delay)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(end_delay <= PWM_SEQ_ENDDELAY_CNT_Msk);
    4820:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    4824:	f8c6 7528 	str.w	r7, [r6, #1320]	; 0x528
    NRFX_ASSERT(end_delay <= PWM_SEQ_ENDDELAY_CNT_Msk);
    4828:	d30b      	bcc.n	4842 <nrf_pwm_sequence_set+0xb6>
    482a:	4914      	ldr	r1, [pc, #80]	; (487c <nrf_pwm_sequence_set+0xf0>)
    482c:	480e      	ldr	r0, [pc, #56]	; (4868 <nrf_pwm_sequence_set+0xdc>)
    482e:	4a0f      	ldr	r2, [pc, #60]	; (486c <nrf_pwm_sequence_set+0xe0>)
    4830:	f44f 7334 	mov.w	r3, #720	; 0x2d0
    4834:	f003 fe13 	bl	845e <printk>
    4838:	480c      	ldr	r0, [pc, #48]	; (486c <nrf_pwm_sequence_set+0xe0>)
    483a:	f44f 7134 	mov.w	r1, #720	; 0x2d0
    483e:	f003 fd37 	bl	82b0 <assert_post_action>
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
    4842:	4444      	add	r4, r8
    4844:	f8c4 552c 	str.w	r5, [r4, #1324]	; 0x52c
}
    4848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    NRFX_ASSERT(length <= PWM_SEQ_CNT_CNT_Msk);
    484c:	043b      	lsls	r3, r7, #16
    484e:	d5d0      	bpl.n	47f2 <nrf_pwm_sequence_set+0x66>
    4850:	490b      	ldr	r1, [pc, #44]	; (4880 <nrf_pwm_sequence_set+0xf4>)
    4852:	4a06      	ldr	r2, [pc, #24]	; (486c <nrf_pwm_sequence_set+0xe0>)
    4854:	4804      	ldr	r0, [pc, #16]	; (4868 <nrf_pwm_sequence_set+0xdc>)
    4856:	f240 23be 	movw	r3, #702	; 0x2be
    485a:	f003 fe00 	bl	845e <printk>
    485e:	f240 21be 	movw	r1, #702	; 0x2be
    4862:	e7c3      	b.n	47ec <nrf_pwm_sequence_set+0x60>
    4864:	00009cb8 	.word	0x00009cb8
    4868:	00009190 	.word	0x00009190
    486c:	00009c86 	.word	0x00009c86
    4870:	00009ccd 	.word	0x00009ccd
    4874:	00009ce5 	.word	0x00009ce5
    4878:	00009d0f 	.word	0x00009d0f
    487c:	00009d30 	.word	0x00009d30
    4880:	00009cf1 	.word	0x00009cf1

00004884 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4884:	6802      	ldr	r2, [r0, #0]
    switch (port)
    4886:	0953      	lsrs	r3, r2, #5
{
    4888:	b510      	push	{r4, lr}
    488a:	4604      	mov	r4, r0
    switch (port)
    488c:	d02c      	beq.n	48e8 <nrf_gpio_pin_port_decode+0x64>
    488e:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    4890:	f64f 73ff 	movw	r3, #65535	; 0xffff
    4894:	bf18      	it	ne
    4896:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    4898:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    489c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    489e:	07db      	lsls	r3, r3, #31
    48a0:	d40b      	bmi.n	48ba <nrf_gpio_pin_port_decode+0x36>
    48a2:	4914      	ldr	r1, [pc, #80]	; (48f4 <nrf_gpio_pin_port_decode+0x70>)
    48a4:	4814      	ldr	r0, [pc, #80]	; (48f8 <nrf_gpio_pin_port_decode+0x74>)
    48a6:	4a15      	ldr	r2, [pc, #84]	; (48fc <nrf_gpio_pin_port_decode+0x78>)
    48a8:	f240 2329 	movw	r3, #553	; 0x229
    48ac:	f003 fdd7 	bl	845e <printk>
    48b0:	4812      	ldr	r0, [pc, #72]	; (48fc <nrf_gpio_pin_port_decode+0x78>)
    48b2:	f240 2129 	movw	r1, #553	; 0x229
    48b6:	f003 fcfb 	bl	82b0 <assert_post_action>
    uint32_t pin_number = *p_pin;
    48ba:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    48bc:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    48c0:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    48c2:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    48c4:	d00d      	beq.n	48e2 <nrf_gpio_pin_port_decode+0x5e>
    48c6:	2b01      	cmp	r3, #1
    48c8:	d011      	beq.n	48ee <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    48ca:	490d      	ldr	r1, [pc, #52]	; (4900 <nrf_gpio_pin_port_decode+0x7c>)
    48cc:	480a      	ldr	r0, [pc, #40]	; (48f8 <nrf_gpio_pin_port_decode+0x74>)
    48ce:	4a0b      	ldr	r2, [pc, #44]	; (48fc <nrf_gpio_pin_port_decode+0x78>)
    48d0:	f240 232e 	movw	r3, #558	; 0x22e
    48d4:	f003 fdc3 	bl	845e <printk>
    48d8:	4808      	ldr	r0, [pc, #32]	; (48fc <nrf_gpio_pin_port_decode+0x78>)
    48da:	f240 212e 	movw	r1, #558	; 0x22e
    48de:	f003 fce7 	bl	82b0 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    48e2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    48e6:	bd10      	pop	{r4, pc}
    switch (port)
    48e8:	f04f 33ff 	mov.w	r3, #4294967295
    48ec:	e7d4      	b.n	4898 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    48ee:	4805      	ldr	r0, [pc, #20]	; (4904 <nrf_gpio_pin_port_decode+0x80>)
    48f0:	e7f9      	b.n	48e6 <nrf_gpio_pin_port_decode+0x62>
    48f2:	bf00      	nop
    48f4:	00009b0f 	.word	0x00009b0f
    48f8:	00009190 	.word	0x00009190
    48fc:	00009adc 	.word	0x00009adc
    4900:	00009cef 	.word	0x00009cef
    4904:	50000300 	.word	0x50000300

00004908 <nrfx_pwm_init>:

nrfx_err_t nrfx_pwm_init(nrfx_pwm_t const *        p_instance,
                         nrfx_pwm_config_t const * p_config,
                         nrfx_pwm_handler_t        handler,
                         void *                    p_context)
{
    4908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    490c:	4606      	mov	r6, r0
    490e:	b087      	sub	sp, #28
    4910:	4691      	mov	r9, r2
    4912:	4698      	mov	r8, r3
    NRFX_ASSERT(p_config);
    4914:	460c      	mov	r4, r1
    4916:	b949      	cbnz	r1, 492c <nrfx_pwm_init+0x24>
    4918:	4959      	ldr	r1, [pc, #356]	; (4a80 <nrfx_pwm_init+0x178>)
    491a:	485a      	ldr	r0, [pc, #360]	; (4a84 <nrfx_pwm_init+0x17c>)
    491c:	4a5a      	ldr	r2, [pc, #360]	; (4a88 <nrfx_pwm_init+0x180>)
    491e:	238c      	movs	r3, #140	; 0x8c
    4920:	f003 fd9d 	bl	845e <printk>
    4924:	4858      	ldr	r0, [pc, #352]	; (4a88 <nrfx_pwm_init+0x180>)
    4926:	218c      	movs	r1, #140	; 0x8c
    4928:	f003 fcc2 	bl	82b0 <assert_post_action>

    nrfx_err_t err_code;

    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    492c:	7937      	ldrb	r7, [r6, #4]

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    492e:	4d57      	ldr	r5, [pc, #348]	; (4a8c <nrfx_pwm_init+0x184>)
    4930:	210c      	movs	r1, #12
    4932:	4379      	muls	r1, r7
    4934:	186b      	adds	r3, r5, r1
    4936:	7a1a      	ldrb	r2, [r3, #8]
    4938:	2a00      	cmp	r2, #0
    493a:	f040 809f 	bne.w	4a7c <nrfx_pwm_init+0x174>
        return err_code;
    }

    p_cb->handler = handler;
    p_cb->p_context = p_context;
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    493e:	7b22      	ldrb	r2, [r4, #12]
    p_cb->handler = handler;
    4940:	f845 9001 	str.w	r9, [r5, r1]
    p_cb->p_context = p_context;
    4944:	f8c3 8004 	str.w	r8, [r3, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    4948:	729a      	strb	r2, [r3, #10]
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    494a:	2a00      	cmp	r2, #0
    494c:	d04d      	beq.n	49ea <nrfx_pwm_init+0xe2>
    494e:	7b63      	ldrb	r3, [r4, #13]
    4950:	2b00      	cmp	r3, #0
    4952:	d04a      	beq.n	49ea <nrfx_pwm_init+0xe2>

    configure_pins(p_instance, p_config);

    nrf_pwm_enable(p_instance->p_registers);
    4954:	f8d6 8000 	ldr.w	r8, [r6]
    nrf_pwm_configure(p_instance->p_registers,
    4958:	f8b4 9008 	ldrh.w	r9, [r4, #8]
    p_reg->ENABLE = (PWM_ENABLE_ENABLE_Enabled << PWM_ENABLE_ENABLE_Pos);
    495c:	2301      	movs	r3, #1
    495e:	f8c8 3500 	str.w	r3, [r8, #1280]	; 0x500
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);
    4962:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
    4966:	f894 b005 	ldrb.w	fp, [r4, #5]
    496a:	f894 a006 	ldrb.w	sl, [r4, #6]
    496e:	2b00      	cmp	r3, #0
    4970:	da0b      	bge.n	498a <nrfx_pwm_init+0x82>
    4972:	4947      	ldr	r1, [pc, #284]	; (4a90 <nrfx_pwm_init+0x188>)
    4974:	4843      	ldr	r0, [pc, #268]	; (4a84 <nrfx_pwm_init+0x17c>)
    4976:	4a47      	ldr	r2, [pc, #284]	; (4a94 <nrfx_pwm_init+0x18c>)
    4978:	f44f 7327 	mov.w	r3, #668	; 0x29c
    497c:	f003 fd6f 	bl	845e <printk>
    4980:	4844      	ldr	r0, [pc, #272]	; (4a94 <nrfx_pwm_init+0x18c>)
    4982:	f44f 7127 	mov.w	r1, #668	; 0x29c
    4986:	f003 fc93 	bl	82b0 <assert_post_action>
    p_reg->PRESCALER  = base_clock;
    498a:	f8c8 b50c 	str.w	fp, [r8, #1292]	; 0x50c
        p_config->base_clock, p_config->count_mode, p_config->top_value);
    nrf_pwm_decoder_set(p_instance->p_registers,
    498e:	6830      	ldr	r0, [r6, #0]
    p_reg->MODE       = mode;
    4990:	f8c8 a504 	str.w	sl, [r8, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
    4994:	f8c8 9508 	str.w	r9, [r8, #1288]	; 0x508

NRF_STATIC_INLINE void nrf_pwm_decoder_set(NRF_PWM_Type *     p_reg,
                                           nrf_pwm_dec_load_t dec_load,
                                           nrf_pwm_dec_step_t dec_step)
{
    p_reg->DECODER = ((uint32_t)dec_load << PWM_DECODER_LOAD_Pos) |
    4998:	8963      	ldrh	r3, [r4, #10]
    499a:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
    p_reg->SHORTS = mask;
    499e:	2300      	movs	r3, #0
    49a0:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    p_reg->INTEN = mask;
    49a4:	f8c0 3300 	str.w	r3, [r0, #768]	; 0x300
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    49a8:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    49ac:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    49b0:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
    49b4:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
    49b8:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    49bc:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    49c0:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    49c4:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    // handler is not used.
#if defined(USE_DMA_ISSUE_WORKAROUND)
    NRFX_IRQ_PRIORITY_SET(DMA_ISSUE_EGU_IRQn, p_config->irq_priority);
    NRFX_IRQ_ENABLE(DMA_ISSUE_EGU_IRQn);
#else
    if (p_cb->handler)
    49c8:	230c      	movs	r3, #12
    49ca:	437b      	muls	r3, r7
    49cc:	58eb      	ldr	r3, [r5, r3]
    49ce:	b11b      	cbz	r3, 49d8 <nrfx_pwm_init+0xd0>
#endif
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_registers),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
    49d0:	f340 3007 	sbfx	r0, r0, #12, #8
    49d4:	f7fd f9a2 	bl	1d1c <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    49d8:	230c      	movs	r3, #12
    49da:	fb03 5507 	mla	r5, r3, r7, r5

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    49de:	482e      	ldr	r0, [pc, #184]	; (4a98 <nrfx_pwm_init+0x190>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    49e0:	2301      	movs	r3, #1
    49e2:	722b      	strb	r3, [r5, #8]
}
    49e4:	b007      	add	sp, #28
    49e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    49ea:	f104 39ff 	add.w	r9, r4, #4294967295
    49ee:	f10d 0808 	add.w	r8, sp, #8
    49f2:	f104 0a03 	add.w	sl, r4, #3
        uint8_t output_pin = p_config->output_pins[i];
    49f6:	f819 2f01 	ldrb.w	r2, [r9, #1]!
        if (output_pin != NRFX_PWM_PIN_NOT_USED)
    49fa:	2aff      	cmp	r2, #255	; 0xff
    49fc:	d039      	beq.n	4a72 <nrfx_pwm_init+0x16a>
            if (!p_config->skip_gpio_cfg)
    49fe:	7b21      	ldrb	r1, [r4, #12]
            out_pins[i]   = output_pin & ~NRFX_PWM_PIN_INVERTED;
    4a00:	f022 0b80 	bic.w	fp, r2, #128	; 0x80
    4a04:	f8c8 b000 	str.w	fp, [r8]
            if (!p_config->skip_gpio_cfg)
    4a08:	b9b1      	cbnz	r1, 4a38 <nrfx_pwm_init+0x130>
    if (value == 0)
    4a0a:	0613      	lsls	r3, r2, #24
    4a0c:	f8cd b004 	str.w	fp, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4a10:	a801      	add	r0, sp, #4
    if (value == 0)
    4a12:	d426      	bmi.n	4a62 <nrfx_pwm_init+0x15a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4a14:	f7ff ff36 	bl	4884 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4a18:	9901      	ldr	r1, [sp, #4]
    4a1a:	2201      	movs	r2, #1
    4a1c:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
    4a1e:	f8c0 250c 	str.w	r2, [r0, #1292]	; 0x50c
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4a22:	a801      	add	r0, sp, #4
    4a24:	f8cd b004 	str.w	fp, [sp, #4]
    4a28:	f7ff ff2c 	bl	4884 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4a2c:	9b01      	ldr	r3, [sp, #4]
    4a2e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4a32:	2203      	movs	r2, #3
    4a34:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    4a38:	45d1      	cmp	r9, sl
    4a3a:	f108 0804 	add.w	r8, r8, #4
    4a3e:	d1da      	bne.n	49f6 <nrfx_pwm_init+0xee>
    if (!p_config->skip_psel_cfg)
    4a40:	7b63      	ldrb	r3, [r4, #13]
    4a42:	2b00      	cmp	r3, #0
    4a44:	d186      	bne.n	4954 <nrfx_pwm_init+0x4c>
    4a46:	6833      	ldr	r3, [r6, #0]
        p_reg->PSEL.OUT[i] = out_pins[i];
    4a48:	9a02      	ldr	r2, [sp, #8]
    4a4a:	f8c3 2560 	str.w	r2, [r3, #1376]	; 0x560
    4a4e:	9a03      	ldr	r2, [sp, #12]
    4a50:	f8c3 2564 	str.w	r2, [r3, #1380]	; 0x564
    4a54:	9a04      	ldr	r2, [sp, #16]
    4a56:	f8c3 2568 	str.w	r2, [r3, #1384]	; 0x568
    4a5a:	9a05      	ldr	r2, [sp, #20]
    4a5c:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    4a60:	e778      	b.n	4954 <nrfx_pwm_init+0x4c>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4a62:	f7ff ff0f 	bl	4884 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4a66:	9901      	ldr	r1, [sp, #4]
    4a68:	2201      	movs	r2, #1
    4a6a:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    4a6c:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    4a70:	e7d7      	b.n	4a22 <nrfx_pwm_init+0x11a>
            out_pins[i] = NRF_PWM_PIN_NOT_CONNECTED;
    4a72:	f04f 33ff 	mov.w	r3, #4294967295
    4a76:	f8c8 3000 	str.w	r3, [r8]
    4a7a:	e7dd      	b.n	4a38 <nrfx_pwm_init+0x130>
        return err_code;
    4a7c:	4807      	ldr	r0, [pc, #28]	; (4a9c <nrfx_pwm_init+0x194>)
    4a7e:	e7b1      	b.n	49e4 <nrfx_pwm_init+0xdc>
    4a80:	00009d8e 	.word	0x00009d8e
    4a84:	00009190 	.word	0x00009190
    4a88:	00009d53 	.word	0x00009d53
    4a8c:	20000c28 	.word	0x20000c28
    4a90:	00009d97 	.word	0x00009d97
    4a94:	00009c86 	.word	0x00009c86
    4a98:	0bad0000 	.word	0x0bad0000
    4a9c:	0bad0005 	.word	0x0bad0005

00004aa0 <nrfx_pwm_simple_playback>:

uint32_t nrfx_pwm_simple_playback(nrfx_pwm_t const *         p_instance,
                                  nrf_pwm_sequence_t const * p_sequence,
                                  uint16_t                   playback_count,
                                  uint32_t                   flags)
{
    4aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4aa4:	4698      	mov	r8, r3
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    4aa6:	7903      	ldrb	r3, [r0, #4]
{
    4aa8:	4614      	mov	r4, r2
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    4aaa:	4a31      	ldr	r2, [pc, #196]	; (4b70 <nrfx_pwm_simple_playback+0xd0>)
{
    4aac:	460e      	mov	r6, r1
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    4aae:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    4ab2:	eb02 0781 	add.w	r7, r2, r1, lsl #2
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    4ab6:	210c      	movs	r1, #12
    4ab8:	fb01 2303 	mla	r3, r1, r3, r2
{
    4abc:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    4abe:	7a1b      	ldrb	r3, [r3, #8]
    4ac0:	b95b      	cbnz	r3, 4ada <nrfx_pwm_simple_playback+0x3a>
    4ac2:	492c      	ldr	r1, [pc, #176]	; (4b74 <nrfx_pwm_simple_playback+0xd4>)
    4ac4:	482c      	ldr	r0, [pc, #176]	; (4b78 <nrfx_pwm_simple_playback+0xd8>)
    4ac6:	4a2d      	ldr	r2, [pc, #180]	; (4b7c <nrfx_pwm_simple_playback+0xdc>)
    4ac8:	f44f 7396 	mov.w	r3, #300	; 0x12c
    4acc:	f003 fcc7 	bl	845e <printk>
    4ad0:	482a      	ldr	r0, [pc, #168]	; (4b7c <nrfx_pwm_simple_playback+0xdc>)
    4ad2:	f44f 7196 	mov.w	r1, #300	; 0x12c
    4ad6:	f003 fbeb 	bl	82b0 <assert_post_action>
    NRFX_ASSERT(playback_count > 0);
    4ada:	b95c      	cbnz	r4, 4af4 <nrfx_pwm_simple_playback+0x54>
    4adc:	4928      	ldr	r1, [pc, #160]	; (4b80 <nrfx_pwm_simple_playback+0xe0>)
    4ade:	4826      	ldr	r0, [pc, #152]	; (4b78 <nrfx_pwm_simple_playback+0xd8>)
    4ae0:	4a26      	ldr	r2, [pc, #152]	; (4b7c <nrfx_pwm_simple_playback+0xdc>)
    4ae2:	f240 132d 	movw	r3, #301	; 0x12d
    4ae6:	f003 fcba 	bl	845e <printk>
    4aea:	4824      	ldr	r0, [pc, #144]	; (4b7c <nrfx_pwm_simple_playback+0xdc>)
    4aec:	f240 112d 	movw	r1, #301	; 0x12d
    4af0:	f003 fbde 	bl	82b0 <assert_post_action>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    4af4:	6833      	ldr	r3, [r6, #0]
    4af6:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    NRFX_ASSERT(nrfx_is_in_ram(p_sequence->values.p_raw));
    4afa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    4afe:	d00b      	beq.n	4b18 <nrfx_pwm_simple_playback+0x78>
    4b00:	4920      	ldr	r1, [pc, #128]	; (4b84 <nrfx_pwm_simple_playback+0xe4>)
    4b02:	481d      	ldr	r0, [pc, #116]	; (4b78 <nrfx_pwm_simple_playback+0xd8>)
    4b04:	4a1d      	ldr	r2, [pc, #116]	; (4b7c <nrfx_pwm_simple_playback+0xdc>)
    4b06:	f44f 7397 	mov.w	r3, #302	; 0x12e
    4b0a:	f003 fca8 	bl	845e <printk>
    4b0e:	481b      	ldr	r0, [pc, #108]	; (4b7c <nrfx_pwm_simple_playback+0xdc>)
    4b10:	f44f 7197 	mov.w	r1, #302	; 0x12e
    4b14:	f003 fbcc 	bl	82b0 <assert_post_action>

    // To take advantage of the looping mechanism, we need to use both sequences
    // (single sequence can be played back only once).
    nrf_pwm_sequence_set(p_instance->p_registers, 0, p_sequence);
    4b18:	6828      	ldr	r0, [r5, #0]
    4b1a:	4632      	mov	r2, r6
    4b1c:	2100      	movs	r1, #0
    4b1e:	f7ff fe35 	bl	478c <nrf_pwm_sequence_set>
    nrf_pwm_sequence_set(p_instance->p_registers, 1, p_sequence);
    4b22:	6828      	ldr	r0, [r5, #0]
    4b24:	4632      	mov	r2, r6
    4b26:	2101      	movs	r1, #1
    4b28:	f7ff fe30 	bl	478c <nrf_pwm_sequence_set>
    bool odd = (playback_count & 1);
    nrf_pwm_loop_set(p_instance->p_registers,
    4b2c:	6828      	ldr	r0, [r5, #0]
    4b2e:	f004 0301 	and.w	r3, r4, #1
}

NRF_STATIC_INLINE void nrf_pwm_loop_set(NRF_PWM_Type * p_reg,
                                        uint16_t       loop_count)
{
    p_reg->LOOP = loop_count;
    4b32:	eb03 0454 	add.w	r4, r3, r4, lsr #1
        (playback_count / 2) + (odd ? 1 : 0));

    uint32_t shorts_mask;
    if (flags & NRFX_PWM_FLAG_STOP)
    4b36:	f018 0f01 	tst.w	r8, #1
    4b3a:	f8c0 4514 	str.w	r4, [r0, #1300]	; 0x514
    4b3e:	d114      	bne.n	4b6a <nrfx_pwm_simple_playback+0xca>
    {
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    }
    else if (flags & NRFX_PWM_FLAG_LOOP)
    4b40:	f018 0202 	ands.w	r2, r8, #2
    4b44:	d003      	beq.n	4b4e <nrfx_pwm_simple_playback+0xae>
    {
        shorts_mask = odd ? NRF_PWM_SHORT_LOOPSDONE_SEQSTART1_MASK
                          : NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK;
    4b46:	2b00      	cmp	r3, #0
    4b48:	bf14      	ite	ne
    4b4a:	2208      	movne	r2, #8
    4b4c:	2204      	moveq	r2, #4
                  __func__,
                  p_sequence->length);
    NRFX_LOG_DEBUG("Sequence data:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_sequence->values.p_raw,
                           p_sequence->length * sizeof(uint16_t));
    return start_playback(p_instance, p_cb, flags,
    4b4e:	2b00      	cmp	r3, #0
    p_reg->SHORTS = mask;
    4b50:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    4b54:	4639      	mov	r1, r7
    4b56:	fa5f f288 	uxtb.w	r2, r8
    4b5a:	bf18      	it	ne
    4b5c:	230c      	movne	r3, #12
        odd ? NRF_PWM_TASK_SEQSTART1 : NRF_PWM_TASK_SEQSTART0);
}
    4b5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return start_playback(p_instance, p_cb, flags,
    4b62:	bf08      	it	eq
    4b64:	2308      	moveq	r3, #8
    4b66:	f003 bf73 	b.w	8a50 <start_playback.isra.0>
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    4b6a:	2210      	movs	r2, #16
    4b6c:	e7ef      	b.n	4b4e <nrfx_pwm_simple_playback+0xae>
    4b6e:	bf00      	nop
    4b70:	20000c28 	.word	0x20000c28
    4b74:	00009db8 	.word	0x00009db8
    4b78:	00009190 	.word	0x00009190
    4b7c:	00009d53 	.word	0x00009d53
    4b80:	00009de4 	.word	0x00009de4
    4b84:	00009df7 	.word	0x00009df7

00004b88 <nrfx_pwm_is_stopped>:
    return ret_val;
}


bool nrfx_pwm_is_stopped(nrfx_pwm_t const * p_instance)
{
    4b88:	b570      	push	{r4, r5, r6, lr}
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    4b8a:	4e12      	ldr	r6, [pc, #72]	; (4bd4 <nrfx_pwm_is_stopped+0x4c>)
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    4b8c:	7904      	ldrb	r4, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    4b8e:	220c      	movs	r2, #12
    4b90:	fb02 6204 	mla	r2, r2, r4, r6
{
    4b94:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    4b96:	7a12      	ldrb	r2, [r2, #8]
    4b98:	b95a      	cbnz	r2, 4bb2 <nrfx_pwm_is_stopped+0x2a>
    4b9a:	490f      	ldr	r1, [pc, #60]	; (4bd8 <nrfx_pwm_is_stopped+0x50>)
    4b9c:	480f      	ldr	r0, [pc, #60]	; (4bdc <nrfx_pwm_is_stopped+0x54>)
    4b9e:	4a10      	ldr	r2, [pc, #64]	; (4be0 <nrfx_pwm_is_stopped+0x58>)
    4ba0:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
    4ba4:	f003 fc5b 	bl	845e <printk>
    4ba8:	480d      	ldr	r0, [pc, #52]	; (4be0 <nrfx_pwm_is_stopped+0x58>)
    4baa:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    4bae:	f003 fb7f 	bl	82b0 <assert_post_action>

    bool ret_val = false;

    // If the event handler is used (interrupts are enabled), the state will
    // be changed in interrupt handler when the STOPPED event occurs.
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    4bb2:	230c      	movs	r3, #12
    {
        ret_val = true;
    }
    // If interrupts are disabled, we must check the STOPPED event here.
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
    4bb4:	682a      	ldr	r2, [r5, #0]
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    4bb6:	fb03 6404 	mla	r4, r3, r4, r6
    4bba:	7a23      	ldrb	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4bbc:	f8d2 2104 	ldr.w	r2, [r2, #260]	; 0x104
    4bc0:	b2db      	uxtb	r3, r3
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
    4bc2:	b91a      	cbnz	r2, 4bcc <nrfx_pwm_is_stopped+0x44>
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    4bc4:	1e98      	subs	r0, r3, #2
    4bc6:	bf18      	it	ne
    4bc8:	2001      	movne	r0, #1
        ret_val = true;
    }

    NRFX_LOG_INFO("%s returned %d.", __func__, ret_val);
    return ret_val;
}
    4bca:	bd70      	pop	{r4, r5, r6, pc}
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    4bcc:	2001      	movs	r0, #1
    4bce:	7220      	strb	r0, [r4, #8]
        ret_val = true;
    4bd0:	e7fb      	b.n	4bca <nrfx_pwm_is_stopped+0x42>
    4bd2:	bf00      	nop
    4bd4:	20000c28 	.word	0x20000c28
    4bd8:	00009db8 	.word	0x00009db8
    4bdc:	00009190 	.word	0x00009190
    4be0:	00009d53 	.word	0x00009d53

00004be4 <nrfx_pwm_stop>:
{
    4be4:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
    4be6:	4a14      	ldr	r2, [pc, #80]	; (4c38 <nrfx_pwm_stop+0x54>)
    4be8:	7903      	ldrb	r3, [r0, #4]
{
    4bea:	460d      	mov	r5, r1
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
    4bec:	210c      	movs	r1, #12
    4bee:	fb01 2303 	mla	r3, r1, r3, r2
{
    4bf2:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
    4bf4:	7a1b      	ldrb	r3, [r3, #8]
    4bf6:	b95b      	cbnz	r3, 4c10 <nrfx_pwm_stop+0x2c>
    4bf8:	4910      	ldr	r1, [pc, #64]	; (4c3c <nrfx_pwm_stop+0x58>)
    4bfa:	4811      	ldr	r0, [pc, #68]	; (4c40 <nrfx_pwm_stop+0x5c>)
    4bfc:	4a11      	ldr	r2, [pc, #68]	; (4c44 <nrfx_pwm_stop+0x60>)
    4bfe:	f240 1385 	movw	r3, #389	; 0x185
    4c02:	f003 fc2c 	bl	845e <printk>
    4c06:	480f      	ldr	r0, [pc, #60]	; (4c44 <nrfx_pwm_stop+0x60>)
    4c08:	f240 1185 	movw	r1, #389	; 0x185
    4c0c:	f003 fb50 	bl	82b0 <assert_post_action>
    nrf_pwm_shorts_set(p_instance->p_registers, 0);
    4c10:	6823      	ldr	r3, [r4, #0]
    p_reg->SHORTS = mask;
    4c12:	2200      	movs	r2, #0
    4c14:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4c18:	2201      	movs	r2, #1
    4c1a:	605a      	str	r2, [r3, #4]
    if (nrfx_pwm_is_stopped(p_instance))
    4c1c:	4620      	mov	r0, r4
    4c1e:	f7ff ffb3 	bl	4b88 <nrfx_pwm_is_stopped>
    4c22:	b938      	cbnz	r0, 4c34 <nrfx_pwm_stop+0x50>
            if (nrfx_pwm_is_stopped(p_instance))
    4c24:	4620      	mov	r0, r4
    4c26:	f7ff ffaf 	bl	4b88 <nrfx_pwm_is_stopped>
    4c2a:	b918      	cbnz	r0, 4c34 <nrfx_pwm_stop+0x50>
        } while (wait_until_stopped);
    4c2c:	2d00      	cmp	r5, #0
    4c2e:	d1f9      	bne.n	4c24 <nrfx_pwm_stop+0x40>
}
    4c30:	4628      	mov	r0, r5
    4c32:	bd38      	pop	{r3, r4, r5, pc}
        ret_val = true;
    4c34:	2501      	movs	r5, #1
    4c36:	e7fb      	b.n	4c30 <nrfx_pwm_stop+0x4c>
    4c38:	20000c28 	.word	0x20000c28
    4c3c:	00009e20 	.word	0x00009e20
    4c40:	00009190 	.word	0x00009190
    4c44:	00009d53 	.word	0x00009d53

00004c48 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4c48:	4b03      	ldr	r3, [pc, #12]	; (4c58 <nrf52_errata_136+0x10>)
            if (var1 == 0x08)
    4c4a:	6818      	ldr	r0, [r3, #0]
}
    4c4c:	f1a0 0308 	sub.w	r3, r0, #8
    4c50:	4258      	negs	r0, r3
    4c52:	4158      	adcs	r0, r3
    4c54:	4770      	bx	lr
    4c56:	bf00      	nop
    4c58:	10000130 	.word	0x10000130

00004c5c <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4c5c:	4b06      	ldr	r3, [pc, #24]	; (4c78 <nrf52_errata_103+0x1c>)
            if (var1 == 0x08)
    4c5e:	681b      	ldr	r3, [r3, #0]
    4c60:	2b08      	cmp	r3, #8
    4c62:	d106      	bne.n	4c72 <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    4c64:	4b05      	ldr	r3, [pc, #20]	; (4c7c <nrf52_errata_103+0x20>)
    4c66:	681b      	ldr	r3, [r3, #0]
                switch(var2)
    4c68:	2b05      	cmp	r3, #5
    4c6a:	d802      	bhi.n	4c72 <nrf52_errata_103+0x16>
    4c6c:	4a04      	ldr	r2, [pc, #16]	; (4c80 <nrf52_errata_103+0x24>)
    4c6e:	5cd0      	ldrb	r0, [r2, r3]
    4c70:	4770      	bx	lr
        return false;
    4c72:	2000      	movs	r0, #0
}
    4c74:	4770      	bx	lr
    4c76:	bf00      	nop
    4c78:	10000130 	.word	0x10000130
    4c7c:	10000134 	.word	0x10000134
    4c80:	00009e6b 	.word	0x00009e6b

00004c84 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    4c84:	4a02      	ldr	r2, [pc, #8]	; (4c90 <nvmc_wait+0xc>)
    4c86:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    4c8a:	2b00      	cmp	r3, #0
    4c8c:	d0fb      	beq.n	4c86 <nvmc_wait+0x2>
}
    4c8e:	4770      	bx	lr
    4c90:	4001e000 	.word	0x4001e000

00004c94 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    4c94:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    4c96:	f7ff ffd7 	bl	4c48 <nrf52_errata_136>
    4c9a:	b140      	cbz	r0, 4cae <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    4c9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4ca0:	2200      	movs	r2, #0
    4ca2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    4ca6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    4caa:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    4cae:	f7ff ffcb 	bl	4c48 <nrf52_errata_136>
    4cb2:	2800      	cmp	r0, #0
    4cb4:	d046      	beq.n	4d44 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    4cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4cba:	4b5b      	ldr	r3, [pc, #364]	; (4e28 <SystemInit+0x194>)
    4cbc:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    4cc0:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    4cc4:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    4cc8:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    4ccc:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    4cd0:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    4cd4:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    4cd8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    4cdc:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    4ce0:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    4ce4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    4ce8:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    4cec:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    4cf0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    4cf4:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    4cf8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    4cfc:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    4d00:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    4d04:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    4d08:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    4d0c:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    4d10:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    4d14:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    4d18:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    4d1c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    4d20:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    4d24:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    4d28:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    4d2c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    4d30:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    4d34:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    4d38:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    4d3c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    4d40:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    4d44:	f7ff ff8a 	bl	4c5c <nrf52_errata_103>
    4d48:	b110      	cbz	r0, 4d50 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    4d4a:	4b38      	ldr	r3, [pc, #224]	; (4e2c <SystemInit+0x198>)
    4d4c:	4a38      	ldr	r2, [pc, #224]	; (4e30 <SystemInit+0x19c>)
    4d4e:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    4d50:	f7ff ff84 	bl	4c5c <nrf52_errata_103>
    4d54:	b118      	cbz	r0, 4d5e <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    4d56:	4b37      	ldr	r3, [pc, #220]	; (4e34 <SystemInit+0x1a0>)
    4d58:	22fb      	movs	r2, #251	; 0xfb
    4d5a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    4d5e:	f7ff ff7d 	bl	4c5c <nrf52_errata_103>
    4d62:	b148      	cbz	r0, 4d78 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    4d64:	4934      	ldr	r1, [pc, #208]	; (4e38 <SystemInit+0x1a4>)
    4d66:	4b35      	ldr	r3, [pc, #212]	; (4e3c <SystemInit+0x1a8>)
    4d68:	680a      	ldr	r2, [r1, #0]
    4d6a:	681b      	ldr	r3, [r3, #0]
    4d6c:	f022 020f 	bic.w	r2, r2, #15
    4d70:	f003 030f 	and.w	r3, r3, #15
    4d74:	4313      	orrs	r3, r2
    4d76:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    4d78:	f7ff ff70 	bl	4c5c <nrf52_errata_103>
    4d7c:	b118      	cbz	r0, 4d86 <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    4d7e:	4b30      	ldr	r3, [pc, #192]	; (4e40 <SystemInit+0x1ac>)
    4d80:	f44f 7200 	mov.w	r2, #512	; 0x200
    4d84:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    4d86:	f7ff ff5f 	bl	4c48 <nrf52_errata_136>
    4d8a:	b148      	cbz	r0, 4da0 <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    4d8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4d90:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    4d94:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    4d96:	bf44      	itt	mi
    4d98:	f06f 0201 	mvnmi.w	r2, #1
    4d9c:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4da0:	4b28      	ldr	r3, [pc, #160]	; (4e44 <SystemInit+0x1b0>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    4da2:	681b      	ldr	r3, [r3, #0]
    4da4:	2b08      	cmp	r3, #8
    4da6:	d10e      	bne.n	4dc6 <SystemInit+0x132>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    4da8:	4b27      	ldr	r3, [pc, #156]	; (4e48 <SystemInit+0x1b4>)
    4daa:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
    4dac:	2b05      	cmp	r3, #5
    4dae:	d802      	bhi.n	4db6 <SystemInit+0x122>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    4db0:	4a26      	ldr	r2, [pc, #152]	; (4e4c <SystemInit+0x1b8>)
    4db2:	5cd3      	ldrb	r3, [r2, r3]
    4db4:	b13b      	cbz	r3, 4dc6 <SystemInit+0x132>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    4db6:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4dba:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    4dbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4dc2:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    4dc6:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4dca:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    4dce:	2a00      	cmp	r2, #0
    4dd0:	db03      	blt.n	4dda <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    4dd2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    4dd6:	2b00      	cmp	r3, #0
    4dd8:	da22      	bge.n	4e20 <SystemInit+0x18c>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4dda:	491d      	ldr	r1, [pc, #116]	; (4e50 <SystemInit+0x1bc>)
    4ddc:	2301      	movs	r3, #1
    4dde:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    4de2:	f7ff ff4f 	bl	4c84 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    4de6:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    4dea:	2412      	movs	r4, #18
    4dec:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    4df0:	f7ff ff48 	bl	4c84 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    4df4:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    4df8:	f7ff ff44 	bl	4c84 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4dfc:	2300      	movs	r3, #0
    4dfe:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    4e02:	f7ff ff3f 	bl	4c84 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    4e06:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    4e0a:	4912      	ldr	r1, [pc, #72]	; (4e54 <SystemInit+0x1c0>)
    4e0c:	4b12      	ldr	r3, [pc, #72]	; (4e58 <SystemInit+0x1c4>)
    4e0e:	68ca      	ldr	r2, [r1, #12]
    4e10:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4e14:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4e16:	60cb      	str	r3, [r1, #12]
    4e18:	f3bf 8f4f 	dsb	sy
    __NOP();
    4e1c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    4e1e:	e7fd      	b.n	4e1c <SystemInit+0x188>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    4e20:	4b0e      	ldr	r3, [pc, #56]	; (4e5c <SystemInit+0x1c8>)
    4e22:	4a0f      	ldr	r2, [pc, #60]	; (4e60 <SystemInit+0x1cc>)
    4e24:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    4e26:	bd10      	pop	{r4, pc}
    4e28:	4000c000 	.word	0x4000c000
    4e2c:	4000568c 	.word	0x4000568c
    4e30:	00038148 	.word	0x00038148
    4e34:	4000f000 	.word	0x4000f000
    4e38:	40000ee4 	.word	0x40000ee4
    4e3c:	10000258 	.word	0x10000258
    4e40:	40029640 	.word	0x40029640
    4e44:	10000130 	.word	0x10000130
    4e48:	10000134 	.word	0x10000134
    4e4c:	00009e65 	.word	0x00009e65
    4e50:	4001e000 	.word	0x4001e000
    4e54:	e000ed00 	.word	0xe000ed00
    4e58:	05fa0004 	.word	0x05fa0004
    4e5c:	20000180 	.word	0x20000180
    4e60:	03d09000 	.word	0x03d09000

00004e64 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4e64:	4b0e      	ldr	r3, [pc, #56]	; (4ea0 <z_sys_init_run_level+0x3c>)
{
    4e66:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4e68:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    4e6c:	3001      	adds	r0, #1
    4e6e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    4e72:	42a6      	cmp	r6, r4
    4e74:	d800      	bhi.n	4e78 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    4e76:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    4e78:	e9d4 3500 	ldrd	r3, r5, [r4]
    4e7c:	4628      	mov	r0, r5
    4e7e:	4798      	blx	r3
		if (dev != NULL) {
    4e80:	b165      	cbz	r5, 4e9c <z_sys_init_run_level+0x38>
			if (rc != 0) {
    4e82:	68eb      	ldr	r3, [r5, #12]
    4e84:	b130      	cbz	r0, 4e94 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    4e86:	2800      	cmp	r0, #0
    4e88:	bfb8      	it	lt
    4e8a:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    4e8c:	28ff      	cmp	r0, #255	; 0xff
    4e8e:	bfa8      	it	ge
    4e90:	20ff      	movge	r0, #255	; 0xff
    4e92:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    4e94:	785a      	ldrb	r2, [r3, #1]
    4e96:	f042 0201 	orr.w	r2, r2, #1
    4e9a:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4e9c:	3408      	adds	r4, #8
    4e9e:	e7e8      	b.n	4e72 <z_sys_init_run_level+0xe>
    4ea0:	0000902c 	.word	0x0000902c

00004ea4 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    4ea4:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    4ea6:	4605      	mov	r5, r0
    4ea8:	b910      	cbnz	r0, 4eb0 <z_impl_device_get_binding+0xc>
		return NULL;
    4eaa:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    4eac:	4620      	mov	r0, r4
    4eae:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    4eb0:	7803      	ldrb	r3, [r0, #0]
    4eb2:	2b00      	cmp	r3, #0
    4eb4:	d0f9      	beq.n	4eaa <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    4eb6:	4a0f      	ldr	r2, [pc, #60]	; (4ef4 <z_impl_device_get_binding+0x50>)
    4eb8:	4c0f      	ldr	r4, [pc, #60]	; (4ef8 <z_impl_device_get_binding+0x54>)
    4eba:	4616      	mov	r6, r2
    4ebc:	4294      	cmp	r4, r2
    4ebe:	d108      	bne.n	4ed2 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    4ec0:	4c0d      	ldr	r4, [pc, #52]	; (4ef8 <z_impl_device_get_binding+0x54>)
    4ec2:	42b4      	cmp	r4, r6
    4ec4:	d0f1      	beq.n	4eaa <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    4ec6:	4620      	mov	r0, r4
    4ec8:	f003 fde6 	bl	8a98 <z_device_ready>
    4ecc:	b950      	cbnz	r0, 4ee4 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
    4ece:	3418      	adds	r4, #24
    4ed0:	e7f7      	b.n	4ec2 <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
    4ed2:	4620      	mov	r0, r4
    4ed4:	f003 fde0 	bl	8a98 <z_device_ready>
    4ed8:	b110      	cbz	r0, 4ee0 <z_impl_device_get_binding+0x3c>
    4eda:	6823      	ldr	r3, [r4, #0]
    4edc:	42ab      	cmp	r3, r5
    4ede:	d0e5      	beq.n	4eac <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    4ee0:	3418      	adds	r4, #24
    4ee2:	e7eb      	b.n	4ebc <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    4ee4:	6821      	ldr	r1, [r4, #0]
    4ee6:	4628      	mov	r0, r5
    4ee8:	f003 fafb 	bl	84e2 <strcmp>
    4eec:	2800      	cmp	r0, #0
    4eee:	d1ee      	bne.n	4ece <z_impl_device_get_binding+0x2a>
    4ef0:	e7dc      	b.n	4eac <z_impl_device_get_binding+0x8>
    4ef2:	bf00      	nop
    4ef4:	00008d14 	.word	0x00008d14
    4ef8:	00008c6c 	.word	0x00008c6c

00004efc <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    4efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4efe:	4604      	mov	r4, r0
    4f00:	460e      	mov	r6, r1
	__asm__ volatile(
    4f02:	f04f 0320 	mov.w	r3, #32
    4f06:	f3ef 8711 	mrs	r7, BASEPRI
    4f0a:	f383 8812 	msr	BASEPRI_MAX, r3
    4f0e:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    4f12:	f001 fdb3 	bl	6a7c <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    4f16:	4631      	mov	r1, r6
    4f18:	4605      	mov	r5, r0
    4f1a:	4620      	mov	r0, r4
    4f1c:	f003 fd17 	bl	894e <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    4f20:	2c04      	cmp	r4, #4
    4f22:	d10c      	bne.n	4f3e <z_fatal_error+0x42>
    4f24:	490a      	ldr	r1, [pc, #40]	; (4f50 <z_fatal_error+0x54>)
    4f26:	4a0b      	ldr	r2, [pc, #44]	; (4f54 <z_fatal_error+0x58>)
    4f28:	480b      	ldr	r0, [pc, #44]	; (4f58 <z_fatal_error+0x5c>)
    4f2a:	238f      	movs	r3, #143	; 0x8f
    4f2c:	f003 fa97 	bl	845e <printk>
    4f30:	480a      	ldr	r0, [pc, #40]	; (4f5c <z_fatal_error+0x60>)
    4f32:	f003 fa94 	bl	845e <printk>
    4f36:	4807      	ldr	r0, [pc, #28]	; (4f54 <z_fatal_error+0x58>)
    4f38:	218f      	movs	r1, #143	; 0x8f
    4f3a:	f003 f9b9 	bl	82b0 <assert_post_action>
	__asm__ volatile(
    4f3e:	f387 8811 	msr	BASEPRI, r7
    4f42:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    4f46:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    4f48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4f4c:	f7fd b992 	b.w	2274 <z_impl_k_thread_abort>
    4f50:	00009e93 	.word	0x00009e93
    4f54:	00009e71 	.word	0x00009e71
    4f58:	00009190 	.word	0x00009190
    4f5c:	00009eb0 	.word	0x00009eb0

00004f60 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    4f60:	4c11      	ldr	r4, [pc, #68]	; (4fa8 <idle+0x48>)
    4f62:	68a2      	ldr	r2, [r4, #8]
    4f64:	f992 200e 	ldrsb.w	r2, [r2, #14]
    4f68:	2a00      	cmp	r2, #0
{
    4f6a:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
    4f6c:	da09      	bge.n	4f82 <idle+0x22>
    4f6e:	490f      	ldr	r1, [pc, #60]	; (4fac <idle+0x4c>)
    4f70:	480f      	ldr	r0, [pc, #60]	; (4fb0 <idle+0x50>)
    4f72:	4a10      	ldr	r2, [pc, #64]	; (4fb4 <idle+0x54>)
    4f74:	2327      	movs	r3, #39	; 0x27
    4f76:	f003 fa72 	bl	845e <printk>
    4f7a:	480e      	ldr	r0, [pc, #56]	; (4fb4 <idle+0x54>)
    4f7c:	2127      	movs	r1, #39	; 0x27
    4f7e:	f003 f997 	bl	82b0 <assert_post_action>
	__asm__ volatile(
    4f82:	f04f 0220 	mov.w	r2, #32
    4f86:	f3ef 8311 	mrs	r3, BASEPRI
    4f8a:	f382 8812 	msr	BASEPRI_MAX, r2
    4f8e:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    4f92:	f002 fa69 	bl	7468 <z_get_next_timeout_expiry>
    4f96:	61a0      	str	r0, [r4, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
    4f98:	f7fc fd94 	bl	1ac4 <pm_system_suspend>
    4f9c:	2800      	cmp	r0, #0
    4f9e:	d1f0      	bne.n	4f82 <idle+0x22>
	arch_cpu_idle();
    4fa0:	f7fc fe46 	bl	1c30 <arch_cpu_idle>
}
    4fa4:	e7ed      	b.n	4f82 <idle+0x22>
    4fa6:	bf00      	nop
    4fa8:	20000c34 	.word	0x20000c34
    4fac:	00009f06 	.word	0x00009f06
    4fb0:	00009190 	.word	0x00009190
    4fb4:	00009ee5 	.word	0x00009ee5

00004fb8 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    4fb8:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    4fba:	2300      	movs	r3, #0
{
    4fbc:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
    4fbe:	2201      	movs	r2, #1
    4fc0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    4fc4:	220f      	movs	r2, #15
    4fc6:	e9cd 3202 	strd	r3, r2, [sp, #8]
	struct k_thread *thread = &z_idle_threads[i];
    4fca:	4c0d      	ldr	r4, [pc, #52]	; (5000 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    4fcc:	4a0d      	ldr	r2, [pc, #52]	; (5004 <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
    4fce:	9301      	str	r3, [sp, #4]
    4fd0:	490d      	ldr	r1, [pc, #52]	; (5008 <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    4fd2:	2318      	movs	r3, #24
	struct k_thread *thread = &z_idle_threads[i];
    4fd4:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    4fd8:	fb03 2300 	mla	r3, r3, r0, r2
	z_setup_new_thread(thread, stack,
    4fdc:	f44f 75b0 	mov.w	r5, #352	; 0x160
    4fe0:	9300      	str	r3, [sp, #0]
    4fe2:	fb05 1100 	mla	r1, r5, r0, r1
    4fe6:	4b09      	ldr	r3, [pc, #36]	; (500c <init_idle_thread+0x54>)
    4fe8:	f44f 72a0 	mov.w	r2, #320	; 0x140
    4fec:	4620      	mov	r0, r4
    4fee:	f001 ff61 	bl	6eb4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4ff2:	7b63      	ldrb	r3, [r4, #13]
    4ff4:	f023 0304 	bic.w	r3, r3, #4
    4ff8:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    4ffa:	b007      	add	sp, #28
    4ffc:	bd30      	pop	{r4, r5, pc}
    4ffe:	bf00      	nop
    5000:	200003f8 	.word	0x200003f8
    5004:	20000c34 	.word	0x20000c34
    5008:	20001f00 	.word	0x20001f00
    500c:	00004f61 	.word	0x00004f61

00005010 <bg_thread_main>:
{
    5010:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    5012:	4b0a      	ldr	r3, [pc, #40]	; (503c <bg_thread_main+0x2c>)
    5014:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    5016:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    5018:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    501a:	f7ff ff23 	bl	4e64 <z_sys_init_run_level>
	boot_banner();
    501e:	f002 ff53 	bl	7ec8 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    5022:	2003      	movs	r0, #3
    5024:	f7ff ff1e 	bl	4e64 <z_sys_init_run_level>
	z_init_static_threads();
    5028:	f001 fff6 	bl	7018 <z_init_static_threads>
	main();
    502c:	f7fb fc86 	bl	93c <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    5030:	4a03      	ldr	r2, [pc, #12]	; (5040 <bg_thread_main+0x30>)
    5032:	7b13      	ldrb	r3, [r2, #12]
    5034:	f023 0301 	bic.w	r3, r3, #1
    5038:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    503a:	bd08      	pop	{r3, pc}
    503c:	20000ca9 	.word	0x20000ca9
    5040:	20000478 	.word	0x20000478

00005044 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    5044:	4802      	ldr	r0, [pc, #8]	; (5050 <z_bss_zero+0xc>)
    5046:	4a03      	ldr	r2, [pc, #12]	; (5054 <z_bss_zero+0x10>)
    5048:	2100      	movs	r1, #0
    504a:	1a12      	subs	r2, r2, r0
    504c:	f003 ba60 	b.w	8510 <memset>
    5050:	20000258 	.word	0x20000258
    5054:	20000e68 	.word	0x20000e68

00005058 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    5058:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    505a:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 5134 <z_cstart+0xdc>
    505e:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    5060:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    5064:	4d2d      	ldr	r5, [pc, #180]	; (511c <z_cstart+0xc4>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    5066:	4e2e      	ldr	r6, [pc, #184]	; (5120 <z_cstart+0xc8>)
    5068:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    506a:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 5138 <z_cstart+0xe0>
    506e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5072:	2400      	movs	r4, #0
    5074:	616b      	str	r3, [r5, #20]
    5076:	23e0      	movs	r3, #224	; 0xe0
    5078:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    507c:	77ec      	strb	r4, [r5, #31]
    507e:	762c      	strb	r4, [r5, #24]
    5080:	766c      	strb	r4, [r5, #25]
    5082:	76ac      	strb	r4, [r5, #26]
    5084:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    5088:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    508a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    508e:	626b      	str	r3, [r5, #36]	; 0x24
    5090:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    5094:	f7fd f898 	bl	21c8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    5098:	f7fc fdc4 	bl	1c24 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    509c:	f04f 33ff 	mov.w	r3, #4294967295
    50a0:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    50a2:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    50a4:	f7fd f9c0 	bl	2428 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    50a8:	f7fd f8f6 	bl	2298 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    50ac:	f240 1301 	movw	r3, #257	; 0x101
    50b0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    50b4:	ab06      	add	r3, sp, #24
    50b6:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    50b8:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    50bc:	f003 fceb 	bl	8a96 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    50c0:	4620      	mov	r0, r4
    50c2:	f7ff fecf 	bl	4e64 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    50c6:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    50c8:	4d16      	ldr	r5, [pc, #88]	; (5124 <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    50ca:	f7ff fecb 	bl	4e64 <z_sys_init_run_level>
	z_sched_init();
    50ce:	f001 fb3f 	bl	6750 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    50d2:	4b15      	ldr	r3, [pc, #84]	; (5128 <z_cstart+0xd0>)
    50d4:	9305      	str	r3, [sp, #20]
    50d6:	2301      	movs	r3, #1
    50d8:	4914      	ldr	r1, [pc, #80]	; (512c <z_cstart+0xd4>)
    50da:	9400      	str	r4, [sp, #0]
    50dc:	e9cd 4303 	strd	r4, r3, [sp, #12]
    50e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    50e4:	464b      	mov	r3, r9
    50e6:	e9cd 4401 	strd	r4, r4, [sp, #4]
    50ea:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
    50ec:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    50ee:	f001 fee1 	bl	6eb4 <z_setup_new_thread>
    50f2:	7b6a      	ldrb	r2, [r5, #13]
    50f4:	f022 0204 	bic.w	r2, r2, #4
    50f8:	736a      	strb	r2, [r5, #13]
    50fa:	4607      	mov	r7, r0
	z_ready_thread(&z_main_thread);
    50fc:	4628      	mov	r0, r5
    50fe:	f000 ff27 	bl	5f50 <z_ready_thread>
		init_idle_thread(i);
    5102:	4620      	mov	r0, r4
    5104:	f7ff ff58 	bl	4fb8 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    5108:	4b09      	ldr	r3, [pc, #36]	; (5130 <z_cstart+0xd8>)
    510a:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    510c:	464a      	mov	r2, r9
    510e:	4639      	mov	r1, r7
    5110:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
    5112:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
    5114:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    5118:	f7fc febe 	bl	1e98 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    511c:	e000ed00 	.word	0xe000ed00
    5120:	20000c34 	.word	0x20000c34
    5124:	20000478 	.word	0x20000478
    5128:	00009f2e 	.word	0x00009f2e
    512c:	20001ae0 	.word	0x20001ae0
    5130:	200003f8 	.word	0x200003f8
    5134:	20002880 	.word	0x20002880
    5138:	00005011 	.word	0x00005011

0000513c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    513c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    5140:	4d16      	ldr	r5, [pc, #88]	; (519c <init_mem_slab_module+0x60>)
    5142:	4c17      	ldr	r4, [pc, #92]	; (51a0 <init_mem_slab_module+0x64>)
    5144:	4e17      	ldr	r6, [pc, #92]	; (51a4 <init_mem_slab_module+0x68>)
    5146:	46a8      	mov	r8, r5
    5148:	42ac      	cmp	r4, r5
    514a:	d90c      	bls.n	5166 <init_mem_slab_module+0x2a>
    514c:	4916      	ldr	r1, [pc, #88]	; (51a8 <init_mem_slab_module+0x6c>)
    514e:	4817      	ldr	r0, [pc, #92]	; (51ac <init_mem_slab_module+0x70>)
    5150:	233c      	movs	r3, #60	; 0x3c
    5152:	4632      	mov	r2, r6
    5154:	f003 f983 	bl	845e <printk>
    5158:	4815      	ldr	r0, [pc, #84]	; (51b0 <init_mem_slab_module+0x74>)
    515a:	f003 f980 	bl	845e <printk>
    515e:	213c      	movs	r1, #60	; 0x3c
    5160:	4630      	mov	r0, r6
    5162:	f003 f8a5 	bl	82b0 <assert_post_action>
    5166:	4544      	cmp	r4, r8
    5168:	d302      	bcc.n	5170 <init_mem_slab_module+0x34>
			goto out;
		}
		z_object_init(slab);
	}

out:
    516a:	2000      	movs	r0, #0
	return rc;
}
    516c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    5170:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
    5174:	ea41 0302 	orr.w	r3, r1, r2
    5178:	f013 0303 	ands.w	r3, r3, #3
    517c:	d10b      	bne.n	5196 <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
    517e:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
    5180:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    5182:	4283      	cmp	r3, r0
    5184:	d101      	bne.n	518a <init_mem_slab_module+0x4e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    5186:	3420      	adds	r4, #32
    5188:	e7de      	b.n	5148 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
    518a:	69a7      	ldr	r7, [r4, #24]
    518c:	600f      	str	r7, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    518e:	3301      	adds	r3, #1
		slab->free_list = p;
    5190:	61a1      	str	r1, [r4, #24]
		p += slab->block_size;
    5192:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    5194:	e7f5      	b.n	5182 <init_mem_slab_module+0x46>
		return -EINVAL;
    5196:	f06f 0015 	mvn.w	r0, #21
	return rc;
    519a:	e7e7      	b.n	516c <init_mem_slab_module+0x30>
    519c:	20000208 	.word	0x20000208
    51a0:	20000208 	.word	0x20000208
    51a4:	00009f33 	.word	0x00009f33
    51a8:	00009f58 	.word	0x00009f58
    51ac:	00009190 	.word	0x00009190
    51b0:	00009f75 	.word	0x00009f75

000051b4 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    51b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    51b8:	4604      	mov	r4, r0
    51ba:	460e      	mov	r6, r1
    51bc:	4690      	mov	r8, r2
    51be:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    51c0:	f100 0508 	add.w	r5, r0, #8
    51c4:	f04f 0320 	mov.w	r3, #32
    51c8:	f3ef 8711 	mrs	r7, BASEPRI
    51cc:	f383 8812 	msr	BASEPRI_MAX, r3
    51d0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    51d4:	4628      	mov	r0, r5
    51d6:	f001 ffaf 	bl	7138 <z_spin_lock_valid>
    51da:	b968      	cbnz	r0, 51f8 <k_mem_slab_alloc+0x44>
    51dc:	4a24      	ldr	r2, [pc, #144]	; (5270 <k_mem_slab_alloc+0xbc>)
    51de:	4925      	ldr	r1, [pc, #148]	; (5274 <k_mem_slab_alloc+0xc0>)
    51e0:	4825      	ldr	r0, [pc, #148]	; (5278 <k_mem_slab_alloc+0xc4>)
    51e2:	2381      	movs	r3, #129	; 0x81
    51e4:	f003 f93b 	bl	845e <printk>
    51e8:	4824      	ldr	r0, [pc, #144]	; (527c <k_mem_slab_alloc+0xc8>)
    51ea:	4629      	mov	r1, r5
    51ec:	f003 f937 	bl	845e <printk>
    51f0:	481f      	ldr	r0, [pc, #124]	; (5270 <k_mem_slab_alloc+0xbc>)
    51f2:	2181      	movs	r1, #129	; 0x81
    51f4:	f003 f85c 	bl	82b0 <assert_post_action>
	z_spin_lock_set_owner(l);
    51f8:	4628      	mov	r0, r5
    51fa:	f001 ffbb 	bl	7174 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    51fe:	69a3      	ldr	r3, [r4, #24]
    5200:	b1eb      	cbz	r3, 523e <k_mem_slab_alloc+0x8a>
		/* take a free block */
		*mem = slab->free_list;
    5202:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    5204:	681b      	ldr	r3, [r3, #0]
    5206:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    5208:	69e3      	ldr	r3, [r4, #28]
    520a:	3301      	adds	r3, #1
    520c:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    520e:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5210:	4628      	mov	r0, r5
    5212:	f001 ff9f 	bl	7154 <z_spin_unlock_valid>
    5216:	b968      	cbnz	r0, 5234 <k_mem_slab_alloc+0x80>
    5218:	4a15      	ldr	r2, [pc, #84]	; (5270 <k_mem_slab_alloc+0xbc>)
    521a:	4919      	ldr	r1, [pc, #100]	; (5280 <k_mem_slab_alloc+0xcc>)
    521c:	4816      	ldr	r0, [pc, #88]	; (5278 <k_mem_slab_alloc+0xc4>)
    521e:	23ac      	movs	r3, #172	; 0xac
    5220:	f003 f91d 	bl	845e <printk>
    5224:	4817      	ldr	r0, [pc, #92]	; (5284 <k_mem_slab_alloc+0xd0>)
    5226:	4629      	mov	r1, r5
    5228:	f003 f919 	bl	845e <printk>
    522c:	4810      	ldr	r0, [pc, #64]	; (5270 <k_mem_slab_alloc+0xbc>)
    522e:	21ac      	movs	r1, #172	; 0xac
    5230:	f003 f83e 	bl	82b0 <assert_post_action>
	__asm__ volatile(
    5234:	f387 8811 	msr	BASEPRI, r7
    5238:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    523c:	e013      	b.n	5266 <k_mem_slab_alloc+0xb2>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    523e:	ea58 0209 	orrs.w	r2, r8, r9
    5242:	d103      	bne.n	524c <k_mem_slab_alloc+0x98>
		*mem = NULL;
    5244:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    5246:	f06f 040b 	mvn.w	r4, #11
    524a:	e7e1      	b.n	5210 <k_mem_slab_alloc+0x5c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    524c:	4622      	mov	r2, r4
    524e:	e9cd 8900 	strd	r8, r9, [sp]
    5252:	4639      	mov	r1, r7
    5254:	4628      	mov	r0, r5
    5256:	f001 f82d 	bl	62b4 <z_pend_curr>
		if (result == 0) {
    525a:	4604      	mov	r4, r0
    525c:	b918      	cbnz	r0, 5266 <k_mem_slab_alloc+0xb2>
			*mem = _current->base.swap_data;
    525e:	4b0a      	ldr	r3, [pc, #40]	; (5288 <k_mem_slab_alloc+0xd4>)
    5260:	689b      	ldr	r3, [r3, #8]
    5262:	695b      	ldr	r3, [r3, #20]
    5264:	6033      	str	r3, [r6, #0]
}
    5266:	4620      	mov	r0, r4
    5268:	b003      	add	sp, #12
    526a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    526e:	bf00      	nop
    5270:	00009623 	.word	0x00009623
    5274:	00009675 	.word	0x00009675
    5278:	00009190 	.word	0x00009190
    527c:	0000968a 	.word	0x0000968a
    5280:	00009649 	.word	0x00009649
    5284:	00009660 	.word	0x00009660
    5288:	20000c34 	.word	0x20000c34

0000528c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    528c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5290:	4604      	mov	r4, r0
    5292:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    5294:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    5298:	f04f 0320 	mov.w	r3, #32
    529c:	f3ef 8711 	mrs	r7, BASEPRI
    52a0:	f383 8812 	msr	BASEPRI_MAX, r3
    52a4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    52a8:	4628      	mov	r0, r5
    52aa:	f001 ff45 	bl	7138 <z_spin_lock_valid>
    52ae:	b968      	cbnz	r0, 52cc <k_mem_slab_free+0x40>
    52b0:	4a22      	ldr	r2, [pc, #136]	; (533c <k_mem_slab_free+0xb0>)
    52b2:	4923      	ldr	r1, [pc, #140]	; (5340 <k_mem_slab_free+0xb4>)
    52b4:	4823      	ldr	r0, [pc, #140]	; (5344 <k_mem_slab_free+0xb8>)
    52b6:	2381      	movs	r3, #129	; 0x81
    52b8:	f003 f8d1 	bl	845e <printk>
    52bc:	4822      	ldr	r0, [pc, #136]	; (5348 <k_mem_slab_free+0xbc>)
    52be:	4629      	mov	r1, r5
    52c0:	f003 f8cd 	bl	845e <printk>
    52c4:	481d      	ldr	r0, [pc, #116]	; (533c <k_mem_slab_free+0xb0>)
    52c6:	2181      	movs	r1, #129	; 0x81
    52c8:	f002 fff2 	bl	82b0 <assert_post_action>
	z_spin_lock_set_owner(l);
    52cc:	4628      	mov	r0, r5
    52ce:	f001 ff51 	bl	7174 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    52d2:	f8d4 8018 	ldr.w	r8, [r4, #24]
    52d6:	f1b8 0f00 	cmp.w	r8, #0
    52da:	d10f      	bne.n	52fc <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    52dc:	4620      	mov	r0, r4
    52de:	f001 f9e7 	bl	66b0 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    52e2:	b158      	cbz	r0, 52fc <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    52e4:	6832      	ldr	r2, [r6, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    52e6:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    52e8:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
    52ec:	f000 fe30 	bl	5f50 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    52f0:	4639      	mov	r1, r7
    52f2:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    52f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
    52f8:	f000 bb8a 	b.w	5a10 <z_reschedule>
	**(char ***) mem = slab->free_list;
    52fc:	6833      	ldr	r3, [r6, #0]
    52fe:	69a2      	ldr	r2, [r4, #24]
    5300:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    5302:	6833      	ldr	r3, [r6, #0]
    5304:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    5306:	69e3      	ldr	r3, [r4, #28]
    5308:	3b01      	subs	r3, #1
    530a:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    530c:	4628      	mov	r0, r5
    530e:	f001 ff21 	bl	7154 <z_spin_unlock_valid>
    5312:	b968      	cbnz	r0, 5330 <k_mem_slab_free+0xa4>
    5314:	4a09      	ldr	r2, [pc, #36]	; (533c <k_mem_slab_free+0xb0>)
    5316:	490d      	ldr	r1, [pc, #52]	; (534c <k_mem_slab_free+0xc0>)
    5318:	480a      	ldr	r0, [pc, #40]	; (5344 <k_mem_slab_free+0xb8>)
    531a:	23ac      	movs	r3, #172	; 0xac
    531c:	f003 f89f 	bl	845e <printk>
    5320:	480b      	ldr	r0, [pc, #44]	; (5350 <k_mem_slab_free+0xc4>)
    5322:	4629      	mov	r1, r5
    5324:	f003 f89b 	bl	845e <printk>
    5328:	4804      	ldr	r0, [pc, #16]	; (533c <k_mem_slab_free+0xb0>)
    532a:	21ac      	movs	r1, #172	; 0xac
    532c:	f002 ffc0 	bl	82b0 <assert_post_action>
	__asm__ volatile(
    5330:	f387 8811 	msr	BASEPRI, r7
    5334:	f3bf 8f6f 	isb	sy
}
    5338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    533c:	00009623 	.word	0x00009623
    5340:	00009675 	.word	0x00009675
    5344:	00009190 	.word	0x00009190
    5348:	0000968a 	.word	0x0000968a
    534c:	00009649 	.word	0x00009649
    5350:	00009660 	.word	0x00009660

00005354 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    5354:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5358:	4604      	mov	r4, r0
    535a:	4616      	mov	r6, r2
    535c:	461f      	mov	r7, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    535e:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    5362:	b163      	cbz	r3, 537e <z_impl_k_mutex_lock+0x2a>
    5364:	4970      	ldr	r1, [pc, #448]	; (5528 <z_impl_k_mutex_lock+0x1d4>)
    5366:	4a71      	ldr	r2, [pc, #452]	; (552c <z_impl_k_mutex_lock+0x1d8>)
    5368:	4871      	ldr	r0, [pc, #452]	; (5530 <z_impl_k_mutex_lock+0x1dc>)
    536a:	2365      	movs	r3, #101	; 0x65
    536c:	f003 f877 	bl	845e <printk>
    5370:	4870      	ldr	r0, [pc, #448]	; (5534 <z_impl_k_mutex_lock+0x1e0>)
    5372:	f003 f874 	bl	845e <printk>
    5376:	486d      	ldr	r0, [pc, #436]	; (552c <z_impl_k_mutex_lock+0x1d8>)
    5378:	2165      	movs	r1, #101	; 0x65
    537a:	f002 ff99 	bl	82b0 <assert_post_action>
	__asm__ volatile(
    537e:	f04f 0320 	mov.w	r3, #32
    5382:	f3ef 8811 	mrs	r8, BASEPRI
    5386:	f383 8812 	msr	BASEPRI_MAX, r3
    538a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    538e:	486a      	ldr	r0, [pc, #424]	; (5538 <z_impl_k_mutex_lock+0x1e4>)
    5390:	f001 fed2 	bl	7138 <z_spin_lock_valid>
    5394:	b968      	cbnz	r0, 53b2 <z_impl_k_mutex_lock+0x5e>
    5396:	4a69      	ldr	r2, [pc, #420]	; (553c <z_impl_k_mutex_lock+0x1e8>)
    5398:	4969      	ldr	r1, [pc, #420]	; (5540 <z_impl_k_mutex_lock+0x1ec>)
    539a:	4865      	ldr	r0, [pc, #404]	; (5530 <z_impl_k_mutex_lock+0x1dc>)
    539c:	2381      	movs	r3, #129	; 0x81
    539e:	f003 f85e 	bl	845e <printk>
    53a2:	4965      	ldr	r1, [pc, #404]	; (5538 <z_impl_k_mutex_lock+0x1e4>)
    53a4:	4867      	ldr	r0, [pc, #412]	; (5544 <z_impl_k_mutex_lock+0x1f0>)
    53a6:	f003 f85a 	bl	845e <printk>
    53aa:	4864      	ldr	r0, [pc, #400]	; (553c <z_impl_k_mutex_lock+0x1e8>)
    53ac:	2181      	movs	r1, #129	; 0x81
    53ae:	f002 ff7f 	bl	82b0 <assert_post_action>
	z_spin_lock_set_owner(l);
    53b2:	4861      	ldr	r0, [pc, #388]	; (5538 <z_impl_k_mutex_lock+0x1e4>)
    53b4:	f001 fede 	bl	7174 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    53b8:	68e3      	ldr	r3, [r4, #12]
    53ba:	4a63      	ldr	r2, [pc, #396]	; (5548 <z_impl_k_mutex_lock+0x1f4>)
    53bc:	b1fb      	cbz	r3, 53fe <z_impl_k_mutex_lock+0xaa>
    53be:	68a0      	ldr	r0, [r4, #8]
    53c0:	6891      	ldr	r1, [r2, #8]
    53c2:	4288      	cmp	r0, r1
    53c4:	d03d      	beq.n	5442 <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    53c6:	ea56 0307 	orrs.w	r3, r6, r7
    53ca:	d13c      	bne.n	5446 <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    53cc:	485a      	ldr	r0, [pc, #360]	; (5538 <z_impl_k_mutex_lock+0x1e4>)
    53ce:	f001 fec1 	bl	7154 <z_spin_unlock_valid>
    53d2:	b968      	cbnz	r0, 53f0 <z_impl_k_mutex_lock+0x9c>
    53d4:	4a59      	ldr	r2, [pc, #356]	; (553c <z_impl_k_mutex_lock+0x1e8>)
    53d6:	495d      	ldr	r1, [pc, #372]	; (554c <z_impl_k_mutex_lock+0x1f8>)
    53d8:	4855      	ldr	r0, [pc, #340]	; (5530 <z_impl_k_mutex_lock+0x1dc>)
    53da:	23ac      	movs	r3, #172	; 0xac
    53dc:	f003 f83f 	bl	845e <printk>
    53e0:	4955      	ldr	r1, [pc, #340]	; (5538 <z_impl_k_mutex_lock+0x1e4>)
    53e2:	485b      	ldr	r0, [pc, #364]	; (5550 <z_impl_k_mutex_lock+0x1fc>)
    53e4:	f003 f83b 	bl	845e <printk>
    53e8:	4854      	ldr	r0, [pc, #336]	; (553c <z_impl_k_mutex_lock+0x1e8>)
    53ea:	21ac      	movs	r1, #172	; 0xac
    53ec:	f002 ff60 	bl	82b0 <assert_post_action>
	__asm__ volatile(
    53f0:	f388 8811 	msr	BASEPRI, r8
    53f4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    53f8:	f06f 000f 	mvn.w	r0, #15
    53fc:	e01e      	b.n	543c <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    53fe:	6891      	ldr	r1, [r2, #8]
    5400:	f991 100e 	ldrsb.w	r1, [r1, #14]
    5404:	484c      	ldr	r0, [pc, #304]	; (5538 <z_impl_k_mutex_lock+0x1e4>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    5406:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    5408:	3301      	adds	r3, #1
    540a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    540c:	6893      	ldr	r3, [r2, #8]
    540e:	60a3      	str	r3, [r4, #8]
    5410:	f001 fea0 	bl	7154 <z_spin_unlock_valid>
    5414:	b968      	cbnz	r0, 5432 <z_impl_k_mutex_lock+0xde>
    5416:	4a49      	ldr	r2, [pc, #292]	; (553c <z_impl_k_mutex_lock+0x1e8>)
    5418:	494c      	ldr	r1, [pc, #304]	; (554c <z_impl_k_mutex_lock+0x1f8>)
    541a:	4845      	ldr	r0, [pc, #276]	; (5530 <z_impl_k_mutex_lock+0x1dc>)
    541c:	23ac      	movs	r3, #172	; 0xac
    541e:	f003 f81e 	bl	845e <printk>
    5422:	4945      	ldr	r1, [pc, #276]	; (5538 <z_impl_k_mutex_lock+0x1e4>)
    5424:	484a      	ldr	r0, [pc, #296]	; (5550 <z_impl_k_mutex_lock+0x1fc>)
    5426:	f003 f81a 	bl	845e <printk>
    542a:	4844      	ldr	r0, [pc, #272]	; (553c <z_impl_k_mutex_lock+0x1e8>)
    542c:	21ac      	movs	r1, #172	; 0xac
    542e:	f002 ff3f 	bl	82b0 <assert_post_action>
    5432:	f388 8811 	msr	BASEPRI, r8
    5436:	f3bf 8f6f 	isb	sy
		return 0;
    543a:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    543c:	b002      	add	sp, #8
    543e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    5442:	6921      	ldr	r1, [r4, #16]
    5444:	e7de      	b.n	5404 <z_impl_k_mutex_lock+0xb0>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    5446:	f991 100e 	ldrsb.w	r1, [r1, #14]
    544a:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    544e:	4299      	cmp	r1, r3
    5450:	bfa8      	it	ge
    5452:	4619      	movge	r1, r3
    5454:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    5458:	4291      	cmp	r1, r2
    545a:	bfb8      	it	lt
    545c:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    545e:	428b      	cmp	r3, r1
    5460:	dd44      	ble.n	54ec <z_impl_k_mutex_lock+0x198>
		return z_set_prio(mutex->owner, new_prio);
    5462:	f000 ff57 	bl	6314 <z_set_prio>
    5466:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    5468:	e9cd 6700 	strd	r6, r7, [sp]
    546c:	4832      	ldr	r0, [pc, #200]	; (5538 <z_impl_k_mutex_lock+0x1e4>)
    546e:	4622      	mov	r2, r4
    5470:	4641      	mov	r1, r8
    5472:	f000 ff1f 	bl	62b4 <z_pend_curr>
	if (got_mutex == 0) {
    5476:	2800      	cmp	r0, #0
    5478:	d0e0      	beq.n	543c <z_impl_k_mutex_lock+0xe8>
	__asm__ volatile(
    547a:	f04f 0320 	mov.w	r3, #32
    547e:	f3ef 8611 	mrs	r6, BASEPRI
    5482:	f383 8812 	msr	BASEPRI_MAX, r3
    5486:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    548a:	482b      	ldr	r0, [pc, #172]	; (5538 <z_impl_k_mutex_lock+0x1e4>)
    548c:	f001 fe54 	bl	7138 <z_spin_lock_valid>
    5490:	b968      	cbnz	r0, 54ae <z_impl_k_mutex_lock+0x15a>
    5492:	4a2a      	ldr	r2, [pc, #168]	; (553c <z_impl_k_mutex_lock+0x1e8>)
    5494:	492a      	ldr	r1, [pc, #168]	; (5540 <z_impl_k_mutex_lock+0x1ec>)
    5496:	4826      	ldr	r0, [pc, #152]	; (5530 <z_impl_k_mutex_lock+0x1dc>)
    5498:	2381      	movs	r3, #129	; 0x81
    549a:	f002 ffe0 	bl	845e <printk>
    549e:	4926      	ldr	r1, [pc, #152]	; (5538 <z_impl_k_mutex_lock+0x1e4>)
    54a0:	4828      	ldr	r0, [pc, #160]	; (5544 <z_impl_k_mutex_lock+0x1f0>)
    54a2:	f002 ffdc 	bl	845e <printk>
    54a6:	4825      	ldr	r0, [pc, #148]	; (553c <z_impl_k_mutex_lock+0x1e8>)
    54a8:	2181      	movs	r1, #129	; 0x81
    54aa:	f002 ff01 	bl	82b0 <assert_post_action>
	z_spin_lock_set_owner(l);
    54ae:	4822      	ldr	r0, [pc, #136]	; (5538 <z_impl_k_mutex_lock+0x1e4>)
    54b0:	f001 fe60 	bl	7174 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    54b4:	6823      	ldr	r3, [r4, #0]
    54b6:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    54b8:	429c      	cmp	r4, r3
    54ba:	d00a      	beq.n	54d2 <z_impl_k_mutex_lock+0x17e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    54bc:	b14b      	cbz	r3, 54d2 <z_impl_k_mutex_lock+0x17e>
    54be:	f993 300e 	ldrsb.w	r3, [r3, #14]
    54c2:	4299      	cmp	r1, r3
    54c4:	bfa8      	it	ge
    54c6:	4619      	movge	r1, r3
    54c8:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    54cc:	4299      	cmp	r1, r3
    54ce:	bfb8      	it	lt
    54d0:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    54d2:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    54d4:	f990 300e 	ldrsb.w	r3, [r0, #14]
    54d8:	4299      	cmp	r1, r3
    54da:	d109      	bne.n	54f0 <z_impl_k_mutex_lock+0x19c>
	if (resched) {
    54dc:	b16d      	cbz	r5, 54fa <z_impl_k_mutex_lock+0x1a6>
		z_reschedule(&lock, key);
    54de:	4816      	ldr	r0, [pc, #88]	; (5538 <z_impl_k_mutex_lock+0x1e4>)
    54e0:	4631      	mov	r1, r6
    54e2:	f000 fa95 	bl	5a10 <z_reschedule>
	return -EAGAIN;
    54e6:	f06f 000a 	mvn.w	r0, #10
    54ea:	e7a7      	b.n	543c <z_impl_k_mutex_lock+0xe8>
	bool resched = false;
    54ec:	2500      	movs	r5, #0
    54ee:	e7bb      	b.n	5468 <z_impl_k_mutex_lock+0x114>
		return z_set_prio(mutex->owner, new_prio);
    54f0:	f000 ff10 	bl	6314 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    54f4:	2800      	cmp	r0, #0
    54f6:	d1f2      	bne.n	54de <z_impl_k_mutex_lock+0x18a>
    54f8:	e7f0      	b.n	54dc <z_impl_k_mutex_lock+0x188>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    54fa:	480f      	ldr	r0, [pc, #60]	; (5538 <z_impl_k_mutex_lock+0x1e4>)
    54fc:	f001 fe2a 	bl	7154 <z_spin_unlock_valid>
    5500:	b968      	cbnz	r0, 551e <z_impl_k_mutex_lock+0x1ca>
    5502:	4a0e      	ldr	r2, [pc, #56]	; (553c <z_impl_k_mutex_lock+0x1e8>)
    5504:	4911      	ldr	r1, [pc, #68]	; (554c <z_impl_k_mutex_lock+0x1f8>)
    5506:	480a      	ldr	r0, [pc, #40]	; (5530 <z_impl_k_mutex_lock+0x1dc>)
    5508:	23ac      	movs	r3, #172	; 0xac
    550a:	f002 ffa8 	bl	845e <printk>
    550e:	490a      	ldr	r1, [pc, #40]	; (5538 <z_impl_k_mutex_lock+0x1e4>)
    5510:	480f      	ldr	r0, [pc, #60]	; (5550 <z_impl_k_mutex_lock+0x1fc>)
    5512:	f002 ffa4 	bl	845e <printk>
    5516:	4809      	ldr	r0, [pc, #36]	; (553c <z_impl_k_mutex_lock+0x1e8>)
    5518:	21ac      	movs	r1, #172	; 0xac
    551a:	f002 fec9 	bl	82b0 <assert_post_action>
	__asm__ volatile(
    551e:	f386 8811 	msr	BASEPRI, r6
    5522:	f3bf 8f6f 	isb	sy
    5526:	e7de      	b.n	54e6 <z_impl_k_mutex_lock+0x192>
    5528:	00009fb6 	.word	0x00009fb6
    552c:	00009f94 	.word	0x00009f94
    5530:	00009190 	.word	0x00009190
    5534:	00009fc8 	.word	0x00009fc8
    5538:	20000c5c 	.word	0x20000c5c
    553c:	00009623 	.word	0x00009623
    5540:	00009675 	.word	0x00009675
    5544:	0000968a 	.word	0x0000968a
    5548:	20000c34 	.word	0x20000c34
    554c:	00009649 	.word	0x00009649
    5550:	00009660 	.word	0x00009660

00005554 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    5554:	b538      	push	{r3, r4, r5, lr}
    5556:	4604      	mov	r4, r0
    5558:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    555c:	b163      	cbz	r3, 5578 <z_impl_k_mutex_unlock+0x24>
    555e:	4952      	ldr	r1, [pc, #328]	; (56a8 <z_impl_k_mutex_unlock+0x154>)
    5560:	4a52      	ldr	r2, [pc, #328]	; (56ac <z_impl_k_mutex_unlock+0x158>)
    5562:	4853      	ldr	r0, [pc, #332]	; (56b0 <z_impl_k_mutex_unlock+0x15c>)
    5564:	23c7      	movs	r3, #199	; 0xc7
    5566:	f002 ff7a 	bl	845e <printk>
    556a:	4852      	ldr	r0, [pc, #328]	; (56b4 <z_impl_k_mutex_unlock+0x160>)
    556c:	f002 ff77 	bl	845e <printk>
    5570:	484e      	ldr	r0, [pc, #312]	; (56ac <z_impl_k_mutex_unlock+0x158>)
    5572:	21c7      	movs	r1, #199	; 0xc7
    5574:	f002 fe9c 	bl	82b0 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    5578:	68a3      	ldr	r3, [r4, #8]
    557a:	2b00      	cmp	r3, #0
    557c:	f000 808d 	beq.w	569a <z_impl_k_mutex_unlock+0x146>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    5580:	4d4d      	ldr	r5, [pc, #308]	; (56b8 <z_impl_k_mutex_unlock+0x164>)
    5582:	68aa      	ldr	r2, [r5, #8]
    5584:	4293      	cmp	r3, r2
    5586:	f040 808b 	bne.w	56a0 <z_impl_k_mutex_unlock+0x14c>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    558a:	68e3      	ldr	r3, [r4, #12]
    558c:	b94b      	cbnz	r3, 55a2 <z_impl_k_mutex_unlock+0x4e>
    558e:	494b      	ldr	r1, [pc, #300]	; (56bc <z_impl_k_mutex_unlock+0x168>)
    5590:	4847      	ldr	r0, [pc, #284]	; (56b0 <z_impl_k_mutex_unlock+0x15c>)
    5592:	4a46      	ldr	r2, [pc, #280]	; (56ac <z_impl_k_mutex_unlock+0x158>)
    5594:	23df      	movs	r3, #223	; 0xdf
    5596:	f002 ff62 	bl	845e <printk>
    559a:	4844      	ldr	r0, [pc, #272]	; (56ac <z_impl_k_mutex_unlock+0x158>)
    559c:	21df      	movs	r1, #223	; 0xdf
    559e:	f002 fe87 	bl	82b0 <assert_post_action>
    55a2:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    55a6:	b163      	cbz	r3, 55c2 <z_impl_k_mutex_unlock+0x6e>
    55a8:	493f      	ldr	r1, [pc, #252]	; (56a8 <z_impl_k_mutex_unlock+0x154>)
    55aa:	4a45      	ldr	r2, [pc, #276]	; (56c0 <z_impl_k_mutex_unlock+0x16c>)
    55ac:	4840      	ldr	r0, [pc, #256]	; (56b0 <z_impl_k_mutex_unlock+0x15c>)
    55ae:	23fd      	movs	r3, #253	; 0xfd
    55b0:	f002 ff55 	bl	845e <printk>
    55b4:	4843      	ldr	r0, [pc, #268]	; (56c4 <z_impl_k_mutex_unlock+0x170>)
    55b6:	f002 ff52 	bl	845e <printk>
    55ba:	4841      	ldr	r0, [pc, #260]	; (56c0 <z_impl_k_mutex_unlock+0x16c>)
    55bc:	21fd      	movs	r1, #253	; 0xfd
    55be:	f002 fe77 	bl	82b0 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    55c2:	68ab      	ldr	r3, [r5, #8]
    55c4:	7bdb      	ldrb	r3, [r3, #15]
    55c6:	2b01      	cmp	r3, #1
    55c8:	d10c      	bne.n	55e4 <z_impl_k_mutex_unlock+0x90>
    55ca:	493f      	ldr	r1, [pc, #252]	; (56c8 <z_impl_k_mutex_unlock+0x174>)
    55cc:	4a3c      	ldr	r2, [pc, #240]	; (56c0 <z_impl_k_mutex_unlock+0x16c>)
    55ce:	4838      	ldr	r0, [pc, #224]	; (56b0 <z_impl_k_mutex_unlock+0x15c>)
    55d0:	23fe      	movs	r3, #254	; 0xfe
    55d2:	f002 ff44 	bl	845e <printk>
    55d6:	483b      	ldr	r0, [pc, #236]	; (56c4 <z_impl_k_mutex_unlock+0x170>)
    55d8:	f002 ff41 	bl	845e <printk>
    55dc:	4838      	ldr	r0, [pc, #224]	; (56c0 <z_impl_k_mutex_unlock+0x16c>)
    55de:	21fe      	movs	r1, #254	; 0xfe
    55e0:	f002 fe66 	bl	82b0 <assert_post_action>

	--_current->base.sched_locked;
    55e4:	68aa      	ldr	r2, [r5, #8]
    55e6:	7bd3      	ldrb	r3, [r2, #15]
    55e8:	3b01      	subs	r3, #1
    55ea:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    55ec:	68e3      	ldr	r3, [r4, #12]
    55ee:	2b01      	cmp	r3, #1
    55f0:	d905      	bls.n	55fe <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
    55f2:	3b01      	subs	r3, #1
    55f4:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    55f6:	f000 ff93 	bl	6520 <k_sched_unlock>

	return 0;
    55fa:	2000      	movs	r0, #0
}
    55fc:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    55fe:	f04f 0320 	mov.w	r3, #32
    5602:	f3ef 8511 	mrs	r5, BASEPRI
    5606:	f383 8812 	msr	BASEPRI_MAX, r3
    560a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    560e:	482f      	ldr	r0, [pc, #188]	; (56cc <z_impl_k_mutex_unlock+0x178>)
    5610:	f001 fd92 	bl	7138 <z_spin_lock_valid>
    5614:	b968      	cbnz	r0, 5632 <z_impl_k_mutex_unlock+0xde>
    5616:	4a2e      	ldr	r2, [pc, #184]	; (56d0 <z_impl_k_mutex_unlock+0x17c>)
    5618:	492e      	ldr	r1, [pc, #184]	; (56d4 <z_impl_k_mutex_unlock+0x180>)
    561a:	4825      	ldr	r0, [pc, #148]	; (56b0 <z_impl_k_mutex_unlock+0x15c>)
    561c:	2381      	movs	r3, #129	; 0x81
    561e:	f002 ff1e 	bl	845e <printk>
    5622:	492a      	ldr	r1, [pc, #168]	; (56cc <z_impl_k_mutex_unlock+0x178>)
    5624:	482c      	ldr	r0, [pc, #176]	; (56d8 <z_impl_k_mutex_unlock+0x184>)
    5626:	f002 ff1a 	bl	845e <printk>
    562a:	4829      	ldr	r0, [pc, #164]	; (56d0 <z_impl_k_mutex_unlock+0x17c>)
    562c:	2181      	movs	r1, #129	; 0x81
    562e:	f002 fe3f 	bl	82b0 <assert_post_action>
	z_spin_lock_set_owner(l);
    5632:	4826      	ldr	r0, [pc, #152]	; (56cc <z_impl_k_mutex_unlock+0x178>)
    5634:	f001 fd9e 	bl	7174 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    5638:	68a0      	ldr	r0, [r4, #8]
    563a:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
    563c:	f990 300e 	ldrsb.w	r3, [r0, #14]
    5640:	4299      	cmp	r1, r3
    5642:	d001      	beq.n	5648 <z_impl_k_mutex_unlock+0xf4>
		return z_set_prio(mutex->owner, new_prio);
    5644:	f000 fe66 	bl	6314 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    5648:	4620      	mov	r0, r4
    564a:	f001 f831 	bl	66b0 <z_unpend_first_thread>
	mutex->owner = new_owner;
    564e:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    5650:	b158      	cbz	r0, 566a <z_impl_k_mutex_unlock+0x116>
		mutex->owner_orig_prio = new_owner->base.prio;
    5652:	f990 200e 	ldrsb.w	r2, [r0, #14]
    5656:	6122      	str	r2, [r4, #16]
    5658:	2200      	movs	r2, #0
    565a:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
    565c:	f000 fc78 	bl	5f50 <z_ready_thread>
		z_reschedule(&lock, key);
    5660:	481a      	ldr	r0, [pc, #104]	; (56cc <z_impl_k_mutex_unlock+0x178>)
    5662:	4629      	mov	r1, r5
    5664:	f000 f9d4 	bl	5a10 <z_reschedule>
    5668:	e7c5      	b.n	55f6 <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
    566a:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    566c:	4817      	ldr	r0, [pc, #92]	; (56cc <z_impl_k_mutex_unlock+0x178>)
    566e:	f001 fd71 	bl	7154 <z_spin_unlock_valid>
    5672:	b968      	cbnz	r0, 5690 <z_impl_k_mutex_unlock+0x13c>
    5674:	4a16      	ldr	r2, [pc, #88]	; (56d0 <z_impl_k_mutex_unlock+0x17c>)
    5676:	4919      	ldr	r1, [pc, #100]	; (56dc <z_impl_k_mutex_unlock+0x188>)
    5678:	480d      	ldr	r0, [pc, #52]	; (56b0 <z_impl_k_mutex_unlock+0x15c>)
    567a:	23ac      	movs	r3, #172	; 0xac
    567c:	f002 feef 	bl	845e <printk>
    5680:	4912      	ldr	r1, [pc, #72]	; (56cc <z_impl_k_mutex_unlock+0x178>)
    5682:	4817      	ldr	r0, [pc, #92]	; (56e0 <z_impl_k_mutex_unlock+0x18c>)
    5684:	f002 feeb 	bl	845e <printk>
    5688:	4811      	ldr	r0, [pc, #68]	; (56d0 <z_impl_k_mutex_unlock+0x17c>)
    568a:	21ac      	movs	r1, #172	; 0xac
    568c:	f002 fe10 	bl	82b0 <assert_post_action>
	__asm__ volatile(
    5690:	f385 8811 	msr	BASEPRI, r5
    5694:	f3bf 8f6f 	isb	sy
    5698:	e7ad      	b.n	55f6 <z_impl_k_mutex_unlock+0xa2>
		return -EINVAL;
    569a:	f06f 0015 	mvn.w	r0, #21
    569e:	e7ad      	b.n	55fc <z_impl_k_mutex_unlock+0xa8>
		return -EPERM;
    56a0:	f04f 30ff 	mov.w	r0, #4294967295
    56a4:	e7aa      	b.n	55fc <z_impl_k_mutex_unlock+0xa8>
    56a6:	bf00      	nop
    56a8:	00009fb6 	.word	0x00009fb6
    56ac:	00009f94 	.word	0x00009f94
    56b0:	00009190 	.word	0x00009190
    56b4:	00009fc8 	.word	0x00009fc8
    56b8:	20000c34 	.word	0x20000c34
    56bc:	00009fed 	.word	0x00009fed
    56c0:	0000a004 	.word	0x0000a004
    56c4:	0000a02f 	.word	0x0000a02f
    56c8:	0000a032 	.word	0x0000a032
    56cc:	20000c5c 	.word	0x20000c5c
    56d0:	00009623 	.word	0x00009623
    56d4:	00009675 	.word	0x00009675
    56d8:	0000968a 	.word	0x0000968a
    56dc:	00009649 	.word	0x00009649
    56e0:	00009660 	.word	0x00009660

000056e4 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
{
    56e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
    56e8:	6884      	ldr	r4, [r0, #8]
{
    56ea:	4605      	mov	r5, r0
    56ec:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller != NULL) {
    56ee:	b1d4      	cbz	r4, 5726 <signal_poll_event+0x42>
		if (poller->mode == MODE_POLL) {
    56f0:	7863      	ldrb	r3, [r4, #1]
    56f2:	2b01      	cmp	r3, #1
    56f4:	d14b      	bne.n	578e <signal_poll_event+0xaa>
	__ASSERT(thread != NULL, "poller should have a thread\n");
    56f6:	f1b4 0760 	subs.w	r7, r4, #96	; 0x60
    56fa:	d10e      	bne.n	571a <signal_poll_event+0x36>
    56fc:	4a30      	ldr	r2, [pc, #192]	; (57c0 <signal_poll_event+0xdc>)
    56fe:	4931      	ldr	r1, [pc, #196]	; (57c4 <signal_poll_event+0xe0>)
    5700:	4831      	ldr	r0, [pc, #196]	; (57c8 <signal_poll_event+0xe4>)
    5702:	23f9      	movs	r3, #249	; 0xf9
    5704:	f002 feab 	bl	845e <printk>
    5708:	4830      	ldr	r0, [pc, #192]	; (57cc <signal_poll_event+0xe8>)
    570a:	f002 fea8 	bl	845e <printk>
    570e:	482c      	ldr	r0, [pc, #176]	; (57c0 <signal_poll_event+0xdc>)
    5710:	21f9      	movs	r1, #249	; 0xf9
    5712:	f002 fdcd 	bl	82b0 <assert_post_action>
	if (!z_is_thread_pending(thread)) {
    5716:	7b7b      	ldrb	r3, [r7, #13]
    5718:	deff      	udf	#255	; 0xff
    571a:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    571e:	f013 0302 	ands.w	r3, r3, #2
    5722:	d10a      	bne.n	573a <signal_poll_event+0x56>
		} else {
			/* Poller is not poll or triggered mode. No action needed.*/
			;
		}

		poller->is_polling = false;
    5724:	7023      	strb	r3, [r4, #0]
	event->state |= state;
    5726:	68eb      	ldr	r3, [r5, #12]
    5728:	f3c3 3145 	ubfx	r1, r3, #13, #6
    572c:	430e      	orrs	r6, r1
	event->poller = NULL;
    572e:	2000      	movs	r0, #0
	event->state |= state;
    5730:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
    5734:	60a8      	str	r0, [r5, #8]
	event->state |= state;
    5736:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
    5738:	e00d      	b.n	5756 <signal_poll_event+0x72>
	if (z_is_thread_timeout_expired(thread)) {
    573a:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
    573e:	f04f 31ff 	mov.w	r1, #4294967295
    5742:	f06f 0001 	mvn.w	r0, #1
    5746:	428b      	cmp	r3, r1
    5748:	bf08      	it	eq
    574a:	4282      	cmpeq	r2, r0
    574c:	d105      	bne.n	575a <signal_poll_event+0x76>
		poller->is_polling = false;
    574e:	2300      	movs	r3, #0
    5750:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
    5752:	f06f 000a 	mvn.w	r0, #10
}
    5756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_unpend_thread(thread);
    575a:	4638      	mov	r0, r7
    575c:	f000 fa54 	bl	5c08 <z_unpend_thread>
	arch_thread_return_value_set(thread,
    5760:	2e08      	cmp	r6, #8
    5762:	bf0c      	ite	eq
    5764:	f06f 0303 	mvneq.w	r3, #3
    5768:	2300      	movne	r3, #0
    576a:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    576c:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    5770:	06db      	lsls	r3, r3, #27
    5772:	d104      	bne.n	577e <signal_poll_event+0x9a>
	if (!z_is_thread_ready(thread)) {
    5774:	f854 8c48 	ldr.w	r8, [r4, #-72]
    5778:	f1b8 0f00 	cmp.w	r8, #0
    577c:	d001      	beq.n	5782 <signal_poll_event+0x9e>
		poller->is_polling = false;
    577e:	2300      	movs	r3, #0
    5780:	e7d0      	b.n	5724 <signal_poll_event+0x40>
	z_ready_thread(thread);
    5782:	4638      	mov	r0, r7
    5784:	f000 fbe4 	bl	5f50 <z_ready_thread>
		poller->is_polling = false;
    5788:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
    578c:	e7cb      	b.n	5726 <signal_poll_event+0x42>
		} else if (poller->mode == MODE_TRIGGERED) {
    578e:	2b02      	cmp	r3, #2
    5790:	d1f5      	bne.n	577e <signal_poll_event+0x9a>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
    5792:	7823      	ldrb	r3, [r4, #0]
    5794:	2b00      	cmp	r3, #0
    5796:	d0c6      	beq.n	5726 <signal_poll_event+0x42>
    5798:	f854 7c04 	ldr.w	r7, [r4, #-4]
    579c:	b177      	cbz	r7, 57bc <signal_poll_event+0xd8>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
    579e:	f1a4 0914 	sub.w	r9, r4, #20
    57a2:	f104 0014 	add.w	r0, r4, #20
		twork->poll_result = 0;
    57a6:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
    57aa:	f001 fe0f 	bl	73cc <z_abort_timeout>
		twork->poll_result = 0;
    57ae:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
    57b2:	4649      	mov	r1, r9
    57b4:	4638      	mov	r0, r7
    57b6:	f002 fa97 	bl	7ce8 <k_work_submit_to_queue>
    57ba:	e7e5      	b.n	5788 <signal_poll_event+0xa4>
		poller->is_polling = false;
    57bc:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
    57be:	e7b2      	b.n	5726 <signal_poll_event+0x42>
    57c0:	0000a063 	.word	0x0000a063
    57c4:	0000a15e 	.word	0x0000a15e
    57c8:	00009190 	.word	0x00009190
    57cc:	0000a174 	.word	0x0000a174

000057d0 <z_impl_k_poll_signal_raise>:
{
    57d0:	b570      	push	{r4, r5, r6, lr}
    57d2:	4604      	mov	r4, r0
    57d4:	460d      	mov	r5, r1
	__asm__ volatile(
    57d6:	f04f 0320 	mov.w	r3, #32
    57da:	f3ef 8611 	mrs	r6, BASEPRI
    57de:	f383 8812 	msr	BASEPRI_MAX, r3
    57e2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    57e6:	4821      	ldr	r0, [pc, #132]	; (586c <z_impl_k_poll_signal_raise+0x9c>)
    57e8:	f001 fca6 	bl	7138 <z_spin_lock_valid>
    57ec:	b968      	cbnz	r0, 580a <z_impl_k_poll_signal_raise+0x3a>
    57ee:	4a20      	ldr	r2, [pc, #128]	; (5870 <z_impl_k_poll_signal_raise+0xa0>)
    57f0:	4920      	ldr	r1, [pc, #128]	; (5874 <z_impl_k_poll_signal_raise+0xa4>)
    57f2:	4821      	ldr	r0, [pc, #132]	; (5878 <z_impl_k_poll_signal_raise+0xa8>)
    57f4:	2381      	movs	r3, #129	; 0x81
    57f6:	f002 fe32 	bl	845e <printk>
    57fa:	491c      	ldr	r1, [pc, #112]	; (586c <z_impl_k_poll_signal_raise+0x9c>)
    57fc:	481f      	ldr	r0, [pc, #124]	; (587c <z_impl_k_poll_signal_raise+0xac>)
    57fe:	f002 fe2e 	bl	845e <printk>
    5802:	481b      	ldr	r0, [pc, #108]	; (5870 <z_impl_k_poll_signal_raise+0xa0>)
    5804:	2181      	movs	r1, #129	; 0x81
    5806:	f002 fd53 	bl	82b0 <assert_post_action>
	z_spin_lock_set_owner(l);
    580a:	4818      	ldr	r0, [pc, #96]	; (586c <z_impl_k_poll_signal_raise+0x9c>)
    580c:	f001 fcb2 	bl	7174 <z_spin_lock_set_owner>
	return list->head == list;
    5810:	6820      	ldr	r0, [r4, #0]
	sig->result = result;
    5812:	60e5      	str	r5, [r4, #12]
	sig->signaled = 1U;
    5814:	2101      	movs	r1, #1

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
    5816:	4284      	cmp	r4, r0
    5818:	60a1      	str	r1, [r4, #8]
    581a:	d117      	bne.n	584c <z_impl_k_poll_signal_raise+0x7c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    581c:	4813      	ldr	r0, [pc, #76]	; (586c <z_impl_k_poll_signal_raise+0x9c>)
    581e:	f001 fc99 	bl	7154 <z_spin_unlock_valid>
    5822:	b968      	cbnz	r0, 5840 <z_impl_k_poll_signal_raise+0x70>
    5824:	4a12      	ldr	r2, [pc, #72]	; (5870 <z_impl_k_poll_signal_raise+0xa0>)
    5826:	4916      	ldr	r1, [pc, #88]	; (5880 <z_impl_k_poll_signal_raise+0xb0>)
    5828:	4813      	ldr	r0, [pc, #76]	; (5878 <z_impl_k_poll_signal_raise+0xa8>)
    582a:	23ac      	movs	r3, #172	; 0xac
    582c:	f002 fe17 	bl	845e <printk>
    5830:	490e      	ldr	r1, [pc, #56]	; (586c <z_impl_k_poll_signal_raise+0x9c>)
    5832:	4814      	ldr	r0, [pc, #80]	; (5884 <z_impl_k_poll_signal_raise+0xb4>)
    5834:	f002 fe13 	bl	845e <printk>
    5838:	480d      	ldr	r0, [pc, #52]	; (5870 <z_impl_k_poll_signal_raise+0xa0>)
    583a:	21ac      	movs	r1, #172	; 0xac
    583c:	f002 fd38 	bl	82b0 <assert_post_action>
	__asm__ volatile(
    5840:	f386 8811 	msr	BASEPRI, r6
    5844:	f3bf 8f6f 	isb	sy
		return 0;
    5848:	2400      	movs	r4, #0
    584a:	e00d      	b.n	5868 <z_impl_k_poll_signal_raise+0x98>
	sys_dnode_t *const next = node->next;
    584c:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    5850:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    5852:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    5854:	2300      	movs	r3, #0
	node->prev = NULL;
    5856:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    585a:	f7ff ff43 	bl	56e4 <signal_poll_event>
	z_reschedule(&lock, key);
    585e:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    5860:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
    5862:	4802      	ldr	r0, [pc, #8]	; (586c <z_impl_k_poll_signal_raise+0x9c>)
    5864:	f000 f8d4 	bl	5a10 <z_reschedule>
}
    5868:	4620      	mov	r0, r4
    586a:	bd70      	pop	{r4, r5, r6, pc}
    586c:	20000c60 	.word	0x20000c60
    5870:	00009623 	.word	0x00009623
    5874:	00009675 	.word	0x00009675
    5878:	00009190 	.word	0x00009190
    587c:	0000968a 	.word	0x0000968a
    5880:	00009649 	.word	0x00009649
    5884:	00009660 	.word	0x00009660

00005888 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    5888:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    588a:	4c08      	ldr	r4, [pc, #32]	; (58ac <z_reset_time_slice+0x24>)
    588c:	6823      	ldr	r3, [r4, #0]
    588e:	b15b      	cbz	r3, 58a8 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    5890:	f7fe f9e8 	bl	3c64 <sys_clock_elapsed>
    5894:	4603      	mov	r3, r0
    5896:	6820      	ldr	r0, [r4, #0]
    5898:	4a05      	ldr	r2, [pc, #20]	; (58b0 <z_reset_time_slice+0x28>)
    589a:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    589c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    58a0:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    58a2:	2100      	movs	r1, #0
    58a4:	f001 be28 	b.w	74f8 <z_set_timeout_expiry>
}
    58a8:	bd10      	pop	{r4, pc}
    58aa:	bf00      	nop
    58ac:	20000c70 	.word	0x20000c70
    58b0:	20000c34 	.word	0x20000c34

000058b4 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    58b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    58b6:	4604      	mov	r4, r0
    58b8:	460d      	mov	r5, r1
	__asm__ volatile(
    58ba:	f04f 0320 	mov.w	r3, #32
    58be:	f3ef 8611 	mrs	r6, BASEPRI
    58c2:	f383 8812 	msr	BASEPRI_MAX, r3
    58c6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    58ca:	4823      	ldr	r0, [pc, #140]	; (5958 <k_sched_time_slice_set+0xa4>)
    58cc:	f001 fc34 	bl	7138 <z_spin_lock_valid>
    58d0:	b968      	cbnz	r0, 58ee <k_sched_time_slice_set+0x3a>
    58d2:	4a22      	ldr	r2, [pc, #136]	; (595c <k_sched_time_slice_set+0xa8>)
    58d4:	4922      	ldr	r1, [pc, #136]	; (5960 <k_sched_time_slice_set+0xac>)
    58d6:	4823      	ldr	r0, [pc, #140]	; (5964 <k_sched_time_slice_set+0xb0>)
    58d8:	2381      	movs	r3, #129	; 0x81
    58da:	f002 fdc0 	bl	845e <printk>
    58de:	491e      	ldr	r1, [pc, #120]	; (5958 <k_sched_time_slice_set+0xa4>)
    58e0:	4821      	ldr	r0, [pc, #132]	; (5968 <k_sched_time_slice_set+0xb4>)
    58e2:	f002 fdbc 	bl	845e <printk>
    58e6:	481d      	ldr	r0, [pc, #116]	; (595c <k_sched_time_slice_set+0xa8>)
    58e8:	2181      	movs	r1, #129	; 0x81
    58ea:	f002 fce1 	bl	82b0 <assert_post_action>
	z_spin_lock_set_owner(l);
    58ee:	481a      	ldr	r0, [pc, #104]	; (5958 <k_sched_time_slice_set+0xa4>)
    58f0:	f001 fc40 	bl	7174 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    58f4:	4b1d      	ldr	r3, [pc, #116]	; (596c <k_sched_time_slice_set+0xb8>)
    58f6:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    58f8:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    58fc:	f240 30e7 	movw	r0, #999	; 0x3e7
    5900:	2100      	movs	r1, #0
    5902:	611a      	str	r2, [r3, #16]
    5904:	fbe7 0104 	umlal	r0, r1, r7, r4
    5908:	2300      	movs	r3, #0
    590a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    590e:	f7fa fbf7 	bl	100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    5912:	2c00      	cmp	r4, #0
    5914:	4b16      	ldr	r3, [pc, #88]	; (5970 <k_sched_time_slice_set+0xbc>)
    5916:	dc1b      	bgt.n	5950 <k_sched_time_slice_set+0x9c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    5918:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    591a:	4b16      	ldr	r3, [pc, #88]	; (5974 <k_sched_time_slice_set+0xc0>)
    591c:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    591e:	f7ff ffb3 	bl	5888 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5922:	480d      	ldr	r0, [pc, #52]	; (5958 <k_sched_time_slice_set+0xa4>)
    5924:	f001 fc16 	bl	7154 <z_spin_unlock_valid>
    5928:	b968      	cbnz	r0, 5946 <k_sched_time_slice_set+0x92>
    592a:	4a0c      	ldr	r2, [pc, #48]	; (595c <k_sched_time_slice_set+0xa8>)
    592c:	4912      	ldr	r1, [pc, #72]	; (5978 <k_sched_time_slice_set+0xc4>)
    592e:	480d      	ldr	r0, [pc, #52]	; (5964 <k_sched_time_slice_set+0xb0>)
    5930:	23ac      	movs	r3, #172	; 0xac
    5932:	f002 fd94 	bl	845e <printk>
    5936:	4908      	ldr	r1, [pc, #32]	; (5958 <k_sched_time_slice_set+0xa4>)
    5938:	4810      	ldr	r0, [pc, #64]	; (597c <k_sched_time_slice_set+0xc8>)
    593a:	f002 fd90 	bl	845e <printk>
    593e:	4807      	ldr	r0, [pc, #28]	; (595c <k_sched_time_slice_set+0xa8>)
    5940:	21ac      	movs	r1, #172	; 0xac
    5942:	f002 fcb5 	bl	82b0 <assert_post_action>
	__asm__ volatile(
    5946:	f386 8811 	msr	BASEPRI, r6
    594a:	f3bf 8f6f 	isb	sy
	}
}
    594e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    5950:	2802      	cmp	r0, #2
    5952:	bfb8      	it	lt
    5954:	2002      	movlt	r0, #2
    5956:	e7df      	b.n	5918 <k_sched_time_slice_set+0x64>
    5958:	20000c68 	.word	0x20000c68
    595c:	00009623 	.word	0x00009623
    5960:	00009675 	.word	0x00009675
    5964:	00009190 	.word	0x00009190
    5968:	0000968a 	.word	0x0000968a
    596c:	20000c34 	.word	0x20000c34
    5970:	20000c70 	.word	0x20000c70
    5974:	20000c6c 	.word	0x20000c6c
    5978:	00009649 	.word	0x00009649
    597c:	00009660 	.word	0x00009660

00005980 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
    5980:	b538      	push	{r3, r4, r5, lr}
    5982:	4604      	mov	r4, r0
	__asm__ volatile(
    5984:	f04f 0320 	mov.w	r3, #32
    5988:	f3ef 8511 	mrs	r5, BASEPRI
    598c:	f383 8812 	msr	BASEPRI_MAX, r3
    5990:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5994:	4817      	ldr	r0, [pc, #92]	; (59f4 <z_unpend_thread_no_timeout+0x74>)
    5996:	f001 fbcf 	bl	7138 <z_spin_lock_valid>
    599a:	b968      	cbnz	r0, 59b8 <z_unpend_thread_no_timeout+0x38>
    599c:	4a16      	ldr	r2, [pc, #88]	; (59f8 <z_unpend_thread_no_timeout+0x78>)
    599e:	4917      	ldr	r1, [pc, #92]	; (59fc <z_unpend_thread_no_timeout+0x7c>)
    59a0:	4817      	ldr	r0, [pc, #92]	; (5a00 <z_unpend_thread_no_timeout+0x80>)
    59a2:	2381      	movs	r3, #129	; 0x81
    59a4:	f002 fd5b 	bl	845e <printk>
    59a8:	4912      	ldr	r1, [pc, #72]	; (59f4 <z_unpend_thread_no_timeout+0x74>)
    59aa:	4816      	ldr	r0, [pc, #88]	; (5a04 <z_unpend_thread_no_timeout+0x84>)
    59ac:	f002 fd57 	bl	845e <printk>
    59b0:	4811      	ldr	r0, [pc, #68]	; (59f8 <z_unpend_thread_no_timeout+0x78>)
    59b2:	2181      	movs	r1, #129	; 0x81
    59b4:	f002 fc7c 	bl	82b0 <assert_post_action>
	z_spin_lock_set_owner(l);
    59b8:	480e      	ldr	r0, [pc, #56]	; (59f4 <z_unpend_thread_no_timeout+0x74>)
    59ba:	f001 fbdb 	bl	7174 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
    59be:	4620      	mov	r0, r4
    59c0:	f000 f900 	bl	5bc4 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    59c4:	480b      	ldr	r0, [pc, #44]	; (59f4 <z_unpend_thread_no_timeout+0x74>)
    59c6:	f001 fbc5 	bl	7154 <z_spin_unlock_valid>
    59ca:	b968      	cbnz	r0, 59e8 <z_unpend_thread_no_timeout+0x68>
    59cc:	4a0a      	ldr	r2, [pc, #40]	; (59f8 <z_unpend_thread_no_timeout+0x78>)
    59ce:	490e      	ldr	r1, [pc, #56]	; (5a08 <z_unpend_thread_no_timeout+0x88>)
    59d0:	480b      	ldr	r0, [pc, #44]	; (5a00 <z_unpend_thread_no_timeout+0x80>)
    59d2:	23ac      	movs	r3, #172	; 0xac
    59d4:	f002 fd43 	bl	845e <printk>
    59d8:	4906      	ldr	r1, [pc, #24]	; (59f4 <z_unpend_thread_no_timeout+0x74>)
    59da:	480c      	ldr	r0, [pc, #48]	; (5a0c <z_unpend_thread_no_timeout+0x8c>)
    59dc:	f002 fd3f 	bl	845e <printk>
    59e0:	4805      	ldr	r0, [pc, #20]	; (59f8 <z_unpend_thread_no_timeout+0x78>)
    59e2:	21ac      	movs	r1, #172	; 0xac
    59e4:	f002 fc64 	bl	82b0 <assert_post_action>
	__asm__ volatile(
    59e8:	f385 8811 	msr	BASEPRI, r5
    59ec:	f3bf 8f6f 	isb	sy
	}
}
    59f0:	bd38      	pop	{r3, r4, r5, pc}
    59f2:	bf00      	nop
    59f4:	20000c68 	.word	0x20000c68
    59f8:	00009623 	.word	0x00009623
    59fc:	00009675 	.word	0x00009675
    5a00:	00009190 	.word	0x00009190
    5a04:	0000968a 	.word	0x0000968a
    5a08:	00009649 	.word	0x00009649
    5a0c:	00009660 	.word	0x00009660

00005a10 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    5a10:	b538      	push	{r3, r4, r5, lr}
    5a12:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    5a14:	460d      	mov	r5, r1
    5a16:	b9e9      	cbnz	r1, 5a54 <z_reschedule+0x44>
    5a18:	f3ef 8305 	mrs	r3, IPSR
	if (resched(key.key) && need_swap()) {
    5a1c:	b9d3      	cbnz	r3, 5a54 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
    5a1e:	4b19      	ldr	r3, [pc, #100]	; (5a84 <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
    5a20:	69da      	ldr	r2, [r3, #28]
    5a22:	689b      	ldr	r3, [r3, #8]
    5a24:	429a      	cmp	r2, r3
    5a26:	d015      	beq.n	5a54 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5a28:	f001 fb94 	bl	7154 <z_spin_unlock_valid>
    5a2c:	b968      	cbnz	r0, 5a4a <z_reschedule+0x3a>
    5a2e:	4a16      	ldr	r2, [pc, #88]	; (5a88 <z_reschedule+0x78>)
    5a30:	4916      	ldr	r1, [pc, #88]	; (5a8c <z_reschedule+0x7c>)
    5a32:	4817      	ldr	r0, [pc, #92]	; (5a90 <z_reschedule+0x80>)
    5a34:	23c3      	movs	r3, #195	; 0xc3
    5a36:	f002 fd12 	bl	845e <printk>
    5a3a:	4816      	ldr	r0, [pc, #88]	; (5a94 <z_reschedule+0x84>)
    5a3c:	4621      	mov	r1, r4
    5a3e:	f002 fd0e 	bl	845e <printk>
    5a42:	4811      	ldr	r0, [pc, #68]	; (5a88 <z_reschedule+0x78>)
    5a44:	21c3      	movs	r1, #195	; 0xc3
    5a46:	f002 fc33 	bl	82b0 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    5a4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
    5a4e:	2000      	movs	r0, #0
    5a50:	f7fc b9d2 	b.w	1df8 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5a54:	4620      	mov	r0, r4
    5a56:	f001 fb7d 	bl	7154 <z_spin_unlock_valid>
    5a5a:	b968      	cbnz	r0, 5a78 <z_reschedule+0x68>
    5a5c:	4a0a      	ldr	r2, [pc, #40]	; (5a88 <z_reschedule+0x78>)
    5a5e:	490b      	ldr	r1, [pc, #44]	; (5a8c <z_reschedule+0x7c>)
    5a60:	480b      	ldr	r0, [pc, #44]	; (5a90 <z_reschedule+0x80>)
    5a62:	23ac      	movs	r3, #172	; 0xac
    5a64:	f002 fcfb 	bl	845e <printk>
    5a68:	480a      	ldr	r0, [pc, #40]	; (5a94 <z_reschedule+0x84>)
    5a6a:	4621      	mov	r1, r4
    5a6c:	f002 fcf7 	bl	845e <printk>
    5a70:	4805      	ldr	r0, [pc, #20]	; (5a88 <z_reschedule+0x78>)
    5a72:	21ac      	movs	r1, #172	; 0xac
    5a74:	f002 fc1c 	bl	82b0 <assert_post_action>
    5a78:	f385 8811 	msr	BASEPRI, r5
    5a7c:	f3bf 8f6f 	isb	sy
    5a80:	bd38      	pop	{r3, r4, r5, pc}
    5a82:	bf00      	nop
    5a84:	20000c34 	.word	0x20000c34
    5a88:	00009623 	.word	0x00009623
    5a8c:	00009649 	.word	0x00009649
    5a90:	00009190 	.word	0x00009190
    5a94:	00009660 	.word	0x00009660

00005a98 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    5a98:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    5a9a:	f04f 0320 	mov.w	r3, #32
    5a9e:	f3ef 8511 	mrs	r5, BASEPRI
    5aa2:	f383 8812 	msr	BASEPRI_MAX, r3
    5aa6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5aaa:	4829      	ldr	r0, [pc, #164]	; (5b50 <k_sched_lock+0xb8>)
    5aac:	f001 fb44 	bl	7138 <z_spin_lock_valid>
    5ab0:	b968      	cbnz	r0, 5ace <k_sched_lock+0x36>
    5ab2:	4a28      	ldr	r2, [pc, #160]	; (5b54 <k_sched_lock+0xbc>)
    5ab4:	4928      	ldr	r1, [pc, #160]	; (5b58 <k_sched_lock+0xc0>)
    5ab6:	4829      	ldr	r0, [pc, #164]	; (5b5c <k_sched_lock+0xc4>)
    5ab8:	2381      	movs	r3, #129	; 0x81
    5aba:	f002 fcd0 	bl	845e <printk>
    5abe:	4924      	ldr	r1, [pc, #144]	; (5b50 <k_sched_lock+0xb8>)
    5ac0:	4827      	ldr	r0, [pc, #156]	; (5b60 <k_sched_lock+0xc8>)
    5ac2:	f002 fccc 	bl	845e <printk>
    5ac6:	4823      	ldr	r0, [pc, #140]	; (5b54 <k_sched_lock+0xbc>)
    5ac8:	2181      	movs	r1, #129	; 0x81
    5aca:	f002 fbf1 	bl	82b0 <assert_post_action>
	z_spin_lock_set_owner(l);
    5ace:	4820      	ldr	r0, [pc, #128]	; (5b50 <k_sched_lock+0xb8>)
    5ad0:	f001 fb50 	bl	7174 <z_spin_lock_set_owner>
    5ad4:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    5ad8:	b163      	cbz	r3, 5af4 <k_sched_lock+0x5c>
    5ada:	4922      	ldr	r1, [pc, #136]	; (5b64 <k_sched_lock+0xcc>)
    5adc:	4a22      	ldr	r2, [pc, #136]	; (5b68 <k_sched_lock+0xd0>)
    5ade:	481f      	ldr	r0, [pc, #124]	; (5b5c <k_sched_lock+0xc4>)
    5ae0:	23fd      	movs	r3, #253	; 0xfd
    5ae2:	f002 fcbc 	bl	845e <printk>
    5ae6:	4821      	ldr	r0, [pc, #132]	; (5b6c <k_sched_lock+0xd4>)
    5ae8:	f002 fcb9 	bl	845e <printk>
    5aec:	481e      	ldr	r0, [pc, #120]	; (5b68 <k_sched_lock+0xd0>)
    5aee:	21fd      	movs	r1, #253	; 0xfd
    5af0:	f002 fbde 	bl	82b0 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    5af4:	4c1e      	ldr	r4, [pc, #120]	; (5b70 <k_sched_lock+0xd8>)
    5af6:	68a2      	ldr	r2, [r4, #8]
    5af8:	7bd2      	ldrb	r2, [r2, #15]
    5afa:	2a01      	cmp	r2, #1
    5afc:	d10c      	bne.n	5b18 <k_sched_lock+0x80>
    5afe:	491d      	ldr	r1, [pc, #116]	; (5b74 <k_sched_lock+0xdc>)
    5b00:	4a19      	ldr	r2, [pc, #100]	; (5b68 <k_sched_lock+0xd0>)
    5b02:	4816      	ldr	r0, [pc, #88]	; (5b5c <k_sched_lock+0xc4>)
    5b04:	23fe      	movs	r3, #254	; 0xfe
    5b06:	f002 fcaa 	bl	845e <printk>
    5b0a:	4818      	ldr	r0, [pc, #96]	; (5b6c <k_sched_lock+0xd4>)
    5b0c:	f002 fca7 	bl	845e <printk>
    5b10:	4815      	ldr	r0, [pc, #84]	; (5b68 <k_sched_lock+0xd0>)
    5b12:	21fe      	movs	r1, #254	; 0xfe
    5b14:	f002 fbcc 	bl	82b0 <assert_post_action>
	--_current->base.sched_locked;
    5b18:	68a2      	ldr	r2, [r4, #8]
    5b1a:	7bd3      	ldrb	r3, [r2, #15]
    5b1c:	3b01      	subs	r3, #1
    5b1e:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5b20:	480b      	ldr	r0, [pc, #44]	; (5b50 <k_sched_lock+0xb8>)
    5b22:	f001 fb17 	bl	7154 <z_spin_unlock_valid>
    5b26:	b968      	cbnz	r0, 5b44 <k_sched_lock+0xac>
    5b28:	4a0a      	ldr	r2, [pc, #40]	; (5b54 <k_sched_lock+0xbc>)
    5b2a:	4913      	ldr	r1, [pc, #76]	; (5b78 <k_sched_lock+0xe0>)
    5b2c:	480b      	ldr	r0, [pc, #44]	; (5b5c <k_sched_lock+0xc4>)
    5b2e:	23ac      	movs	r3, #172	; 0xac
    5b30:	f002 fc95 	bl	845e <printk>
    5b34:	4906      	ldr	r1, [pc, #24]	; (5b50 <k_sched_lock+0xb8>)
    5b36:	4811      	ldr	r0, [pc, #68]	; (5b7c <k_sched_lock+0xe4>)
    5b38:	f002 fc91 	bl	845e <printk>
    5b3c:	4805      	ldr	r0, [pc, #20]	; (5b54 <k_sched_lock+0xbc>)
    5b3e:	21ac      	movs	r1, #172	; 0xac
    5b40:	f002 fbb6 	bl	82b0 <assert_post_action>
	__asm__ volatile(
    5b44:	f385 8811 	msr	BASEPRI, r5
    5b48:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    5b4c:	bd38      	pop	{r3, r4, r5, pc}
    5b4e:	bf00      	nop
    5b50:	20000c68 	.word	0x20000c68
    5b54:	00009623 	.word	0x00009623
    5b58:	00009675 	.word	0x00009675
    5b5c:	00009190 	.word	0x00009190
    5b60:	0000968a 	.word	0x0000968a
    5b64:	00009fb6 	.word	0x00009fb6
    5b68:	0000a004 	.word	0x0000a004
    5b6c:	0000a02f 	.word	0x0000a02f
    5b70:	20000c34 	.word	0x20000c34
    5b74:	0000a032 	.word	0x0000a032
    5b78:	00009649 	.word	0x00009649
    5b7c:	00009660 	.word	0x00009660

00005b80 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5b80:	4b0c      	ldr	r3, [pc, #48]	; (5bb4 <z_priq_dumb_remove+0x34>)
    5b82:	4299      	cmp	r1, r3
{
    5b84:	b510      	push	{r4, lr}
    5b86:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5b88:	d10b      	bne.n	5ba2 <z_priq_dumb_remove+0x22>
    5b8a:	490b      	ldr	r1, [pc, #44]	; (5bb8 <z_priq_dumb_remove+0x38>)
    5b8c:	480b      	ldr	r0, [pc, #44]	; (5bbc <z_priq_dumb_remove+0x3c>)
    5b8e:	4a0c      	ldr	r2, [pc, #48]	; (5bc0 <z_priq_dumb_remove+0x40>)
    5b90:	f240 33e7 	movw	r3, #999	; 0x3e7
    5b94:	f002 fc63 	bl	845e <printk>
    5b98:	4809      	ldr	r0, [pc, #36]	; (5bc0 <z_priq_dumb_remove+0x40>)
    5b9a:	f240 31e7 	movw	r1, #999	; 0x3e7
    5b9e:	f002 fb87 	bl	82b0 <assert_post_action>
	sys_dnode_t *const next = node->next;
    5ba2:	e9d4 3200 	ldrd	r3, r2, [r4]
	prev->next = next;
    5ba6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    5ba8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    5baa:	2300      	movs	r3, #0
	node->prev = NULL;
    5bac:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    5bb0:	bd10      	pop	{r4, pc}
    5bb2:	bf00      	nop
    5bb4:	200003f8 	.word	0x200003f8
    5bb8:	0000a1b5 	.word	0x0000a1b5
    5bbc:	00009190 	.word	0x00009190
    5bc0:	0000a193 	.word	0x0000a193

00005bc4 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
    5bc4:	6883      	ldr	r3, [r0, #8]
{
    5bc6:	b510      	push	{r4, lr}
    5bc8:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    5bca:	b95b      	cbnz	r3, 5be4 <unpend_thread_no_timeout+0x20>
    5bcc:	490b      	ldr	r1, [pc, #44]	; (5bfc <unpend_thread_no_timeout+0x38>)
    5bce:	480c      	ldr	r0, [pc, #48]	; (5c00 <unpend_thread_no_timeout+0x3c>)
    5bd0:	4a0c      	ldr	r2, [pc, #48]	; (5c04 <unpend_thread_no_timeout+0x40>)
    5bd2:	f240 2383 	movw	r3, #643	; 0x283
    5bd6:	f002 fc42 	bl	845e <printk>
    5bda:	480a      	ldr	r0, [pc, #40]	; (5c04 <unpend_thread_no_timeout+0x40>)
    5bdc:	f240 2183 	movw	r1, #643	; 0x283
    5be0:	f002 fb66 	bl	82b0 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    5be4:	68a0      	ldr	r0, [r4, #8]
    5be6:	4621      	mov	r1, r4
    5be8:	f7ff ffca 	bl	5b80 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    5bec:	7b63      	ldrb	r3, [r4, #13]
    5bee:	f023 0302 	bic.w	r3, r3, #2
    5bf2:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    5bf4:	2300      	movs	r3, #0
    5bf6:	60a3      	str	r3, [r4, #8]
}
    5bf8:	bd10      	pop	{r4, pc}
    5bfa:	bf00      	nop
    5bfc:	0000a1d6 	.word	0x0000a1d6
    5c00:	00009190 	.word	0x00009190
    5c04:	0000a193 	.word	0x0000a193

00005c08 <z_unpend_thread>:
{
    5c08:	b538      	push	{r3, r4, r5, lr}
    5c0a:	4604      	mov	r4, r0
	__asm__ volatile(
    5c0c:	f04f 0320 	mov.w	r3, #32
    5c10:	f3ef 8511 	mrs	r5, BASEPRI
    5c14:	f383 8812 	msr	BASEPRI_MAX, r3
    5c18:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5c1c:	4819      	ldr	r0, [pc, #100]	; (5c84 <z_unpend_thread+0x7c>)
    5c1e:	f001 fa8b 	bl	7138 <z_spin_lock_valid>
    5c22:	b968      	cbnz	r0, 5c40 <z_unpend_thread+0x38>
    5c24:	4a18      	ldr	r2, [pc, #96]	; (5c88 <z_unpend_thread+0x80>)
    5c26:	4919      	ldr	r1, [pc, #100]	; (5c8c <z_unpend_thread+0x84>)
    5c28:	4819      	ldr	r0, [pc, #100]	; (5c90 <z_unpend_thread+0x88>)
    5c2a:	2381      	movs	r3, #129	; 0x81
    5c2c:	f002 fc17 	bl	845e <printk>
    5c30:	4914      	ldr	r1, [pc, #80]	; (5c84 <z_unpend_thread+0x7c>)
    5c32:	4818      	ldr	r0, [pc, #96]	; (5c94 <z_unpend_thread+0x8c>)
    5c34:	f002 fc13 	bl	845e <printk>
    5c38:	4813      	ldr	r0, [pc, #76]	; (5c88 <z_unpend_thread+0x80>)
    5c3a:	2181      	movs	r1, #129	; 0x81
    5c3c:	f002 fb38 	bl	82b0 <assert_post_action>
	z_spin_lock_set_owner(l);
    5c40:	4810      	ldr	r0, [pc, #64]	; (5c84 <z_unpend_thread+0x7c>)
    5c42:	f001 fa97 	bl	7174 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
    5c46:	4620      	mov	r0, r4
    5c48:	f7ff ffbc 	bl	5bc4 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5c4c:	480d      	ldr	r0, [pc, #52]	; (5c84 <z_unpend_thread+0x7c>)
    5c4e:	f001 fa81 	bl	7154 <z_spin_unlock_valid>
    5c52:	b968      	cbnz	r0, 5c70 <z_unpend_thread+0x68>
    5c54:	4a0c      	ldr	r2, [pc, #48]	; (5c88 <z_unpend_thread+0x80>)
    5c56:	4910      	ldr	r1, [pc, #64]	; (5c98 <z_unpend_thread+0x90>)
    5c58:	480d      	ldr	r0, [pc, #52]	; (5c90 <z_unpend_thread+0x88>)
    5c5a:	23ac      	movs	r3, #172	; 0xac
    5c5c:	f002 fbff 	bl	845e <printk>
    5c60:	4908      	ldr	r1, [pc, #32]	; (5c84 <z_unpend_thread+0x7c>)
    5c62:	480e      	ldr	r0, [pc, #56]	; (5c9c <z_unpend_thread+0x94>)
    5c64:	f002 fbfb 	bl	845e <printk>
    5c68:	4807      	ldr	r0, [pc, #28]	; (5c88 <z_unpend_thread+0x80>)
    5c6a:	21ac      	movs	r1, #172	; 0xac
    5c6c:	f002 fb20 	bl	82b0 <assert_post_action>
	__asm__ volatile(
    5c70:	f385 8811 	msr	BASEPRI, r5
    5c74:	f3bf 8f6f 	isb	sy
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    5c78:	f104 0018 	add.w	r0, r4, #24
}
    5c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5c80:	f001 bba4 	b.w	73cc <z_abort_timeout>
    5c84:	20000c68 	.word	0x20000c68
    5c88:	00009623 	.word	0x00009623
    5c8c:	00009675 	.word	0x00009675
    5c90:	00009190 	.word	0x00009190
    5c94:	0000968a 	.word	0x0000968a
    5c98:	00009649 	.word	0x00009649
    5c9c:	00009660 	.word	0x00009660

00005ca0 <update_cache>:
{
    5ca0:	b538      	push	{r3, r4, r5, lr}
    5ca2:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    5ca4:	4814      	ldr	r0, [pc, #80]	; (5cf8 <update_cache+0x58>)
    5ca6:	4d15      	ldr	r5, [pc, #84]	; (5cfc <update_cache+0x5c>)
    5ca8:	f002 ff4e 	bl	8b48 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    5cac:	4604      	mov	r4, r0
    5cae:	b900      	cbnz	r0, 5cb2 <update_cache+0x12>
    5cb0:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
    5cb2:	b9ca      	cbnz	r2, 5ce8 <update_cache+0x48>
	__ASSERT(_current != NULL, "");
    5cb4:	68ab      	ldr	r3, [r5, #8]
    5cb6:	b963      	cbnz	r3, 5cd2 <update_cache+0x32>
    5cb8:	4911      	ldr	r1, [pc, #68]	; (5d00 <update_cache+0x60>)
    5cba:	4a12      	ldr	r2, [pc, #72]	; (5d04 <update_cache+0x64>)
    5cbc:	4812      	ldr	r0, [pc, #72]	; (5d08 <update_cache+0x68>)
    5cbe:	2389      	movs	r3, #137	; 0x89
    5cc0:	f002 fbcd 	bl	845e <printk>
    5cc4:	4811      	ldr	r0, [pc, #68]	; (5d0c <update_cache+0x6c>)
    5cc6:	f002 fbca 	bl	845e <printk>
    5cca:	480e      	ldr	r0, [pc, #56]	; (5d04 <update_cache+0x64>)
    5ccc:	2189      	movs	r1, #137	; 0x89
    5cce:	f002 faef 	bl	82b0 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    5cd2:	68ab      	ldr	r3, [r5, #8]
    5cd4:	7b5a      	ldrb	r2, [r3, #13]
    5cd6:	06d2      	lsls	r2, r2, #27
    5cd8:	d106      	bne.n	5ce8 <update_cache+0x48>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    5cda:	69a2      	ldr	r2, [r4, #24]
    5cdc:	b922      	cbnz	r2, 5ce8 <update_cache+0x48>
	if (is_preempt(_current) || is_metairq(thread)) {
    5cde:	89da      	ldrh	r2, [r3, #14]
    5ce0:	2a7f      	cmp	r2, #127	; 0x7f
    5ce2:	d901      	bls.n	5ce8 <update_cache+0x48>
		_kernel.ready_q.cache = _current;
    5ce4:	61eb      	str	r3, [r5, #28]
}
    5ce6:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    5ce8:	68ab      	ldr	r3, [r5, #8]
    5cea:	42a3      	cmp	r3, r4
    5cec:	d001      	beq.n	5cf2 <update_cache+0x52>
			z_reset_time_slice();
    5cee:	f7ff fdcb 	bl	5888 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    5cf2:	61ec      	str	r4, [r5, #28]
}
    5cf4:	e7f7      	b.n	5ce6 <update_cache+0x46>
    5cf6:	bf00      	nop
    5cf8:	20000c54 	.word	0x20000c54
    5cfc:	20000c34 	.word	0x20000c34
    5d00:	0000a1ed 	.word	0x0000a1ed
    5d04:	0000a193 	.word	0x0000a193
    5d08:	00009190 	.word	0x00009190
    5d0c:	0000a02f 	.word	0x0000a02f

00005d10 <move_thread_to_end_of_prio_q>:
{
    5d10:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    5d12:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    5d16:	7b43      	ldrb	r3, [r0, #13]
    5d18:	2a00      	cmp	r2, #0
{
    5d1a:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    5d1c:	da06      	bge.n	5d2c <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5d1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5d22:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    5d24:	4601      	mov	r1, r0
    5d26:	481f      	ldr	r0, [pc, #124]	; (5da4 <move_thread_to_end_of_prio_q+0x94>)
    5d28:	f7ff ff2a 	bl	5b80 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    5d2c:	7b63      	ldrb	r3, [r4, #13]
    5d2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5d32:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5d34:	4b1c      	ldr	r3, [pc, #112]	; (5da8 <move_thread_to_end_of_prio_q+0x98>)
    5d36:	429c      	cmp	r4, r3
    5d38:	d109      	bne.n	5d4e <move_thread_to_end_of_prio_q+0x3e>
    5d3a:	491c      	ldr	r1, [pc, #112]	; (5dac <move_thread_to_end_of_prio_q+0x9c>)
    5d3c:	481c      	ldr	r0, [pc, #112]	; (5db0 <move_thread_to_end_of_prio_q+0xa0>)
    5d3e:	4a1d      	ldr	r2, [pc, #116]	; (5db4 <move_thread_to_end_of_prio_q+0xa4>)
    5d40:	23ba      	movs	r3, #186	; 0xba
    5d42:	f002 fb8c 	bl	845e <printk>
    5d46:	481b      	ldr	r0, [pc, #108]	; (5db4 <move_thread_to_end_of_prio_q+0xa4>)
    5d48:	21ba      	movs	r1, #186	; 0xba
    5d4a:	f002 fab1 	bl	82b0 <assert_post_action>
	return list->head == list;
    5d4e:	4a1a      	ldr	r2, [pc, #104]	; (5db8 <move_thread_to_end_of_prio_q+0xa8>)
    5d50:	4611      	mov	r1, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5d52:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return list->head == list;
    5d54:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5d58:	428b      	cmp	r3, r1
    5d5a:	bf08      	it	eq
    5d5c:	2300      	moveq	r3, #0
    5d5e:	2b00      	cmp	r3, #0
    5d60:	bf38      	it	cc
    5d62:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5d64:	b1cb      	cbz	r3, 5d9a <move_thread_to_end_of_prio_q+0x8a>
	int32_t b1 = thread_1->base.prio;
    5d66:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    5d6a:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    5d6e:	4286      	cmp	r6, r0
    5d70:	d00f      	beq.n	5d92 <move_thread_to_end_of_prio_q+0x82>
		return b2 - b1;
    5d72:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    5d74:	2800      	cmp	r0, #0
    5d76:	dd0c      	ble.n	5d92 <move_thread_to_end_of_prio_q+0x82>
	sys_dnode_t *const prev = successor->prev;
    5d78:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    5d7a:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    5d7e:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    5d80:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    5d82:	6890      	ldr	r0, [r2, #8]
    5d84:	1b03      	subs	r3, r0, r4
    5d86:	4258      	negs	r0, r3
}
    5d88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    5d8c:	4158      	adcs	r0, r3
    5d8e:	f7ff bf87 	b.w	5ca0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    5d92:	42ab      	cmp	r3, r5
    5d94:	d001      	beq.n	5d9a <move_thread_to_end_of_prio_q+0x8a>
    5d96:	681b      	ldr	r3, [r3, #0]
    5d98:	e7e4      	b.n	5d64 <move_thread_to_end_of_prio_q+0x54>
	node->prev = tail;
    5d9a:	e9c4 1500 	strd	r1, r5, [r4]
	tail->next = node;
    5d9e:	602c      	str	r4, [r5, #0]
	list->tail = node;
    5da0:	6254      	str	r4, [r2, #36]	; 0x24
}
    5da2:	e7ee      	b.n	5d82 <move_thread_to_end_of_prio_q+0x72>
    5da4:	20000c54 	.word	0x20000c54
    5da8:	200003f8 	.word	0x200003f8
    5dac:	0000a1b5 	.word	0x0000a1b5
    5db0:	00009190 	.word	0x00009190
    5db4:	0000a193 	.word	0x0000a193
    5db8:	20000c34 	.word	0x20000c34

00005dbc <z_time_slice>:
{
    5dbc:	b570      	push	{r4, r5, r6, lr}
    5dbe:	4604      	mov	r4, r0
	__asm__ volatile(
    5dc0:	f04f 0320 	mov.w	r3, #32
    5dc4:	f3ef 8511 	mrs	r5, BASEPRI
    5dc8:	f383 8812 	msr	BASEPRI_MAX, r3
    5dcc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5dd0:	482a      	ldr	r0, [pc, #168]	; (5e7c <z_time_slice+0xc0>)
    5dd2:	f001 f9b1 	bl	7138 <z_spin_lock_valid>
    5dd6:	b968      	cbnz	r0, 5df4 <z_time_slice+0x38>
    5dd8:	4a29      	ldr	r2, [pc, #164]	; (5e80 <z_time_slice+0xc4>)
    5dda:	492a      	ldr	r1, [pc, #168]	; (5e84 <z_time_slice+0xc8>)
    5ddc:	482a      	ldr	r0, [pc, #168]	; (5e88 <z_time_slice+0xcc>)
    5dde:	2381      	movs	r3, #129	; 0x81
    5de0:	f002 fb3d 	bl	845e <printk>
    5de4:	4925      	ldr	r1, [pc, #148]	; (5e7c <z_time_slice+0xc0>)
    5de6:	4829      	ldr	r0, [pc, #164]	; (5e8c <z_time_slice+0xd0>)
    5de8:	f002 fb39 	bl	845e <printk>
    5dec:	4824      	ldr	r0, [pc, #144]	; (5e80 <z_time_slice+0xc4>)
    5dee:	2181      	movs	r1, #129	; 0x81
    5df0:	f002 fa5e 	bl	82b0 <assert_post_action>
	z_spin_lock_set_owner(l);
    5df4:	4821      	ldr	r0, [pc, #132]	; (5e7c <z_time_slice+0xc0>)
    5df6:	f001 f9bd 	bl	7174 <z_spin_lock_set_owner>
	if (pending_current == _current) {
    5dfa:	4b25      	ldr	r3, [pc, #148]	; (5e90 <z_time_slice+0xd4>)
    5dfc:	4a25      	ldr	r2, [pc, #148]	; (5e94 <z_time_slice+0xd8>)
    5dfe:	6898      	ldr	r0, [r3, #8]
    5e00:	6811      	ldr	r1, [r2, #0]
    5e02:	4288      	cmp	r0, r1
    5e04:	4619      	mov	r1, r3
    5e06:	d118      	bne.n	5e3a <z_time_slice+0x7e>
			z_reset_time_slice();
    5e08:	f7ff fd3e 	bl	5888 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5e0c:	481b      	ldr	r0, [pc, #108]	; (5e7c <z_time_slice+0xc0>)
    5e0e:	f001 f9a1 	bl	7154 <z_spin_unlock_valid>
    5e12:	b968      	cbnz	r0, 5e30 <z_time_slice+0x74>
    5e14:	4a1a      	ldr	r2, [pc, #104]	; (5e80 <z_time_slice+0xc4>)
    5e16:	4920      	ldr	r1, [pc, #128]	; (5e98 <z_time_slice+0xdc>)
    5e18:	481b      	ldr	r0, [pc, #108]	; (5e88 <z_time_slice+0xcc>)
    5e1a:	23ac      	movs	r3, #172	; 0xac
    5e1c:	f002 fb1f 	bl	845e <printk>
    5e20:	4916      	ldr	r1, [pc, #88]	; (5e7c <z_time_slice+0xc0>)
    5e22:	481e      	ldr	r0, [pc, #120]	; (5e9c <z_time_slice+0xe0>)
    5e24:	f002 fb1b 	bl	845e <printk>
    5e28:	4815      	ldr	r0, [pc, #84]	; (5e80 <z_time_slice+0xc4>)
    5e2a:	21ac      	movs	r1, #172	; 0xac
    5e2c:	f002 fa40 	bl	82b0 <assert_post_action>
	__asm__ volatile(
    5e30:	f385 8811 	msr	BASEPRI, r5
    5e34:	f3bf 8f6f 	isb	sy
}
    5e38:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    5e3a:	2600      	movs	r6, #0
    5e3c:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    5e3e:	4a18      	ldr	r2, [pc, #96]	; (5ea0 <z_time_slice+0xe4>)
    5e40:	6812      	ldr	r2, [r2, #0]
    5e42:	b1ba      	cbz	r2, 5e74 <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
    5e44:	89c2      	ldrh	r2, [r0, #14]
    5e46:	2a7f      	cmp	r2, #127	; 0x7f
    5e48:	d814      	bhi.n	5e74 <z_time_slice+0xb8>
		&& !z_is_thread_prevented_from_running(thread)
    5e4a:	7b42      	ldrb	r2, [r0, #13]
    5e4c:	06d2      	lsls	r2, r2, #27
    5e4e:	d111      	bne.n	5e74 <z_time_slice+0xb8>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    5e50:	4a14      	ldr	r2, [pc, #80]	; (5ea4 <z_time_slice+0xe8>)
    5e52:	f990 600e 	ldrsb.w	r6, [r0, #14]
    5e56:	6812      	ldr	r2, [r2, #0]
    5e58:	4296      	cmp	r6, r2
    5e5a:	db0b      	blt.n	5e74 <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
    5e5c:	4a12      	ldr	r2, [pc, #72]	; (5ea8 <z_time_slice+0xec>)
    5e5e:	4290      	cmp	r0, r2
    5e60:	d008      	beq.n	5e74 <z_time_slice+0xb8>
		if (ticks >= _current_cpu->slice_ticks) {
    5e62:	691a      	ldr	r2, [r3, #16]
    5e64:	42a2      	cmp	r2, r4
    5e66:	dc02      	bgt.n	5e6e <z_time_slice+0xb2>
			move_thread_to_end_of_prio_q(_current);
    5e68:	f7ff ff52 	bl	5d10 <move_thread_to_end_of_prio_q>
    5e6c:	e7cc      	b.n	5e08 <z_time_slice+0x4c>
			_current_cpu->slice_ticks -= ticks;
    5e6e:	1b12      	subs	r2, r2, r4
    5e70:	611a      	str	r2, [r3, #16]
    5e72:	e7cb      	b.n	5e0c <z_time_slice+0x50>
		_current_cpu->slice_ticks = 0;
    5e74:	2300      	movs	r3, #0
    5e76:	610b      	str	r3, [r1, #16]
    5e78:	e7c8      	b.n	5e0c <z_time_slice+0x50>
    5e7a:	bf00      	nop
    5e7c:	20000c68 	.word	0x20000c68
    5e80:	00009623 	.word	0x00009623
    5e84:	00009675 	.word	0x00009675
    5e88:	00009190 	.word	0x00009190
    5e8c:	0000968a 	.word	0x0000968a
    5e90:	20000c34 	.word	0x20000c34
    5e94:	20000c64 	.word	0x20000c64
    5e98:	00009649 	.word	0x00009649
    5e9c:	00009660 	.word	0x00009660
    5ea0:	20000c70 	.word	0x20000c70
    5ea4:	20000c6c 	.word	0x20000c6c
    5ea8:	200003f8 	.word	0x200003f8

00005eac <ready_thread>:
{
    5eac:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    5eae:	f990 200d 	ldrsb.w	r2, [r0, #13]
    5eb2:	7b43      	ldrb	r3, [r0, #13]
    5eb4:	2a00      	cmp	r2, #0
{
    5eb6:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    5eb8:	db3e      	blt.n	5f38 <ready_thread+0x8c>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5eba:	06da      	lsls	r2, r3, #27
    5ebc:	d13c      	bne.n	5f38 <ready_thread+0x8c>
	return !sys_dnode_is_linked(&to->node);
    5ebe:	6985      	ldr	r5, [r0, #24]
    5ec0:	2d00      	cmp	r5, #0
    5ec2:	d139      	bne.n	5f38 <ready_thread+0x8c>
	thread->base.thread_state |= _THREAD_QUEUED;
    5ec4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5ec8:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5eca:	4b1c      	ldr	r3, [pc, #112]	; (5f3c <ready_thread+0x90>)
    5ecc:	4298      	cmp	r0, r3
    5ece:	d109      	bne.n	5ee4 <ready_thread+0x38>
    5ed0:	491b      	ldr	r1, [pc, #108]	; (5f40 <ready_thread+0x94>)
    5ed2:	481c      	ldr	r0, [pc, #112]	; (5f44 <ready_thread+0x98>)
    5ed4:	4a1c      	ldr	r2, [pc, #112]	; (5f48 <ready_thread+0x9c>)
    5ed6:	23ba      	movs	r3, #186	; 0xba
    5ed8:	f002 fac1 	bl	845e <printk>
    5edc:	481a      	ldr	r0, [pc, #104]	; (5f48 <ready_thread+0x9c>)
    5ede:	21ba      	movs	r1, #186	; 0xba
    5ee0:	f002 f9e6 	bl	82b0 <assert_post_action>
	return list->head == list;
    5ee4:	4919      	ldr	r1, [pc, #100]	; (5f4c <ready_thread+0xa0>)
    5ee6:	460b      	mov	r3, r1
    5ee8:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5eec:	4298      	cmp	r0, r3
    5eee:	bf18      	it	ne
    5ef0:	4605      	movne	r5, r0
    5ef2:	2d00      	cmp	r5, #0
    5ef4:	461a      	mov	r2, r3
    5ef6:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5ef8:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    5efa:	bf38      	it	cc
    5efc:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5efe:	b1b3      	cbz	r3, 5f2e <ready_thread+0x82>
	int32_t b1 = thread_1->base.prio;
    5f00:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    5f04:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    5f08:	4286      	cmp	r6, r0
    5f0a:	d00c      	beq.n	5f26 <ready_thread+0x7a>
		return b2 - b1;
    5f0c:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    5f0e:	2800      	cmp	r0, #0
    5f10:	dd09      	ble.n	5f26 <ready_thread+0x7a>
	sys_dnode_t *const prev = successor->prev;
    5f12:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5f14:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    5f18:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    5f1a:	605c      	str	r4, [r3, #4]
}
    5f1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    5f20:	2000      	movs	r0, #0
    5f22:	f7ff bebd 	b.w	5ca0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    5f26:	42ab      	cmp	r3, r5
    5f28:	d001      	beq.n	5f2e <ready_thread+0x82>
    5f2a:	681b      	ldr	r3, [r3, #0]
    5f2c:	e7e7      	b.n	5efe <ready_thread+0x52>
	node->prev = tail;
    5f2e:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    5f32:	602c      	str	r4, [r5, #0]
	list->tail = node;
    5f34:	624c      	str	r4, [r1, #36]	; 0x24
}
    5f36:	e7f1      	b.n	5f1c <ready_thread+0x70>
}
    5f38:	bd70      	pop	{r4, r5, r6, pc}
    5f3a:	bf00      	nop
    5f3c:	200003f8 	.word	0x200003f8
    5f40:	0000a1b5 	.word	0x0000a1b5
    5f44:	00009190 	.word	0x00009190
    5f48:	0000a193 	.word	0x0000a193
    5f4c:	20000c34 	.word	0x20000c34

00005f50 <z_ready_thread>:
{
    5f50:	b538      	push	{r3, r4, r5, lr}
    5f52:	4604      	mov	r4, r0
	__asm__ volatile(
    5f54:	f04f 0320 	mov.w	r3, #32
    5f58:	f3ef 8511 	mrs	r5, BASEPRI
    5f5c:	f383 8812 	msr	BASEPRI_MAX, r3
    5f60:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5f64:	4817      	ldr	r0, [pc, #92]	; (5fc4 <z_ready_thread+0x74>)
    5f66:	f001 f8e7 	bl	7138 <z_spin_lock_valid>
    5f6a:	b968      	cbnz	r0, 5f88 <z_ready_thread+0x38>
    5f6c:	4a16      	ldr	r2, [pc, #88]	; (5fc8 <z_ready_thread+0x78>)
    5f6e:	4917      	ldr	r1, [pc, #92]	; (5fcc <z_ready_thread+0x7c>)
    5f70:	4817      	ldr	r0, [pc, #92]	; (5fd0 <z_ready_thread+0x80>)
    5f72:	2381      	movs	r3, #129	; 0x81
    5f74:	f002 fa73 	bl	845e <printk>
    5f78:	4912      	ldr	r1, [pc, #72]	; (5fc4 <z_ready_thread+0x74>)
    5f7a:	4816      	ldr	r0, [pc, #88]	; (5fd4 <z_ready_thread+0x84>)
    5f7c:	f002 fa6f 	bl	845e <printk>
    5f80:	4811      	ldr	r0, [pc, #68]	; (5fc8 <z_ready_thread+0x78>)
    5f82:	2181      	movs	r1, #129	; 0x81
    5f84:	f002 f994 	bl	82b0 <assert_post_action>
	z_spin_lock_set_owner(l);
    5f88:	480e      	ldr	r0, [pc, #56]	; (5fc4 <z_ready_thread+0x74>)
    5f8a:	f001 f8f3 	bl	7174 <z_spin_lock_set_owner>
			ready_thread(thread);
    5f8e:	4620      	mov	r0, r4
    5f90:	f7ff ff8c 	bl	5eac <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5f94:	480b      	ldr	r0, [pc, #44]	; (5fc4 <z_ready_thread+0x74>)
    5f96:	f001 f8dd 	bl	7154 <z_spin_unlock_valid>
    5f9a:	b968      	cbnz	r0, 5fb8 <z_ready_thread+0x68>
    5f9c:	4a0a      	ldr	r2, [pc, #40]	; (5fc8 <z_ready_thread+0x78>)
    5f9e:	490e      	ldr	r1, [pc, #56]	; (5fd8 <z_ready_thread+0x88>)
    5fa0:	480b      	ldr	r0, [pc, #44]	; (5fd0 <z_ready_thread+0x80>)
    5fa2:	23ac      	movs	r3, #172	; 0xac
    5fa4:	f002 fa5b 	bl	845e <printk>
    5fa8:	4906      	ldr	r1, [pc, #24]	; (5fc4 <z_ready_thread+0x74>)
    5faa:	480c      	ldr	r0, [pc, #48]	; (5fdc <z_ready_thread+0x8c>)
    5fac:	f002 fa57 	bl	845e <printk>
    5fb0:	4805      	ldr	r0, [pc, #20]	; (5fc8 <z_ready_thread+0x78>)
    5fb2:	21ac      	movs	r1, #172	; 0xac
    5fb4:	f002 f97c 	bl	82b0 <assert_post_action>
	__asm__ volatile(
    5fb8:	f385 8811 	msr	BASEPRI, r5
    5fbc:	f3bf 8f6f 	isb	sy
}
    5fc0:	bd38      	pop	{r3, r4, r5, pc}
    5fc2:	bf00      	nop
    5fc4:	20000c68 	.word	0x20000c68
    5fc8:	00009623 	.word	0x00009623
    5fcc:	00009675 	.word	0x00009675
    5fd0:	00009190 	.word	0x00009190
    5fd4:	0000968a 	.word	0x0000968a
    5fd8:	00009649 	.word	0x00009649
    5fdc:	00009660 	.word	0x00009660

00005fe0 <z_sched_start>:
{
    5fe0:	b538      	push	{r3, r4, r5, lr}
    5fe2:	4604      	mov	r4, r0
	__asm__ volatile(
    5fe4:	f04f 0320 	mov.w	r3, #32
    5fe8:	f3ef 8511 	mrs	r5, BASEPRI
    5fec:	f383 8812 	msr	BASEPRI_MAX, r3
    5ff0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5ff4:	481d      	ldr	r0, [pc, #116]	; (606c <z_sched_start+0x8c>)
    5ff6:	f001 f89f 	bl	7138 <z_spin_lock_valid>
    5ffa:	b968      	cbnz	r0, 6018 <z_sched_start+0x38>
    5ffc:	4a1c      	ldr	r2, [pc, #112]	; (6070 <z_sched_start+0x90>)
    5ffe:	491d      	ldr	r1, [pc, #116]	; (6074 <z_sched_start+0x94>)
    6000:	481d      	ldr	r0, [pc, #116]	; (6078 <z_sched_start+0x98>)
    6002:	2381      	movs	r3, #129	; 0x81
    6004:	f002 fa2b 	bl	845e <printk>
    6008:	4918      	ldr	r1, [pc, #96]	; (606c <z_sched_start+0x8c>)
    600a:	481c      	ldr	r0, [pc, #112]	; (607c <z_sched_start+0x9c>)
    600c:	f002 fa27 	bl	845e <printk>
    6010:	4817      	ldr	r0, [pc, #92]	; (6070 <z_sched_start+0x90>)
    6012:	2181      	movs	r1, #129	; 0x81
    6014:	f002 f94c 	bl	82b0 <assert_post_action>
	z_spin_lock_set_owner(l);
    6018:	4814      	ldr	r0, [pc, #80]	; (606c <z_sched_start+0x8c>)
    601a:	f001 f8ab 	bl	7174 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
    601e:	7b63      	ldrb	r3, [r4, #13]
    6020:	075a      	lsls	r2, r3, #29
    6022:	d416      	bmi.n	6052 <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6024:	4811      	ldr	r0, [pc, #68]	; (606c <z_sched_start+0x8c>)
    6026:	f001 f895 	bl	7154 <z_spin_unlock_valid>
    602a:	b968      	cbnz	r0, 6048 <z_sched_start+0x68>
    602c:	4a10      	ldr	r2, [pc, #64]	; (6070 <z_sched_start+0x90>)
    602e:	4914      	ldr	r1, [pc, #80]	; (6080 <z_sched_start+0xa0>)
    6030:	4811      	ldr	r0, [pc, #68]	; (6078 <z_sched_start+0x98>)
    6032:	23ac      	movs	r3, #172	; 0xac
    6034:	f002 fa13 	bl	845e <printk>
    6038:	490c      	ldr	r1, [pc, #48]	; (606c <z_sched_start+0x8c>)
    603a:	4812      	ldr	r0, [pc, #72]	; (6084 <z_sched_start+0xa4>)
    603c:	f002 fa0f 	bl	845e <printk>
    6040:	480b      	ldr	r0, [pc, #44]	; (6070 <z_sched_start+0x90>)
    6042:	21ac      	movs	r1, #172	; 0xac
    6044:	f002 f934 	bl	82b0 <assert_post_action>
	__asm__ volatile(
    6048:	f385 8811 	msr	BASEPRI, r5
    604c:	f3bf 8f6f 	isb	sy
}
    6050:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    6052:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    6056:	4620      	mov	r0, r4
    6058:	7363      	strb	r3, [r4, #13]
    605a:	f7ff ff27 	bl	5eac <ready_thread>
	z_reschedule(&sched_spinlock, key);
    605e:	4629      	mov	r1, r5
    6060:	4802      	ldr	r0, [pc, #8]	; (606c <z_sched_start+0x8c>)
}
    6062:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    6066:	f7ff bcd3 	b.w	5a10 <z_reschedule>
    606a:	bf00      	nop
    606c:	20000c68 	.word	0x20000c68
    6070:	00009623 	.word	0x00009623
    6074:	00009675 	.word	0x00009675
    6078:	00009190 	.word	0x00009190
    607c:	0000968a 	.word	0x0000968a
    6080:	00009649 	.word	0x00009649
    6084:	00009660 	.word	0x00009660

00006088 <z_thread_timeout>:
{
    6088:	b570      	push	{r4, r5, r6, lr}
    608a:	4604      	mov	r4, r0
	__asm__ volatile(
    608c:	f04f 0320 	mov.w	r3, #32
    6090:	f3ef 8611 	mrs	r6, BASEPRI
    6094:	f383 8812 	msr	BASEPRI_MAX, r3
    6098:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    609c:	4820      	ldr	r0, [pc, #128]	; (6120 <z_thread_timeout+0x98>)
    609e:	f001 f84b 	bl	7138 <z_spin_lock_valid>
    60a2:	b968      	cbnz	r0, 60c0 <z_thread_timeout+0x38>
    60a4:	4a1f      	ldr	r2, [pc, #124]	; (6124 <z_thread_timeout+0x9c>)
    60a6:	4920      	ldr	r1, [pc, #128]	; (6128 <z_thread_timeout+0xa0>)
    60a8:	4820      	ldr	r0, [pc, #128]	; (612c <z_thread_timeout+0xa4>)
    60aa:	2381      	movs	r3, #129	; 0x81
    60ac:	f002 f9d7 	bl	845e <printk>
    60b0:	491b      	ldr	r1, [pc, #108]	; (6120 <z_thread_timeout+0x98>)
    60b2:	481f      	ldr	r0, [pc, #124]	; (6130 <z_thread_timeout+0xa8>)
    60b4:	f002 f9d3 	bl	845e <printk>
    60b8:	481a      	ldr	r0, [pc, #104]	; (6124 <z_thread_timeout+0x9c>)
    60ba:	2181      	movs	r1, #129	; 0x81
    60bc:	f002 f8f8 	bl	82b0 <assert_post_action>
	z_spin_lock_set_owner(l);
    60c0:	4817      	ldr	r0, [pc, #92]	; (6120 <z_thread_timeout+0x98>)
    60c2:	f001 f857 	bl	7174 <z_spin_lock_set_owner>
		if (!killed) {
    60c6:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    60ca:	f013 0f28 	tst.w	r3, #40	; 0x28
    60ce:	d110      	bne.n	60f2 <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
    60d0:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    60d4:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
    60d8:	b113      	cbz	r3, 60e0 <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
    60da:	4628      	mov	r0, r5
    60dc:	f7ff fd72 	bl	5bc4 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    60e0:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    60e4:	f023 0314 	bic.w	r3, r3, #20
    60e8:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    60ec:	4628      	mov	r0, r5
    60ee:	f7ff fedd 	bl	5eac <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    60f2:	480b      	ldr	r0, [pc, #44]	; (6120 <z_thread_timeout+0x98>)
    60f4:	f001 f82e 	bl	7154 <z_spin_unlock_valid>
    60f8:	b968      	cbnz	r0, 6116 <z_thread_timeout+0x8e>
    60fa:	4a0a      	ldr	r2, [pc, #40]	; (6124 <z_thread_timeout+0x9c>)
    60fc:	490d      	ldr	r1, [pc, #52]	; (6134 <z_thread_timeout+0xac>)
    60fe:	480b      	ldr	r0, [pc, #44]	; (612c <z_thread_timeout+0xa4>)
    6100:	23ac      	movs	r3, #172	; 0xac
    6102:	f002 f9ac 	bl	845e <printk>
    6106:	4906      	ldr	r1, [pc, #24]	; (6120 <z_thread_timeout+0x98>)
    6108:	480b      	ldr	r0, [pc, #44]	; (6138 <z_thread_timeout+0xb0>)
    610a:	f002 f9a8 	bl	845e <printk>
    610e:	4805      	ldr	r0, [pc, #20]	; (6124 <z_thread_timeout+0x9c>)
    6110:	21ac      	movs	r1, #172	; 0xac
    6112:	f002 f8cd 	bl	82b0 <assert_post_action>
	__asm__ volatile(
    6116:	f386 8811 	msr	BASEPRI, r6
    611a:	f3bf 8f6f 	isb	sy
}
    611e:	bd70      	pop	{r4, r5, r6, pc}
    6120:	20000c68 	.word	0x20000c68
    6124:	00009623 	.word	0x00009623
    6128:	00009675 	.word	0x00009675
    612c:	00009190 	.word	0x00009190
    6130:	0000968a 	.word	0x0000968a
    6134:	00009649 	.word	0x00009649
    6138:	00009660 	.word	0x00009660

0000613c <unready_thread>:
{
    613c:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    613e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    6142:	7b43      	ldrb	r3, [r0, #13]
    6144:	2a00      	cmp	r2, #0
{
    6146:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    6148:	da06      	bge.n	6158 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    614a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    614e:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6150:	4601      	mov	r1, r0
    6152:	4806      	ldr	r0, [pc, #24]	; (616c <unready_thread+0x30>)
    6154:	f7ff fd14 	bl	5b80 <z_priq_dumb_remove>
	update_cache(thread == _current);
    6158:	4b05      	ldr	r3, [pc, #20]	; (6170 <unready_thread+0x34>)
    615a:	6898      	ldr	r0, [r3, #8]
    615c:	1b03      	subs	r3, r0, r4
    615e:	4258      	negs	r0, r3
}
    6160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    6164:	4158      	adcs	r0, r3
    6166:	f7ff bd9b 	b.w	5ca0 <update_cache>
    616a:	bf00      	nop
    616c:	20000c54 	.word	0x20000c54
    6170:	20000c34 	.word	0x20000c34

00006174 <add_to_waitq_locked>:
{
    6174:	b538      	push	{r3, r4, r5, lr}
    6176:	4604      	mov	r4, r0
    6178:	460d      	mov	r5, r1
	unready_thread(thread);
    617a:	f7ff ffdf 	bl	613c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    617e:	7b63      	ldrb	r3, [r4, #13]
    6180:	f043 0302 	orr.w	r3, r3, #2
    6184:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    6186:	b31d      	cbz	r5, 61d0 <add_to_waitq_locked+0x5c>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6188:	4b17      	ldr	r3, [pc, #92]	; (61e8 <add_to_waitq_locked+0x74>)
		thread->base.pended_on = wait_q;
    618a:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    618c:	429c      	cmp	r4, r3
    618e:	d109      	bne.n	61a4 <add_to_waitq_locked+0x30>
    6190:	4916      	ldr	r1, [pc, #88]	; (61ec <add_to_waitq_locked+0x78>)
    6192:	4817      	ldr	r0, [pc, #92]	; (61f0 <add_to_waitq_locked+0x7c>)
    6194:	4a17      	ldr	r2, [pc, #92]	; (61f4 <add_to_waitq_locked+0x80>)
    6196:	23ba      	movs	r3, #186	; 0xba
    6198:	f002 f961 	bl	845e <printk>
    619c:	4815      	ldr	r0, [pc, #84]	; (61f4 <add_to_waitq_locked+0x80>)
    619e:	21ba      	movs	r1, #186	; 0xba
    61a0:	f002 f886 	bl	82b0 <assert_post_action>
	return list->head == list;
    61a4:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    61a6:	429d      	cmp	r5, r3
    61a8:	bf08      	it	eq
    61aa:	2300      	moveq	r3, #0
    61ac:	2b00      	cmp	r3, #0
    61ae:	bf38      	it	cc
    61b0:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    61b2:	b19b      	cbz	r3, 61dc <add_to_waitq_locked+0x68>
	int32_t b1 = thread_1->base.prio;
    61b4:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    61b8:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    61bc:	4291      	cmp	r1, r2
    61be:	d008      	beq.n	61d2 <add_to_waitq_locked+0x5e>
		return b2 - b1;
    61c0:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    61c2:	2a00      	cmp	r2, #0
    61c4:	dd05      	ble.n	61d2 <add_to_waitq_locked+0x5e>
	sys_dnode_t *const prev = successor->prev;
    61c6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    61c8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    61cc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    61ce:	605c      	str	r4, [r3, #4]
}
    61d0:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    61d2:	686a      	ldr	r2, [r5, #4]
    61d4:	4293      	cmp	r3, r2
    61d6:	d001      	beq.n	61dc <add_to_waitq_locked+0x68>
    61d8:	681b      	ldr	r3, [r3, #0]
    61da:	e7ea      	b.n	61b2 <add_to_waitq_locked+0x3e>
	sys_dnode_t *const tail = list->tail;
    61dc:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    61de:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    61e2:	601c      	str	r4, [r3, #0]
	list->tail = node;
    61e4:	606c      	str	r4, [r5, #4]
    61e6:	e7f3      	b.n	61d0 <add_to_waitq_locked+0x5c>
    61e8:	200003f8 	.word	0x200003f8
    61ec:	0000a1b5 	.word	0x0000a1b5
    61f0:	00009190 	.word	0x00009190
    61f4:	0000a193 	.word	0x0000a193

000061f8 <pend>:
{
    61f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    61fc:	4604      	mov	r4, r0
    61fe:	460d      	mov	r5, r1
    6200:	4616      	mov	r6, r2
    6202:	461f      	mov	r7, r3
	__asm__ volatile(
    6204:	f04f 0320 	mov.w	r3, #32
    6208:	f3ef 8811 	mrs	r8, BASEPRI
    620c:	f383 8812 	msr	BASEPRI_MAX, r3
    6210:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6214:	481f      	ldr	r0, [pc, #124]	; (6294 <pend+0x9c>)
    6216:	f000 ff8f 	bl	7138 <z_spin_lock_valid>
    621a:	b968      	cbnz	r0, 6238 <pend+0x40>
    621c:	4a1e      	ldr	r2, [pc, #120]	; (6298 <pend+0xa0>)
    621e:	491f      	ldr	r1, [pc, #124]	; (629c <pend+0xa4>)
    6220:	481f      	ldr	r0, [pc, #124]	; (62a0 <pend+0xa8>)
    6222:	2381      	movs	r3, #129	; 0x81
    6224:	f002 f91b 	bl	845e <printk>
    6228:	491a      	ldr	r1, [pc, #104]	; (6294 <pend+0x9c>)
    622a:	481e      	ldr	r0, [pc, #120]	; (62a4 <pend+0xac>)
    622c:	f002 f917 	bl	845e <printk>
    6230:	4819      	ldr	r0, [pc, #100]	; (6298 <pend+0xa0>)
    6232:	2181      	movs	r1, #129	; 0x81
    6234:	f002 f83c 	bl	82b0 <assert_post_action>
	z_spin_lock_set_owner(l);
    6238:	4816      	ldr	r0, [pc, #88]	; (6294 <pend+0x9c>)
    623a:	f000 ff9b 	bl	7174 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    623e:	4620      	mov	r0, r4
    6240:	4629      	mov	r1, r5
    6242:	f7ff ff97 	bl	6174 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6246:	4813      	ldr	r0, [pc, #76]	; (6294 <pend+0x9c>)
    6248:	f000 ff84 	bl	7154 <z_spin_unlock_valid>
    624c:	b968      	cbnz	r0, 626a <pend+0x72>
    624e:	4a12      	ldr	r2, [pc, #72]	; (6298 <pend+0xa0>)
    6250:	4915      	ldr	r1, [pc, #84]	; (62a8 <pend+0xb0>)
    6252:	4813      	ldr	r0, [pc, #76]	; (62a0 <pend+0xa8>)
    6254:	23ac      	movs	r3, #172	; 0xac
    6256:	f002 f902 	bl	845e <printk>
    625a:	490e      	ldr	r1, [pc, #56]	; (6294 <pend+0x9c>)
    625c:	4813      	ldr	r0, [pc, #76]	; (62ac <pend+0xb4>)
    625e:	f002 f8fe 	bl	845e <printk>
    6262:	480d      	ldr	r0, [pc, #52]	; (6298 <pend+0xa0>)
    6264:	21ac      	movs	r1, #172	; 0xac
    6266:	f002 f823 	bl	82b0 <assert_post_action>
	__asm__ volatile(
    626a:	f388 8811 	msr	BASEPRI, r8
    626e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6272:	1c7b      	adds	r3, r7, #1
    6274:	bf08      	it	eq
    6276:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    627a:	d008      	beq.n	628e <pend+0x96>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    627c:	4632      	mov	r2, r6
    627e:	463b      	mov	r3, r7
    6280:	f104 0018 	add.w	r0, r4, #24
    6284:	490a      	ldr	r1, [pc, #40]	; (62b0 <pend+0xb8>)
}
    6286:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    628a:	f000 bfcb 	b.w	7224 <z_add_timeout>
    628e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6292:	bf00      	nop
    6294:	20000c68 	.word	0x20000c68
    6298:	00009623 	.word	0x00009623
    629c:	00009675 	.word	0x00009675
    62a0:	00009190 	.word	0x00009190
    62a4:	0000968a 	.word	0x0000968a
    62a8:	00009649 	.word	0x00009649
    62ac:	00009660 	.word	0x00009660
    62b0:	00006089 	.word	0x00006089

000062b4 <z_pend_curr>:
{
    62b4:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
    62b6:	4b11      	ldr	r3, [pc, #68]	; (62fc <z_pend_curr+0x48>)
{
    62b8:	4604      	mov	r4, r0
	pending_current = _current;
    62ba:	6898      	ldr	r0, [r3, #8]
    62bc:	4b10      	ldr	r3, [pc, #64]	; (6300 <z_pend_curr+0x4c>)
{
    62be:	460d      	mov	r5, r1
	pending_current = _current;
    62c0:	6018      	str	r0, [r3, #0]
{
    62c2:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    62c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    62c8:	f7ff ff96 	bl	61f8 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    62cc:	4620      	mov	r0, r4
    62ce:	f000 ff41 	bl	7154 <z_spin_unlock_valid>
    62d2:	b968      	cbnz	r0, 62f0 <z_pend_curr+0x3c>
    62d4:	4a0b      	ldr	r2, [pc, #44]	; (6304 <z_pend_curr+0x50>)
    62d6:	490c      	ldr	r1, [pc, #48]	; (6308 <z_pend_curr+0x54>)
    62d8:	480c      	ldr	r0, [pc, #48]	; (630c <z_pend_curr+0x58>)
    62da:	23c3      	movs	r3, #195	; 0xc3
    62dc:	f002 f8bf 	bl	845e <printk>
    62e0:	480b      	ldr	r0, [pc, #44]	; (6310 <z_pend_curr+0x5c>)
    62e2:	4621      	mov	r1, r4
    62e4:	f002 f8bb 	bl	845e <printk>
    62e8:	4806      	ldr	r0, [pc, #24]	; (6304 <z_pend_curr+0x50>)
    62ea:	21c3      	movs	r1, #195	; 0xc3
    62ec:	f001 ffe0 	bl	82b0 <assert_post_action>
    62f0:	4628      	mov	r0, r5
}
    62f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    62f6:	f7fb bd7f 	b.w	1df8 <arch_swap>
    62fa:	bf00      	nop
    62fc:	20000c34 	.word	0x20000c34
    6300:	20000c64 	.word	0x20000c64
    6304:	00009623 	.word	0x00009623
    6308:	00009649 	.word	0x00009649
    630c:	00009190 	.word	0x00009190
    6310:	00009660 	.word	0x00009660

00006314 <z_set_prio>:
{
    6314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6316:	4604      	mov	r4, r0
    6318:	460e      	mov	r6, r1
	__asm__ volatile(
    631a:	f04f 0320 	mov.w	r3, #32
    631e:	f3ef 8711 	mrs	r7, BASEPRI
    6322:	f383 8812 	msr	BASEPRI_MAX, r3
    6326:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    632a:	483c      	ldr	r0, [pc, #240]	; (641c <z_set_prio+0x108>)
    632c:	f000 ff04 	bl	7138 <z_spin_lock_valid>
    6330:	b968      	cbnz	r0, 634e <z_set_prio+0x3a>
    6332:	4a3b      	ldr	r2, [pc, #236]	; (6420 <z_set_prio+0x10c>)
    6334:	493b      	ldr	r1, [pc, #236]	; (6424 <z_set_prio+0x110>)
    6336:	483c      	ldr	r0, [pc, #240]	; (6428 <z_set_prio+0x114>)
    6338:	2381      	movs	r3, #129	; 0x81
    633a:	f002 f890 	bl	845e <printk>
    633e:	4937      	ldr	r1, [pc, #220]	; (641c <z_set_prio+0x108>)
    6340:	483a      	ldr	r0, [pc, #232]	; (642c <z_set_prio+0x118>)
    6342:	f002 f88c 	bl	845e <printk>
    6346:	4836      	ldr	r0, [pc, #216]	; (6420 <z_set_prio+0x10c>)
    6348:	2181      	movs	r1, #129	; 0x81
    634a:	f001 ffb1 	bl	82b0 <assert_post_action>
	z_spin_lock_set_owner(l);
    634e:	4833      	ldr	r0, [pc, #204]	; (641c <z_set_prio+0x108>)
    6350:	f000 ff10 	bl	7174 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    6354:	7b63      	ldrb	r3, [r4, #13]
    6356:	06da      	lsls	r2, r3, #27
    6358:	b276      	sxtb	r6, r6
    635a:	d15c      	bne.n	6416 <z_set_prio+0x102>
	return !sys_dnode_is_linked(&to->node);
    635c:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
    635e:	2d00      	cmp	r5, #0
    6360:	d159      	bne.n	6416 <z_set_prio+0x102>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6362:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6366:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6368:	4831      	ldr	r0, [pc, #196]	; (6430 <z_set_prio+0x11c>)
    636a:	4621      	mov	r1, r4
    636c:	f7ff fc08 	bl	5b80 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    6370:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    6372:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    6374:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6378:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    637a:	4b2e      	ldr	r3, [pc, #184]	; (6434 <z_set_prio+0x120>)
    637c:	429c      	cmp	r4, r3
    637e:	d109      	bne.n	6394 <z_set_prio+0x80>
    6380:	492d      	ldr	r1, [pc, #180]	; (6438 <z_set_prio+0x124>)
    6382:	4829      	ldr	r0, [pc, #164]	; (6428 <z_set_prio+0x114>)
    6384:	4a2d      	ldr	r2, [pc, #180]	; (643c <z_set_prio+0x128>)
    6386:	23ba      	movs	r3, #186	; 0xba
    6388:	f002 f869 	bl	845e <printk>
    638c:	482b      	ldr	r0, [pc, #172]	; (643c <z_set_prio+0x128>)
    638e:	21ba      	movs	r1, #186	; 0xba
    6390:	f001 ff8e 	bl	82b0 <assert_post_action>
	return list->head == list;
    6394:	492a      	ldr	r1, [pc, #168]	; (6440 <z_set_prio+0x12c>)
    6396:	460b      	mov	r3, r1
    6398:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    639c:	4298      	cmp	r0, r3
    639e:	bf18      	it	ne
    63a0:	4605      	movne	r5, r0
    63a2:	2d00      	cmp	r5, #0
    63a4:	461a      	mov	r2, r3
    63a6:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    63a8:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    63aa:	bf38      	it	cc
    63ac:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    63ae:	b36b      	cbz	r3, 640c <z_set_prio+0xf8>
	int32_t b1 = thread_1->base.prio;
    63b0:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    63b4:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    63b8:	4286      	cmp	r6, r0
    63ba:	d023      	beq.n	6404 <z_set_prio+0xf0>
		return b2 - b1;
    63bc:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    63be:	2800      	cmp	r0, #0
    63c0:	dd20      	ble.n	6404 <z_set_prio+0xf0>
	sys_dnode_t *const prev = successor->prev;
    63c2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    63c4:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    63c8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    63ca:	605c      	str	r4, [r3, #4]
			update_cache(1);
    63cc:	2001      	movs	r0, #1
    63ce:	f7ff fc67 	bl	5ca0 <update_cache>
    63d2:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    63d4:	4811      	ldr	r0, [pc, #68]	; (641c <z_set_prio+0x108>)
    63d6:	f000 febd 	bl	7154 <z_spin_unlock_valid>
    63da:	b968      	cbnz	r0, 63f8 <z_set_prio+0xe4>
    63dc:	4a10      	ldr	r2, [pc, #64]	; (6420 <z_set_prio+0x10c>)
    63de:	4919      	ldr	r1, [pc, #100]	; (6444 <z_set_prio+0x130>)
    63e0:	4811      	ldr	r0, [pc, #68]	; (6428 <z_set_prio+0x114>)
    63e2:	23ac      	movs	r3, #172	; 0xac
    63e4:	f002 f83b 	bl	845e <printk>
    63e8:	490c      	ldr	r1, [pc, #48]	; (641c <z_set_prio+0x108>)
    63ea:	4817      	ldr	r0, [pc, #92]	; (6448 <z_set_prio+0x134>)
    63ec:	f002 f837 	bl	845e <printk>
    63f0:	480b      	ldr	r0, [pc, #44]	; (6420 <z_set_prio+0x10c>)
    63f2:	21ac      	movs	r1, #172	; 0xac
    63f4:	f001 ff5c 	bl	82b0 <assert_post_action>
	__asm__ volatile(
    63f8:	f387 8811 	msr	BASEPRI, r7
    63fc:	f3bf 8f6f 	isb	sy
}
    6400:	4620      	mov	r0, r4
    6402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    6404:	42ab      	cmp	r3, r5
    6406:	d001      	beq.n	640c <z_set_prio+0xf8>
    6408:	681b      	ldr	r3, [r3, #0]
    640a:	e7d0      	b.n	63ae <z_set_prio+0x9a>
	node->prev = tail;
    640c:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    6410:	602c      	str	r4, [r5, #0]
	list->tail = node;
    6412:	624c      	str	r4, [r1, #36]	; 0x24
}
    6414:	e7da      	b.n	63cc <z_set_prio+0xb8>
			thread->base.prio = prio;
    6416:	73a6      	strb	r6, [r4, #14]
    6418:	2400      	movs	r4, #0
    641a:	e7db      	b.n	63d4 <z_set_prio+0xc0>
    641c:	20000c68 	.word	0x20000c68
    6420:	00009623 	.word	0x00009623
    6424:	00009675 	.word	0x00009675
    6428:	00009190 	.word	0x00009190
    642c:	0000968a 	.word	0x0000968a
    6430:	20000c54 	.word	0x20000c54
    6434:	200003f8 	.word	0x200003f8
    6438:	0000a1b5 	.word	0x0000a1b5
    643c:	0000a193 	.word	0x0000a193
    6440:	20000c34 	.word	0x20000c34
    6444:	00009649 	.word	0x00009649
    6448:	00009660 	.word	0x00009660

0000644c <z_impl_k_thread_suspend>:
{
    644c:	b570      	push	{r4, r5, r6, lr}
    644e:	4604      	mov	r4, r0
	return z_abort_timeout(&thread->base.timeout);
    6450:	3018      	adds	r0, #24
    6452:	f000 ffbb 	bl	73cc <z_abort_timeout>
	__asm__ volatile(
    6456:	f04f 0320 	mov.w	r3, #32
    645a:	f3ef 8611 	mrs	r6, BASEPRI
    645e:	f383 8812 	msr	BASEPRI_MAX, r3
    6462:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6466:	4825      	ldr	r0, [pc, #148]	; (64fc <z_impl_k_thread_suspend+0xb0>)
    6468:	f000 fe66 	bl	7138 <z_spin_lock_valid>
    646c:	b968      	cbnz	r0, 648a <z_impl_k_thread_suspend+0x3e>
    646e:	4a24      	ldr	r2, [pc, #144]	; (6500 <z_impl_k_thread_suspend+0xb4>)
    6470:	4924      	ldr	r1, [pc, #144]	; (6504 <z_impl_k_thread_suspend+0xb8>)
    6472:	4825      	ldr	r0, [pc, #148]	; (6508 <z_impl_k_thread_suspend+0xbc>)
    6474:	2381      	movs	r3, #129	; 0x81
    6476:	f001 fff2 	bl	845e <printk>
    647a:	4920      	ldr	r1, [pc, #128]	; (64fc <z_impl_k_thread_suspend+0xb0>)
    647c:	4823      	ldr	r0, [pc, #140]	; (650c <z_impl_k_thread_suspend+0xc0>)
    647e:	f001 ffee 	bl	845e <printk>
    6482:	481f      	ldr	r0, [pc, #124]	; (6500 <z_impl_k_thread_suspend+0xb4>)
    6484:	2181      	movs	r1, #129	; 0x81
    6486:	f001 ff13 	bl	82b0 <assert_post_action>
	z_spin_lock_set_owner(l);
    648a:	481c      	ldr	r0, [pc, #112]	; (64fc <z_impl_k_thread_suspend+0xb0>)
    648c:	f000 fe72 	bl	7174 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    6490:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    6494:	7b63      	ldrb	r3, [r4, #13]
    6496:	2a00      	cmp	r2, #0
    6498:	da06      	bge.n	64a8 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    649a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
    649e:	481c      	ldr	r0, [pc, #112]	; (6510 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    64a0:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    64a2:	4621      	mov	r1, r4
    64a4:	f7ff fb6c 	bl	5b80 <z_priq_dumb_remove>
		update_cache(thread == _current);
    64a8:	4d1a      	ldr	r5, [pc, #104]	; (6514 <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    64aa:	7b63      	ldrb	r3, [r4, #13]
    64ac:	68a8      	ldr	r0, [r5, #8]
    64ae:	f043 0310 	orr.w	r3, r3, #16
    64b2:	7363      	strb	r3, [r4, #13]
    64b4:	1b03      	subs	r3, r0, r4
    64b6:	4258      	negs	r0, r3
    64b8:	4158      	adcs	r0, r3
    64ba:	f7ff fbf1 	bl	5ca0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    64be:	480f      	ldr	r0, [pc, #60]	; (64fc <z_impl_k_thread_suspend+0xb0>)
    64c0:	f000 fe48 	bl	7154 <z_spin_unlock_valid>
    64c4:	b968      	cbnz	r0, 64e2 <z_impl_k_thread_suspend+0x96>
    64c6:	4a0e      	ldr	r2, [pc, #56]	; (6500 <z_impl_k_thread_suspend+0xb4>)
    64c8:	4913      	ldr	r1, [pc, #76]	; (6518 <z_impl_k_thread_suspend+0xcc>)
    64ca:	480f      	ldr	r0, [pc, #60]	; (6508 <z_impl_k_thread_suspend+0xbc>)
    64cc:	23ac      	movs	r3, #172	; 0xac
    64ce:	f001 ffc6 	bl	845e <printk>
    64d2:	490a      	ldr	r1, [pc, #40]	; (64fc <z_impl_k_thread_suspend+0xb0>)
    64d4:	4811      	ldr	r0, [pc, #68]	; (651c <z_impl_k_thread_suspend+0xd0>)
    64d6:	f001 ffc2 	bl	845e <printk>
    64da:	4809      	ldr	r0, [pc, #36]	; (6500 <z_impl_k_thread_suspend+0xb4>)
    64dc:	21ac      	movs	r1, #172	; 0xac
    64de:	f001 fee7 	bl	82b0 <assert_post_action>
	__asm__ volatile(
    64e2:	f386 8811 	msr	BASEPRI, r6
    64e6:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    64ea:	68ab      	ldr	r3, [r5, #8]
    64ec:	42a3      	cmp	r3, r4
    64ee:	d103      	bne.n	64f8 <z_impl_k_thread_suspend+0xac>
}
    64f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    64f4:	f002 bb1e 	b.w	8b34 <z_reschedule_unlocked>
}
    64f8:	bd70      	pop	{r4, r5, r6, pc}
    64fa:	bf00      	nop
    64fc:	20000c68 	.word	0x20000c68
    6500:	00009623 	.word	0x00009623
    6504:	00009675 	.word	0x00009675
    6508:	00009190 	.word	0x00009190
    650c:	0000968a 	.word	0x0000968a
    6510:	20000c54 	.word	0x20000c54
    6514:	20000c34 	.word	0x20000c34
    6518:	00009649 	.word	0x00009649
    651c:	00009660 	.word	0x00009660

00006520 <k_sched_unlock>:
{
    6520:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    6522:	f04f 0320 	mov.w	r3, #32
    6526:	f3ef 8511 	mrs	r5, BASEPRI
    652a:	f383 8812 	msr	BASEPRI_MAX, r3
    652e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6532:	482d      	ldr	r0, [pc, #180]	; (65e8 <k_sched_unlock+0xc8>)
    6534:	f000 fe00 	bl	7138 <z_spin_lock_valid>
    6538:	b968      	cbnz	r0, 6556 <k_sched_unlock+0x36>
    653a:	4a2c      	ldr	r2, [pc, #176]	; (65ec <k_sched_unlock+0xcc>)
    653c:	492c      	ldr	r1, [pc, #176]	; (65f0 <k_sched_unlock+0xd0>)
    653e:	482d      	ldr	r0, [pc, #180]	; (65f4 <k_sched_unlock+0xd4>)
    6540:	2381      	movs	r3, #129	; 0x81
    6542:	f001 ff8c 	bl	845e <printk>
    6546:	4928      	ldr	r1, [pc, #160]	; (65e8 <k_sched_unlock+0xc8>)
    6548:	482b      	ldr	r0, [pc, #172]	; (65f8 <k_sched_unlock+0xd8>)
    654a:	f001 ff88 	bl	845e <printk>
    654e:	4827      	ldr	r0, [pc, #156]	; (65ec <k_sched_unlock+0xcc>)
    6550:	2181      	movs	r1, #129	; 0x81
    6552:	f001 fead 	bl	82b0 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
    6556:	4c29      	ldr	r4, [pc, #164]	; (65fc <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
    6558:	4823      	ldr	r0, [pc, #140]	; (65e8 <k_sched_unlock+0xc8>)
    655a:	f000 fe0b 	bl	7174 <z_spin_lock_set_owner>
    655e:	68a2      	ldr	r2, [r4, #8]
    6560:	7bd2      	ldrb	r2, [r2, #15]
    6562:	b972      	cbnz	r2, 6582 <k_sched_unlock+0x62>
    6564:	4926      	ldr	r1, [pc, #152]	; (6600 <k_sched_unlock+0xe0>)
    6566:	4a27      	ldr	r2, [pc, #156]	; (6604 <k_sched_unlock+0xe4>)
    6568:	4822      	ldr	r0, [pc, #136]	; (65f4 <k_sched_unlock+0xd4>)
    656a:	f240 3385 	movw	r3, #901	; 0x385
    656e:	f001 ff76 	bl	845e <printk>
    6572:	4825      	ldr	r0, [pc, #148]	; (6608 <k_sched_unlock+0xe8>)
    6574:	f001 ff73 	bl	845e <printk>
    6578:	4822      	ldr	r0, [pc, #136]	; (6604 <k_sched_unlock+0xe4>)
    657a:	f240 3185 	movw	r1, #901	; 0x385
    657e:	f001 fe97 	bl	82b0 <assert_post_action>
    6582:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    6586:	b173      	cbz	r3, 65a6 <k_sched_unlock+0x86>
    6588:	4920      	ldr	r1, [pc, #128]	; (660c <k_sched_unlock+0xec>)
    658a:	4a1e      	ldr	r2, [pc, #120]	; (6604 <k_sched_unlock+0xe4>)
    658c:	4819      	ldr	r0, [pc, #100]	; (65f4 <k_sched_unlock+0xd4>)
    658e:	f240 3386 	movw	r3, #902	; 0x386
    6592:	f001 ff64 	bl	845e <printk>
    6596:	481c      	ldr	r0, [pc, #112]	; (6608 <k_sched_unlock+0xe8>)
    6598:	f001 ff61 	bl	845e <printk>
    659c:	4819      	ldr	r0, [pc, #100]	; (6604 <k_sched_unlock+0xe4>)
    659e:	f240 3186 	movw	r1, #902	; 0x386
    65a2:	f001 fe85 	bl	82b0 <assert_post_action>
		++_current->base.sched_locked;
    65a6:	68a2      	ldr	r2, [r4, #8]
    65a8:	7bd3      	ldrb	r3, [r2, #15]
    65aa:	3301      	adds	r3, #1
		update_cache(0);
    65ac:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    65ae:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    65b0:	f7ff fb76 	bl	5ca0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    65b4:	480c      	ldr	r0, [pc, #48]	; (65e8 <k_sched_unlock+0xc8>)
    65b6:	f000 fdcd 	bl	7154 <z_spin_unlock_valid>
    65ba:	b968      	cbnz	r0, 65d8 <k_sched_unlock+0xb8>
    65bc:	4a0b      	ldr	r2, [pc, #44]	; (65ec <k_sched_unlock+0xcc>)
    65be:	4914      	ldr	r1, [pc, #80]	; (6610 <k_sched_unlock+0xf0>)
    65c0:	480c      	ldr	r0, [pc, #48]	; (65f4 <k_sched_unlock+0xd4>)
    65c2:	23ac      	movs	r3, #172	; 0xac
    65c4:	f001 ff4b 	bl	845e <printk>
    65c8:	4907      	ldr	r1, [pc, #28]	; (65e8 <k_sched_unlock+0xc8>)
    65ca:	4812      	ldr	r0, [pc, #72]	; (6614 <k_sched_unlock+0xf4>)
    65cc:	f001 ff47 	bl	845e <printk>
    65d0:	4806      	ldr	r0, [pc, #24]	; (65ec <k_sched_unlock+0xcc>)
    65d2:	21ac      	movs	r1, #172	; 0xac
    65d4:	f001 fe6c 	bl	82b0 <assert_post_action>
	__asm__ volatile(
    65d8:	f385 8811 	msr	BASEPRI, r5
    65dc:	f3bf 8f6f 	isb	sy
}
    65e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    65e4:	f002 baa6 	b.w	8b34 <z_reschedule_unlocked>
    65e8:	20000c68 	.word	0x20000c68
    65ec:	00009623 	.word	0x00009623
    65f0:	00009675 	.word	0x00009675
    65f4:	00009190 	.word	0x00009190
    65f8:	0000968a 	.word	0x0000968a
    65fc:	20000c34 	.word	0x20000c34
    6600:	0000a214 	.word	0x0000a214
    6604:	0000a193 	.word	0x0000a193
    6608:	0000a02f 	.word	0x0000a02f
    660c:	00009fb6 	.word	0x00009fb6
    6610:	00009649 	.word	0x00009649
    6614:	00009660 	.word	0x00009660

00006618 <z_unpend1_no_timeout>:
{
    6618:	b538      	push	{r3, r4, r5, lr}
    661a:	4604      	mov	r4, r0
	__asm__ volatile(
    661c:	f04f 0320 	mov.w	r3, #32
    6620:	f3ef 8511 	mrs	r5, BASEPRI
    6624:	f383 8812 	msr	BASEPRI_MAX, r3
    6628:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    662c:	4819      	ldr	r0, [pc, #100]	; (6694 <z_unpend1_no_timeout+0x7c>)
    662e:	f000 fd83 	bl	7138 <z_spin_lock_valid>
    6632:	b968      	cbnz	r0, 6650 <z_unpend1_no_timeout+0x38>
    6634:	4a18      	ldr	r2, [pc, #96]	; (6698 <z_unpend1_no_timeout+0x80>)
    6636:	4919      	ldr	r1, [pc, #100]	; (669c <z_unpend1_no_timeout+0x84>)
    6638:	4819      	ldr	r0, [pc, #100]	; (66a0 <z_unpend1_no_timeout+0x88>)
    663a:	2381      	movs	r3, #129	; 0x81
    663c:	f001 ff0f 	bl	845e <printk>
    6640:	4914      	ldr	r1, [pc, #80]	; (6694 <z_unpend1_no_timeout+0x7c>)
    6642:	4818      	ldr	r0, [pc, #96]	; (66a4 <z_unpend1_no_timeout+0x8c>)
    6644:	f001 ff0b 	bl	845e <printk>
    6648:	4813      	ldr	r0, [pc, #76]	; (6698 <z_unpend1_no_timeout+0x80>)
    664a:	2181      	movs	r1, #129	; 0x81
    664c:	f001 fe30 	bl	82b0 <assert_post_action>
	z_spin_lock_set_owner(l);
    6650:	4810      	ldr	r0, [pc, #64]	; (6694 <z_unpend1_no_timeout+0x7c>)
    6652:	f000 fd8f 	bl	7174 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    6656:	4620      	mov	r0, r4
    6658:	f002 fa76 	bl	8b48 <z_priq_dumb_best>
		if (thread != NULL) {
    665c:	4604      	mov	r4, r0
    665e:	b108      	cbz	r0, 6664 <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
    6660:	f7ff fab0 	bl	5bc4 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6664:	480b      	ldr	r0, [pc, #44]	; (6694 <z_unpend1_no_timeout+0x7c>)
    6666:	f000 fd75 	bl	7154 <z_spin_unlock_valid>
    666a:	b968      	cbnz	r0, 6688 <z_unpend1_no_timeout+0x70>
    666c:	4a0a      	ldr	r2, [pc, #40]	; (6698 <z_unpend1_no_timeout+0x80>)
    666e:	490e      	ldr	r1, [pc, #56]	; (66a8 <z_unpend1_no_timeout+0x90>)
    6670:	480b      	ldr	r0, [pc, #44]	; (66a0 <z_unpend1_no_timeout+0x88>)
    6672:	23ac      	movs	r3, #172	; 0xac
    6674:	f001 fef3 	bl	845e <printk>
    6678:	4906      	ldr	r1, [pc, #24]	; (6694 <z_unpend1_no_timeout+0x7c>)
    667a:	480c      	ldr	r0, [pc, #48]	; (66ac <z_unpend1_no_timeout+0x94>)
    667c:	f001 feef 	bl	845e <printk>
    6680:	4805      	ldr	r0, [pc, #20]	; (6698 <z_unpend1_no_timeout+0x80>)
    6682:	21ac      	movs	r1, #172	; 0xac
    6684:	f001 fe14 	bl	82b0 <assert_post_action>
	__asm__ volatile(
    6688:	f385 8811 	msr	BASEPRI, r5
    668c:	f3bf 8f6f 	isb	sy
}
    6690:	4620      	mov	r0, r4
    6692:	bd38      	pop	{r3, r4, r5, pc}
    6694:	20000c68 	.word	0x20000c68
    6698:	00009623 	.word	0x00009623
    669c:	00009675 	.word	0x00009675
    66a0:	00009190 	.word	0x00009190
    66a4:	0000968a 	.word	0x0000968a
    66a8:	00009649 	.word	0x00009649
    66ac:	00009660 	.word	0x00009660

000066b0 <z_unpend_first_thread>:
{
    66b0:	b538      	push	{r3, r4, r5, lr}
    66b2:	4604      	mov	r4, r0
	__asm__ volatile(
    66b4:	f04f 0320 	mov.w	r3, #32
    66b8:	f3ef 8511 	mrs	r5, BASEPRI
    66bc:	f383 8812 	msr	BASEPRI_MAX, r3
    66c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    66c4:	481b      	ldr	r0, [pc, #108]	; (6734 <z_unpend_first_thread+0x84>)
    66c6:	f000 fd37 	bl	7138 <z_spin_lock_valid>
    66ca:	b968      	cbnz	r0, 66e8 <z_unpend_first_thread+0x38>
    66cc:	4a1a      	ldr	r2, [pc, #104]	; (6738 <z_unpend_first_thread+0x88>)
    66ce:	491b      	ldr	r1, [pc, #108]	; (673c <z_unpend_first_thread+0x8c>)
    66d0:	481b      	ldr	r0, [pc, #108]	; (6740 <z_unpend_first_thread+0x90>)
    66d2:	2381      	movs	r3, #129	; 0x81
    66d4:	f001 fec3 	bl	845e <printk>
    66d8:	4916      	ldr	r1, [pc, #88]	; (6734 <z_unpend_first_thread+0x84>)
    66da:	481a      	ldr	r0, [pc, #104]	; (6744 <z_unpend_first_thread+0x94>)
    66dc:	f001 febf 	bl	845e <printk>
    66e0:	4815      	ldr	r0, [pc, #84]	; (6738 <z_unpend_first_thread+0x88>)
    66e2:	2181      	movs	r1, #129	; 0x81
    66e4:	f001 fde4 	bl	82b0 <assert_post_action>
	z_spin_lock_set_owner(l);
    66e8:	4812      	ldr	r0, [pc, #72]	; (6734 <z_unpend_first_thread+0x84>)
    66ea:	f000 fd43 	bl	7174 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    66ee:	4620      	mov	r0, r4
    66f0:	f002 fa2a 	bl	8b48 <z_priq_dumb_best>
		if (thread != NULL) {
    66f4:	4604      	mov	r4, r0
    66f6:	b128      	cbz	r0, 6704 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
    66f8:	f7ff fa64 	bl	5bc4 <unpend_thread_no_timeout>
    66fc:	f104 0018 	add.w	r0, r4, #24
    6700:	f000 fe64 	bl	73cc <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6704:	480b      	ldr	r0, [pc, #44]	; (6734 <z_unpend_first_thread+0x84>)
    6706:	f000 fd25 	bl	7154 <z_spin_unlock_valid>
    670a:	b968      	cbnz	r0, 6728 <z_unpend_first_thread+0x78>
    670c:	4a0a      	ldr	r2, [pc, #40]	; (6738 <z_unpend_first_thread+0x88>)
    670e:	490e      	ldr	r1, [pc, #56]	; (6748 <z_unpend_first_thread+0x98>)
    6710:	480b      	ldr	r0, [pc, #44]	; (6740 <z_unpend_first_thread+0x90>)
    6712:	23ac      	movs	r3, #172	; 0xac
    6714:	f001 fea3 	bl	845e <printk>
    6718:	4906      	ldr	r1, [pc, #24]	; (6734 <z_unpend_first_thread+0x84>)
    671a:	480c      	ldr	r0, [pc, #48]	; (674c <z_unpend_first_thread+0x9c>)
    671c:	f001 fe9f 	bl	845e <printk>
    6720:	4805      	ldr	r0, [pc, #20]	; (6738 <z_unpend_first_thread+0x88>)
    6722:	21ac      	movs	r1, #172	; 0xac
    6724:	f001 fdc4 	bl	82b0 <assert_post_action>
	__asm__ volatile(
    6728:	f385 8811 	msr	BASEPRI, r5
    672c:	f3bf 8f6f 	isb	sy
}
    6730:	4620      	mov	r0, r4
    6732:	bd38      	pop	{r3, r4, r5, pc}
    6734:	20000c68 	.word	0x20000c68
    6738:	00009623 	.word	0x00009623
    673c:	00009675 	.word	0x00009675
    6740:	00009190 	.word	0x00009190
    6744:	0000968a 	.word	0x0000968a
    6748:	00009649 	.word	0x00009649
    674c:	00009660 	.word	0x00009660

00006750 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    6750:	4b04      	ldr	r3, [pc, #16]	; (6764 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    6752:	2100      	movs	r1, #0
    6754:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    6758:	e9c3 2208 	strd	r2, r2, [r3, #32]
    675c:	4608      	mov	r0, r1
    675e:	f7ff b8a9 	b.w	58b4 <k_sched_time_slice_set>
    6762:	bf00      	nop
    6764:	20000c34 	.word	0x20000c34

00006768 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    6768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    676a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    676e:	b173      	cbz	r3, 678e <z_impl_k_yield+0x26>
    6770:	4941      	ldr	r1, [pc, #260]	; (6878 <z_impl_k_yield+0x110>)
    6772:	4a42      	ldr	r2, [pc, #264]	; (687c <z_impl_k_yield+0x114>)
    6774:	4842      	ldr	r0, [pc, #264]	; (6880 <z_impl_k_yield+0x118>)
    6776:	f240 43dc 	movw	r3, #1244	; 0x4dc
    677a:	f001 fe70 	bl	845e <printk>
    677e:	4841      	ldr	r0, [pc, #260]	; (6884 <z_impl_k_yield+0x11c>)
    6780:	f001 fe6d 	bl	845e <printk>
    6784:	483d      	ldr	r0, [pc, #244]	; (687c <z_impl_k_yield+0x114>)
    6786:	f240 41dc 	movw	r1, #1244	; 0x4dc
    678a:	f001 fd91 	bl	82b0 <assert_post_action>
	__asm__ volatile(
    678e:	f04f 0320 	mov.w	r3, #32
    6792:	f3ef 8611 	mrs	r6, BASEPRI
    6796:	f383 8812 	msr	BASEPRI_MAX, r3
    679a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    679e:	483a      	ldr	r0, [pc, #232]	; (6888 <z_impl_k_yield+0x120>)
    67a0:	f000 fcca 	bl	7138 <z_spin_lock_valid>
    67a4:	b968      	cbnz	r0, 67c2 <z_impl_k_yield+0x5a>
    67a6:	4a39      	ldr	r2, [pc, #228]	; (688c <z_impl_k_yield+0x124>)
    67a8:	4939      	ldr	r1, [pc, #228]	; (6890 <z_impl_k_yield+0x128>)
    67aa:	4835      	ldr	r0, [pc, #212]	; (6880 <z_impl_k_yield+0x118>)
    67ac:	2381      	movs	r3, #129	; 0x81
    67ae:	f001 fe56 	bl	845e <printk>
    67b2:	4935      	ldr	r1, [pc, #212]	; (6888 <z_impl_k_yield+0x120>)
    67b4:	4837      	ldr	r0, [pc, #220]	; (6894 <z_impl_k_yield+0x12c>)
    67b6:	f001 fe52 	bl	845e <printk>
    67ba:	4834      	ldr	r0, [pc, #208]	; (688c <z_impl_k_yield+0x124>)
    67bc:	2181      	movs	r1, #129	; 0x81
    67be:	f001 fd77 	bl	82b0 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    67c2:	4d35      	ldr	r5, [pc, #212]	; (6898 <z_impl_k_yield+0x130>)
	z_spin_lock_set_owner(l);
    67c4:	4830      	ldr	r0, [pc, #192]	; (6888 <z_impl_k_yield+0x120>)
    67c6:	f000 fcd5 	bl	7174 <z_spin_lock_set_owner>
    67ca:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    67cc:	7b4b      	ldrb	r3, [r1, #13]
    67ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    67d2:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    67d4:	f105 0020 	add.w	r0, r5, #32
    67d8:	f7ff f9d2 	bl	5b80 <z_priq_dumb_remove>
	}
	queue_thread(_current);
    67dc:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    67de:	7b63      	ldrb	r3, [r4, #13]
    67e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    67e4:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    67e6:	4b2d      	ldr	r3, [pc, #180]	; (689c <z_impl_k_yield+0x134>)
    67e8:	429c      	cmp	r4, r3
    67ea:	d109      	bne.n	6800 <z_impl_k_yield+0x98>
    67ec:	492c      	ldr	r1, [pc, #176]	; (68a0 <z_impl_k_yield+0x138>)
    67ee:	4824      	ldr	r0, [pc, #144]	; (6880 <z_impl_k_yield+0x118>)
    67f0:	4a22      	ldr	r2, [pc, #136]	; (687c <z_impl_k_yield+0x114>)
    67f2:	23ba      	movs	r3, #186	; 0xba
    67f4:	f001 fe33 	bl	845e <printk>
    67f8:	4820      	ldr	r0, [pc, #128]	; (687c <z_impl_k_yield+0x114>)
    67fa:	21ba      	movs	r1, #186	; 0xba
    67fc:	f001 fd58 	bl	82b0 <assert_post_action>
	return list->head == list;
    6800:	6a2b      	ldr	r3, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6802:	4828      	ldr	r0, [pc, #160]	; (68a4 <z_impl_k_yield+0x13c>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6804:	6a69      	ldr	r1, [r5, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6806:	4283      	cmp	r3, r0
    6808:	bf08      	it	eq
    680a:	2300      	moveq	r3, #0
    680c:	2b00      	cmp	r3, #0
    680e:	bf38      	it	cc
    6810:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6812:	b35b      	cbz	r3, 686c <z_impl_k_yield+0x104>
	int32_t b1 = thread_1->base.prio;
    6814:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    6818:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    681c:	4297      	cmp	r7, r2
    681e:	d021      	beq.n	6864 <z_impl_k_yield+0xfc>
		return b2 - b1;
    6820:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    6822:	2a00      	cmp	r2, #0
    6824:	dd1e      	ble.n	6864 <z_impl_k_yield+0xfc>
	sys_dnode_t *const prev = successor->prev;
    6826:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    6828:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    682c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    682e:	605c      	str	r4, [r3, #4]
	update_cache(1);
    6830:	2001      	movs	r0, #1
    6832:	f7ff fa35 	bl	5ca0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6836:	4814      	ldr	r0, [pc, #80]	; (6888 <z_impl_k_yield+0x120>)
    6838:	f000 fc8c 	bl	7154 <z_spin_unlock_valid>
    683c:	b968      	cbnz	r0, 685a <z_impl_k_yield+0xf2>
    683e:	4a13      	ldr	r2, [pc, #76]	; (688c <z_impl_k_yield+0x124>)
    6840:	4919      	ldr	r1, [pc, #100]	; (68a8 <z_impl_k_yield+0x140>)
    6842:	480f      	ldr	r0, [pc, #60]	; (6880 <z_impl_k_yield+0x118>)
    6844:	23c3      	movs	r3, #195	; 0xc3
    6846:	f001 fe0a 	bl	845e <printk>
    684a:	490f      	ldr	r1, [pc, #60]	; (6888 <z_impl_k_yield+0x120>)
    684c:	4817      	ldr	r0, [pc, #92]	; (68ac <z_impl_k_yield+0x144>)
    684e:	f001 fe06 	bl	845e <printk>
    6852:	480e      	ldr	r0, [pc, #56]	; (688c <z_impl_k_yield+0x124>)
    6854:	21c3      	movs	r1, #195	; 0xc3
    6856:	f001 fd2b 	bl	82b0 <assert_post_action>
    685a:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
    685c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6860:	f7fb baca 	b.w	1df8 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    6864:	428b      	cmp	r3, r1
    6866:	d001      	beq.n	686c <z_impl_k_yield+0x104>
    6868:	681b      	ldr	r3, [r3, #0]
    686a:	e7d2      	b.n	6812 <z_impl_k_yield+0xaa>
	node->prev = tail;
    686c:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
    6870:	600c      	str	r4, [r1, #0]
	list->tail = node;
    6872:	626c      	str	r4, [r5, #36]	; 0x24
}
    6874:	e7dc      	b.n	6830 <z_impl_k_yield+0xc8>
    6876:	bf00      	nop
    6878:	00009fb6 	.word	0x00009fb6
    687c:	0000a193 	.word	0x0000a193
    6880:	00009190 	.word	0x00009190
    6884:	0000a02f 	.word	0x0000a02f
    6888:	20000c68 	.word	0x20000c68
    688c:	00009623 	.word	0x00009623
    6890:	00009675 	.word	0x00009675
    6894:	0000968a 	.word	0x0000968a
    6898:	20000c34 	.word	0x20000c34
    689c:	200003f8 	.word	0x200003f8
    68a0:	0000a1b5 	.word	0x0000a1b5
    68a4:	20000c54 	.word	0x20000c54
    68a8:	00009649 	.word	0x00009649
    68ac:	00009660 	.word	0x00009660

000068b0 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    68b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    68b4:	4604      	mov	r4, r0
    68b6:	460d      	mov	r5, r1
    68b8:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
    68bc:	b173      	cbz	r3, 68dc <z_tick_sleep+0x2c>
    68be:	4945      	ldr	r1, [pc, #276]	; (69d4 <z_tick_sleep+0x124>)
    68c0:	4a45      	ldr	r2, [pc, #276]	; (69d8 <z_tick_sleep+0x128>)
    68c2:	4846      	ldr	r0, [pc, #280]	; (69dc <z_tick_sleep+0x12c>)
    68c4:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
    68c8:	f001 fdc9 	bl	845e <printk>
    68cc:	4844      	ldr	r0, [pc, #272]	; (69e0 <z_tick_sleep+0x130>)
    68ce:	f001 fdc6 	bl	845e <printk>
    68d2:	4841      	ldr	r0, [pc, #260]	; (69d8 <z_tick_sleep+0x128>)
    68d4:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
    68d8:	f001 fcea 	bl	82b0 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    68dc:	ea54 0305 	orrs.w	r3, r4, r5
    68e0:	d104      	bne.n	68ec <z_tick_sleep+0x3c>
	z_impl_k_yield();
    68e2:	f7ff ff41 	bl	6768 <z_impl_k_yield>
		k_yield();
		return 0;
    68e6:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
    68e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
    68ec:	f06f 0301 	mvn.w	r3, #1
    68f0:	1b1e      	subs	r6, r3, r4
    68f2:	f04f 33ff 	mov.w	r3, #4294967295
    68f6:	eb63 0705 	sbc.w	r7, r3, r5
    68fa:	2e01      	cmp	r6, #1
    68fc:	f177 0300 	sbcs.w	r3, r7, #0
    6900:	da64      	bge.n	69cc <z_tick_sleep+0x11c>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    6902:	f002 f946 	bl	8b92 <sys_clock_tick_get_32>
    6906:	1906      	adds	r6, r0, r4
    6908:	f04f 0320 	mov.w	r3, #32
    690c:	f3ef 8811 	mrs	r8, BASEPRI
    6910:	f383 8812 	msr	BASEPRI_MAX, r3
    6914:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6918:	4832      	ldr	r0, [pc, #200]	; (69e4 <z_tick_sleep+0x134>)
    691a:	f000 fc0d 	bl	7138 <z_spin_lock_valid>
    691e:	b968      	cbnz	r0, 693c <z_tick_sleep+0x8c>
    6920:	4a31      	ldr	r2, [pc, #196]	; (69e8 <z_tick_sleep+0x138>)
    6922:	4932      	ldr	r1, [pc, #200]	; (69ec <z_tick_sleep+0x13c>)
    6924:	482d      	ldr	r0, [pc, #180]	; (69dc <z_tick_sleep+0x12c>)
    6926:	2381      	movs	r3, #129	; 0x81
    6928:	f001 fd99 	bl	845e <printk>
    692c:	492d      	ldr	r1, [pc, #180]	; (69e4 <z_tick_sleep+0x134>)
    692e:	4830      	ldr	r0, [pc, #192]	; (69f0 <z_tick_sleep+0x140>)
    6930:	f001 fd95 	bl	845e <printk>
    6934:	482c      	ldr	r0, [pc, #176]	; (69e8 <z_tick_sleep+0x138>)
    6936:	2181      	movs	r1, #129	; 0x81
    6938:	f001 fcba 	bl	82b0 <assert_post_action>
	pending_current = _current;
    693c:	4f2d      	ldr	r7, [pc, #180]	; (69f4 <z_tick_sleep+0x144>)
	z_spin_lock_set_owner(l);
    693e:	4829      	ldr	r0, [pc, #164]	; (69e4 <z_tick_sleep+0x134>)
    6940:	f000 fc18 	bl	7174 <z_spin_lock_set_owner>
    6944:	4b2c      	ldr	r3, [pc, #176]	; (69f8 <z_tick_sleep+0x148>)
    6946:	68b8      	ldr	r0, [r7, #8]
    6948:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    694a:	f7ff fbf7 	bl	613c <unready_thread>
	z_add_thread_timeout(_current, timeout);
    694e:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    6950:	492a      	ldr	r1, [pc, #168]	; (69fc <z_tick_sleep+0x14c>)
    6952:	4622      	mov	r2, r4
    6954:	462b      	mov	r3, r5
    6956:	3018      	adds	r0, #24
    6958:	f000 fc64 	bl	7224 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    695c:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    695e:	4821      	ldr	r0, [pc, #132]	; (69e4 <z_tick_sleep+0x134>)
    6960:	7b53      	ldrb	r3, [r2, #13]
    6962:	f043 0310 	orr.w	r3, r3, #16
    6966:	7353      	strb	r3, [r2, #13]
    6968:	f000 fbf4 	bl	7154 <z_spin_unlock_valid>
    696c:	b968      	cbnz	r0, 698a <z_tick_sleep+0xda>
    696e:	4a1e      	ldr	r2, [pc, #120]	; (69e8 <z_tick_sleep+0x138>)
    6970:	4923      	ldr	r1, [pc, #140]	; (6a00 <z_tick_sleep+0x150>)
    6972:	481a      	ldr	r0, [pc, #104]	; (69dc <z_tick_sleep+0x12c>)
    6974:	23c3      	movs	r3, #195	; 0xc3
    6976:	f001 fd72 	bl	845e <printk>
    697a:	491a      	ldr	r1, [pc, #104]	; (69e4 <z_tick_sleep+0x134>)
    697c:	4821      	ldr	r0, [pc, #132]	; (6a04 <z_tick_sleep+0x154>)
    697e:	f001 fd6e 	bl	845e <printk>
    6982:	4819      	ldr	r0, [pc, #100]	; (69e8 <z_tick_sleep+0x138>)
    6984:	21c3      	movs	r1, #195	; 0xc3
    6986:	f001 fc93 	bl	82b0 <assert_post_action>
    698a:	4640      	mov	r0, r8
    698c:	f7fb fa34 	bl	1df8 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    6990:	68bb      	ldr	r3, [r7, #8]
    6992:	7b5b      	ldrb	r3, [r3, #13]
    6994:	06db      	lsls	r3, r3, #27
    6996:	d50e      	bpl.n	69b6 <z_tick_sleep+0x106>
    6998:	491b      	ldr	r1, [pc, #108]	; (6a08 <z_tick_sleep+0x158>)
    699a:	4a0f      	ldr	r2, [pc, #60]	; (69d8 <z_tick_sleep+0x128>)
    699c:	480f      	ldr	r0, [pc, #60]	; (69dc <z_tick_sleep+0x12c>)
    699e:	f240 5319 	movw	r3, #1305	; 0x519
    69a2:	f001 fd5c 	bl	845e <printk>
    69a6:	480e      	ldr	r0, [pc, #56]	; (69e0 <z_tick_sleep+0x130>)
    69a8:	f001 fd59 	bl	845e <printk>
    69ac:	480a      	ldr	r0, [pc, #40]	; (69d8 <z_tick_sleep+0x128>)
    69ae:	f240 5119 	movw	r1, #1305	; 0x519
    69b2:	f001 fc7d 	bl	82b0 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    69b6:	f002 f8ec 	bl	8b92 <sys_clock_tick_get_32>
    69ba:	1a30      	subs	r0, r6, r0
    69bc:	eb66 0106 	sbc.w	r1, r6, r6
		return ticks;
    69c0:	2801      	cmp	r0, #1
    69c2:	f171 0300 	sbcs.w	r3, r1, #0
    69c6:	bfb8      	it	lt
    69c8:	2000      	movlt	r0, #0
    69ca:	e78d      	b.n	68e8 <z_tick_sleep+0x38>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    69cc:	f06f 0601 	mvn.w	r6, #1
    69d0:	1b36      	subs	r6, r6, r4
    69d2:	e799      	b.n	6908 <z_tick_sleep+0x58>
    69d4:	00009fb6 	.word	0x00009fb6
    69d8:	0000a193 	.word	0x0000a193
    69dc:	00009190 	.word	0x00009190
    69e0:	0000a02f 	.word	0x0000a02f
    69e4:	20000c68 	.word	0x20000c68
    69e8:	00009623 	.word	0x00009623
    69ec:	00009675 	.word	0x00009675
    69f0:	0000968a 	.word	0x0000968a
    69f4:	20000c34 	.word	0x20000c34
    69f8:	20000c64 	.word	0x20000c64
    69fc:	00006089 	.word	0x00006089
    6a00:	00009649 	.word	0x00009649
    6a04:	00009660 	.word	0x00009660
    6a08:	0000a245 	.word	0x0000a245

00006a0c <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    6a0c:	b538      	push	{r3, r4, r5, lr}
    6a0e:	4604      	mov	r4, r0
    6a10:	460d      	mov	r5, r1
    6a12:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
    6a16:	b173      	cbz	r3, 6a36 <z_impl_k_sleep+0x2a>
    6a18:	4913      	ldr	r1, [pc, #76]	; (6a68 <z_impl_k_sleep+0x5c>)
    6a1a:	4a14      	ldr	r2, [pc, #80]	; (6a6c <z_impl_k_sleep+0x60>)
    6a1c:	4814      	ldr	r0, [pc, #80]	; (6a70 <z_impl_k_sleep+0x64>)
    6a1e:	f44f 63a5 	mov.w	r3, #1320	; 0x528
    6a22:	f001 fd1c 	bl	845e <printk>
    6a26:	4813      	ldr	r0, [pc, #76]	; (6a74 <z_impl_k_sleep+0x68>)
    6a28:	f001 fd19 	bl	845e <printk>
    6a2c:	480f      	ldr	r0, [pc, #60]	; (6a6c <z_impl_k_sleep+0x60>)
    6a2e:	f44f 61a5 	mov.w	r1, #1320	; 0x528
    6a32:	f001 fc3d 	bl	82b0 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6a36:	1c6b      	adds	r3, r5, #1
    6a38:	bf08      	it	eq
    6a3a:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    6a3e:	d106      	bne.n	6a4e <z_impl_k_sleep+0x42>
		k_thread_suspend(_current);
    6a40:	4b0d      	ldr	r3, [pc, #52]	; (6a78 <z_impl_k_sleep+0x6c>)
    6a42:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    6a44:	f7ff fd02 	bl	644c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    6a48:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    6a4c:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
    6a4e:	4620      	mov	r0, r4
    6a50:	4629      	mov	r1, r5
    6a52:	f7ff ff2d 	bl	68b0 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
    6a56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    6a5a:	fb80 3403 	smull	r3, r4, r0, r3
    6a5e:	0bd8      	lsrs	r0, r3, #15
    6a60:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return ret;
    6a64:	e7f2      	b.n	6a4c <z_impl_k_sleep+0x40>
    6a66:	bf00      	nop
    6a68:	00009fb6 	.word	0x00009fb6
    6a6c:	0000a193 	.word	0x0000a193
    6a70:	00009190 	.word	0x00009190
    6a74:	0000a02f 	.word	0x0000a02f
    6a78:	20000c34 	.word	0x20000c34

00006a7c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    6a7c:	4b01      	ldr	r3, [pc, #4]	; (6a84 <z_impl_z_current_get+0x8>)
    6a7e:	6898      	ldr	r0, [r3, #8]
    6a80:	4770      	bx	lr
    6a82:	bf00      	nop
    6a84:	20000c34 	.word	0x20000c34

00006a88 <z_impl_k_is_preempt_thread>:
    6a88:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
    6a8c:	b93b      	cbnz	r3, 6a9e <z_impl_k_is_preempt_thread+0x16>
    6a8e:	4b05      	ldr	r3, [pc, #20]	; (6aa4 <z_impl_k_is_preempt_thread+0x1c>)
    6a90:	689b      	ldr	r3, [r3, #8]
    6a92:	89d8      	ldrh	r0, [r3, #14]
    6a94:	287f      	cmp	r0, #127	; 0x7f
    6a96:	bf8c      	ite	hi
    6a98:	2000      	movhi	r0, #0
    6a9a:	2001      	movls	r0, #1
    6a9c:	4770      	bx	lr
    6a9e:	2000      	movs	r0, #0
}
    6aa0:	4770      	bx	lr
    6aa2:	bf00      	nop
    6aa4:	20000c34 	.word	0x20000c34

00006aa8 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    6aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6aac:	4604      	mov	r4, r0
    6aae:	f04f 0320 	mov.w	r3, #32
    6ab2:	f3ef 8611 	mrs	r6, BASEPRI
    6ab6:	f383 8812 	msr	BASEPRI_MAX, r3
    6aba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6abe:	4848      	ldr	r0, [pc, #288]	; (6be0 <z_thread_abort+0x138>)
    6ac0:	f000 fb3a 	bl	7138 <z_spin_lock_valid>
    6ac4:	b968      	cbnz	r0, 6ae2 <z_thread_abort+0x3a>
    6ac6:	4a47      	ldr	r2, [pc, #284]	; (6be4 <z_thread_abort+0x13c>)
    6ac8:	4947      	ldr	r1, [pc, #284]	; (6be8 <z_thread_abort+0x140>)
    6aca:	4848      	ldr	r0, [pc, #288]	; (6bec <z_thread_abort+0x144>)
    6acc:	2381      	movs	r3, #129	; 0x81
    6ace:	f001 fcc6 	bl	845e <printk>
    6ad2:	4943      	ldr	r1, [pc, #268]	; (6be0 <z_thread_abort+0x138>)
    6ad4:	4846      	ldr	r0, [pc, #280]	; (6bf0 <z_thread_abort+0x148>)
    6ad6:	f001 fcc2 	bl	845e <printk>
    6ada:	4842      	ldr	r0, [pc, #264]	; (6be4 <z_thread_abort+0x13c>)
    6adc:	2181      	movs	r1, #129	; 0x81
    6ade:	f001 fbe7 	bl	82b0 <assert_post_action>
	z_spin_lock_set_owner(l);
    6ae2:	483f      	ldr	r0, [pc, #252]	; (6be0 <z_thread_abort+0x138>)
    6ae4:	f000 fb46 	bl	7174 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    6ae8:	7b63      	ldrb	r3, [r4, #13]
    6aea:	071a      	lsls	r2, r3, #28
    6aec:	d517      	bpl.n	6b1e <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6aee:	483c      	ldr	r0, [pc, #240]	; (6be0 <z_thread_abort+0x138>)
    6af0:	f000 fb30 	bl	7154 <z_spin_unlock_valid>
    6af4:	b968      	cbnz	r0, 6b12 <z_thread_abort+0x6a>
    6af6:	4a3b      	ldr	r2, [pc, #236]	; (6be4 <z_thread_abort+0x13c>)
    6af8:	493e      	ldr	r1, [pc, #248]	; (6bf4 <z_thread_abort+0x14c>)
    6afa:	483c      	ldr	r0, [pc, #240]	; (6bec <z_thread_abort+0x144>)
    6afc:	23ac      	movs	r3, #172	; 0xac
    6afe:	f001 fcae 	bl	845e <printk>
    6b02:	4937      	ldr	r1, [pc, #220]	; (6be0 <z_thread_abort+0x138>)
    6b04:	483c      	ldr	r0, [pc, #240]	; (6bf8 <z_thread_abort+0x150>)
    6b06:	f001 fcaa 	bl	845e <printk>
    6b0a:	4836      	ldr	r0, [pc, #216]	; (6be4 <z_thread_abort+0x13c>)
    6b0c:	21ac      	movs	r1, #172	; 0xac
    6b0e:	f001 fbcf 	bl	82b0 <assert_post_action>
	__asm__ volatile(
    6b12:	f386 8811 	msr	BASEPRI, r6
    6b16:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    6b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    6b1e:	f023 0220 	bic.w	r2, r3, #32
    6b22:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    6b26:	09d2      	lsrs	r2, r2, #7
    6b28:	d142      	bne.n	6bb0 <z_thread_abort+0x108>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    6b2a:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
    6b2c:	68a3      	ldr	r3, [r4, #8]
    6b2e:	b113      	cbz	r3, 6b36 <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
    6b30:	4620      	mov	r0, r4
    6b32:	f7ff f847 	bl	5bc4 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    6b36:	f104 0018 	add.w	r0, r4, #24
    6b3a:	f000 fc47 	bl	73cc <z_abort_timeout>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    6b3e:	f104 0758 	add.w	r7, r4, #88	; 0x58
    6b42:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    6b46:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6b48:	42bd      	cmp	r5, r7
    6b4a:	d001      	beq.n	6b50 <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    6b4c:	2d00      	cmp	r5, #0
    6b4e:	d139      	bne.n	6bc4 <z_thread_abort+0x11c>
		update_cache(1);
    6b50:	2001      	movs	r0, #1
    6b52:	f7ff f8a5 	bl	5ca0 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    6b56:	4b29      	ldr	r3, [pc, #164]	; (6bfc <z_thread_abort+0x154>)
    6b58:	689b      	ldr	r3, [r3, #8]
    6b5a:	42a3      	cmp	r3, r4
    6b5c:	d1c7      	bne.n	6aee <z_thread_abort+0x46>
    6b5e:	f3ef 8305 	mrs	r3, IPSR
    6b62:	2b00      	cmp	r3, #0
    6b64:	d1c3      	bne.n	6aee <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6b66:	481e      	ldr	r0, [pc, #120]	; (6be0 <z_thread_abort+0x138>)
    6b68:	f000 faf4 	bl	7154 <z_spin_unlock_valid>
    6b6c:	b968      	cbnz	r0, 6b8a <z_thread_abort+0xe2>
    6b6e:	4a1d      	ldr	r2, [pc, #116]	; (6be4 <z_thread_abort+0x13c>)
    6b70:	4920      	ldr	r1, [pc, #128]	; (6bf4 <z_thread_abort+0x14c>)
    6b72:	481e      	ldr	r0, [pc, #120]	; (6bec <z_thread_abort+0x144>)
    6b74:	23c3      	movs	r3, #195	; 0xc3
    6b76:	f001 fc72 	bl	845e <printk>
    6b7a:	4919      	ldr	r1, [pc, #100]	; (6be0 <z_thread_abort+0x138>)
    6b7c:	481e      	ldr	r0, [pc, #120]	; (6bf8 <z_thread_abort+0x150>)
    6b7e:	f001 fc6e 	bl	845e <printk>
    6b82:	4818      	ldr	r0, [pc, #96]	; (6be4 <z_thread_abort+0x13c>)
    6b84:	21c3      	movs	r1, #195	; 0xc3
    6b86:	f001 fb93 	bl	82b0 <assert_post_action>
    6b8a:	4630      	mov	r0, r6
    6b8c:	f7fb f934 	bl	1df8 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    6b90:	4a1b      	ldr	r2, [pc, #108]	; (6c00 <z_thread_abort+0x158>)
    6b92:	491c      	ldr	r1, [pc, #112]	; (6c04 <z_thread_abort+0x15c>)
    6b94:	4815      	ldr	r0, [pc, #84]	; (6bec <z_thread_abort+0x144>)
    6b96:	f240 634b 	movw	r3, #1611	; 0x64b
    6b9a:	f001 fc60 	bl	845e <printk>
    6b9e:	481a      	ldr	r0, [pc, #104]	; (6c08 <z_thread_abort+0x160>)
    6ba0:	f001 fc5d 	bl	845e <printk>
    6ba4:	4816      	ldr	r0, [pc, #88]	; (6c00 <z_thread_abort+0x158>)
    6ba6:	f240 614b 	movw	r1, #1611	; 0x64b
    6baa:	f001 fb81 	bl	82b0 <assert_post_action>
    6bae:	e79e      	b.n	6aee <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6bb0:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    6bb4:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
    6bb8:	4814      	ldr	r0, [pc, #80]	; (6c0c <z_thread_abort+0x164>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6bba:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6bbc:	4621      	mov	r1, r4
    6bbe:	f7fe ffdf 	bl	5b80 <z_priq_dumb_remove>
}
    6bc2:	e7b3      	b.n	6b2c <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
    6bc4:	4628      	mov	r0, r5
    6bc6:	f7fe fffd 	bl	5bc4 <unpend_thread_no_timeout>
    6bca:	f105 0018 	add.w	r0, r5, #24
    6bce:	f000 fbfd 	bl	73cc <z_abort_timeout>
    6bd2:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
    6bd6:	4628      	mov	r0, r5
    6bd8:	f7ff f968 	bl	5eac <ready_thread>
    6bdc:	e7b3      	b.n	6b46 <z_thread_abort+0x9e>
    6bde:	bf00      	nop
    6be0:	20000c68 	.word	0x20000c68
    6be4:	00009623 	.word	0x00009623
    6be8:	00009675 	.word	0x00009675
    6bec:	00009190 	.word	0x00009190
    6bf0:	0000968a 	.word	0x0000968a
    6bf4:	00009649 	.word	0x00009649
    6bf8:	00009660 	.word	0x00009660
    6bfc:	20000c34 	.word	0x20000c34
    6c00:	0000a193 	.word	0x0000a193
    6c04:	00009cef 	.word	0x00009cef
    6c08:	0000a285 	.word	0x0000a285
    6c0c:	20000c54 	.word	0x20000c54

00006c10 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
    6c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6c12:	4604      	mov	r4, r0
    6c14:	460e      	mov	r6, r1
    6c16:	4615      	mov	r5, r2
	__asm__ volatile(
    6c18:	f04f 0320 	mov.w	r3, #32
    6c1c:	f3ef 8711 	mrs	r7, BASEPRI
    6c20:	f383 8812 	msr	BASEPRI_MAX, r3
    6c24:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6c28:	481e      	ldr	r0, [pc, #120]	; (6ca4 <z_sched_wake+0x94>)
    6c2a:	f000 fa85 	bl	7138 <z_spin_lock_valid>
    6c2e:	b968      	cbnz	r0, 6c4c <z_sched_wake+0x3c>
    6c30:	4a1d      	ldr	r2, [pc, #116]	; (6ca8 <z_sched_wake+0x98>)
    6c32:	491e      	ldr	r1, [pc, #120]	; (6cac <z_sched_wake+0x9c>)
    6c34:	481e      	ldr	r0, [pc, #120]	; (6cb0 <z_sched_wake+0xa0>)
    6c36:	2381      	movs	r3, #129	; 0x81
    6c38:	f001 fc11 	bl	845e <printk>
    6c3c:	4919      	ldr	r1, [pc, #100]	; (6ca4 <z_sched_wake+0x94>)
    6c3e:	481d      	ldr	r0, [pc, #116]	; (6cb4 <z_sched_wake+0xa4>)
    6c40:	f001 fc0d 	bl	845e <printk>
    6c44:	4818      	ldr	r0, [pc, #96]	; (6ca8 <z_sched_wake+0x98>)
    6c46:	2181      	movs	r1, #129	; 0x81
    6c48:	f001 fb32 	bl	82b0 <assert_post_action>
	z_spin_lock_set_owner(l);
    6c4c:	4815      	ldr	r0, [pc, #84]	; (6ca4 <z_sched_wake+0x94>)
    6c4e:	f000 fa91 	bl	7174 <z_spin_lock_set_owner>
	struct k_thread *thread;
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);
    6c52:	4620      	mov	r0, r4
    6c54:	f001 ff78 	bl	8b48 <z_priq_dumb_best>

		if (thread != NULL) {
    6c58:	4604      	mov	r4, r0
    6c5a:	b158      	cbz	r0, 6c74 <z_sched_wake+0x64>
    6c5c:	67c6      	str	r6, [r0, #124]	; 0x7c
    6c5e:	6145      	str	r5, [r0, #20]
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
    6c60:	f7fe ffb0 	bl	5bc4 <unpend_thread_no_timeout>
    6c64:	f104 0018 	add.w	r0, r4, #24
    6c68:	f000 fbb0 	bl	73cc <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
    6c6c:	4620      	mov	r0, r4
    6c6e:	f7ff f91d 	bl	5eac <ready_thread>
			ret = true;
    6c72:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6c74:	480b      	ldr	r0, [pc, #44]	; (6ca4 <z_sched_wake+0x94>)
    6c76:	f000 fa6d 	bl	7154 <z_spin_unlock_valid>
    6c7a:	b968      	cbnz	r0, 6c98 <z_sched_wake+0x88>
    6c7c:	4a0a      	ldr	r2, [pc, #40]	; (6ca8 <z_sched_wake+0x98>)
    6c7e:	490e      	ldr	r1, [pc, #56]	; (6cb8 <z_sched_wake+0xa8>)
    6c80:	480b      	ldr	r0, [pc, #44]	; (6cb0 <z_sched_wake+0xa0>)
    6c82:	23ac      	movs	r3, #172	; 0xac
    6c84:	f001 fbeb 	bl	845e <printk>
    6c88:	4906      	ldr	r1, [pc, #24]	; (6ca4 <z_sched_wake+0x94>)
    6c8a:	480c      	ldr	r0, [pc, #48]	; (6cbc <z_sched_wake+0xac>)
    6c8c:	f001 fbe7 	bl	845e <printk>
    6c90:	4805      	ldr	r0, [pc, #20]	; (6ca8 <z_sched_wake+0x98>)
    6c92:	21ac      	movs	r1, #172	; 0xac
    6c94:	f001 fb0c 	bl	82b0 <assert_post_action>
	__asm__ volatile(
    6c98:	f387 8811 	msr	BASEPRI, r7
    6c9c:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    6ca0:	4620      	mov	r0, r4
    6ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6ca4:	20000c68 	.word	0x20000c68
    6ca8:	00009623 	.word	0x00009623
    6cac:	00009675 	.word	0x00009675
    6cb0:	00009190 	.word	0x00009190
    6cb4:	0000968a 	.word	0x0000968a
    6cb8:	00009649 	.word	0x00009649
    6cbc:	00009660 	.word	0x00009660

00006cc0 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    6cc0:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    6cc2:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    6cc6:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    6cc8:	e9cd 6700 	strd	r6, r7, [sp]
    6ccc:	f7ff faf2 	bl	62b4 <z_pend_curr>

	if (data != NULL) {
    6cd0:	b11c      	cbz	r4, 6cda <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    6cd2:	4b03      	ldr	r3, [pc, #12]	; (6ce0 <z_sched_wait+0x20>)
    6cd4:	689b      	ldr	r3, [r3, #8]
    6cd6:	695b      	ldr	r3, [r3, #20]
    6cd8:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    6cda:	b002      	add	sp, #8
    6cdc:	bdd0      	pop	{r4, r6, r7, pc}
    6cde:	bf00      	nop
    6ce0:	20000c34 	.word	0x20000c34

00006ce4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    6ce4:	b538      	push	{r3, r4, r5, lr}
    6ce6:	4604      	mov	r4, r0
	__asm__ volatile(
    6ce8:	f04f 0320 	mov.w	r3, #32
    6cec:	f3ef 8511 	mrs	r5, BASEPRI
    6cf0:	f383 8812 	msr	BASEPRI_MAX, r3
    6cf4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6cf8:	4817      	ldr	r0, [pc, #92]	; (6d58 <z_impl_k_sem_give+0x74>)
    6cfa:	f000 fa1d 	bl	7138 <z_spin_lock_valid>
    6cfe:	b968      	cbnz	r0, 6d1c <z_impl_k_sem_give+0x38>
    6d00:	4a16      	ldr	r2, [pc, #88]	; (6d5c <z_impl_k_sem_give+0x78>)
    6d02:	4917      	ldr	r1, [pc, #92]	; (6d60 <z_impl_k_sem_give+0x7c>)
    6d04:	4817      	ldr	r0, [pc, #92]	; (6d64 <z_impl_k_sem_give+0x80>)
    6d06:	2381      	movs	r3, #129	; 0x81
    6d08:	f001 fba9 	bl	845e <printk>
    6d0c:	4912      	ldr	r1, [pc, #72]	; (6d58 <z_impl_k_sem_give+0x74>)
    6d0e:	4816      	ldr	r0, [pc, #88]	; (6d68 <z_impl_k_sem_give+0x84>)
    6d10:	f001 fba5 	bl	845e <printk>
    6d14:	4811      	ldr	r0, [pc, #68]	; (6d5c <z_impl_k_sem_give+0x78>)
    6d16:	2181      	movs	r1, #129	; 0x81
    6d18:	f001 faca 	bl	82b0 <assert_post_action>
	z_spin_lock_set_owner(l);
    6d1c:	480e      	ldr	r0, [pc, #56]	; (6d58 <z_impl_k_sem_give+0x74>)
    6d1e:	f000 fa29 	bl	7174 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    6d22:	4620      	mov	r0, r4
    6d24:	f7ff fcc4 	bl	66b0 <z_unpend_first_thread>

	if (thread != NULL) {
    6d28:	b148      	cbz	r0, 6d3e <z_impl_k_sem_give+0x5a>
    6d2a:	2200      	movs	r2, #0
    6d2c:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    6d2e:	f7ff f90f 	bl	5f50 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    6d32:	4629      	mov	r1, r5
    6d34:	4808      	ldr	r0, [pc, #32]	; (6d58 <z_impl_k_sem_give+0x74>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    6d36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    6d3a:	f7fe be69 	b.w	5a10 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    6d3e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    6d42:	429a      	cmp	r2, r3
    6d44:	bf18      	it	ne
    6d46:	3301      	addne	r3, #1
    6d48:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    6d4a:	2102      	movs	r1, #2
    6d4c:	f104 0010 	add.w	r0, r4, #16
    6d50:	f001 fed6 	bl	8b00 <z_handle_obj_poll_events>
}
    6d54:	e7ed      	b.n	6d32 <z_impl_k_sem_give+0x4e>
    6d56:	bf00      	nop
    6d58:	20000c74 	.word	0x20000c74
    6d5c:	00009623 	.word	0x00009623
    6d60:	00009675 	.word	0x00009675
    6d64:	00009190 	.word	0x00009190
    6d68:	0000968a 	.word	0x0000968a

00006d6c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    6d6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6d6e:	4604      	mov	r4, r0
    6d70:	4616      	mov	r6, r2
    6d72:	461f      	mov	r7, r3
    6d74:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    6d78:	b17b      	cbz	r3, 6d9a <z_impl_k_sem_take+0x2e>
    6d7a:	ea56 0307 	orrs.w	r3, r6, r7
    6d7e:	d00c      	beq.n	6d9a <z_impl_k_sem_take+0x2e>
    6d80:	4935      	ldr	r1, [pc, #212]	; (6e58 <z_impl_k_sem_take+0xec>)
    6d82:	4a36      	ldr	r2, [pc, #216]	; (6e5c <z_impl_k_sem_take+0xf0>)
    6d84:	4836      	ldr	r0, [pc, #216]	; (6e60 <z_impl_k_sem_take+0xf4>)
    6d86:	2379      	movs	r3, #121	; 0x79
    6d88:	f001 fb69 	bl	845e <printk>
    6d8c:	4835      	ldr	r0, [pc, #212]	; (6e64 <z_impl_k_sem_take+0xf8>)
    6d8e:	f001 fb66 	bl	845e <printk>
    6d92:	4832      	ldr	r0, [pc, #200]	; (6e5c <z_impl_k_sem_take+0xf0>)
    6d94:	2179      	movs	r1, #121	; 0x79
    6d96:	f001 fa8b 	bl	82b0 <assert_post_action>
    6d9a:	f04f 0320 	mov.w	r3, #32
    6d9e:	f3ef 8511 	mrs	r5, BASEPRI
    6da2:	f383 8812 	msr	BASEPRI_MAX, r3
    6da6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6daa:	482f      	ldr	r0, [pc, #188]	; (6e68 <z_impl_k_sem_take+0xfc>)
    6dac:	f000 f9c4 	bl	7138 <z_spin_lock_valid>
    6db0:	b968      	cbnz	r0, 6dce <z_impl_k_sem_take+0x62>
    6db2:	4a2e      	ldr	r2, [pc, #184]	; (6e6c <z_impl_k_sem_take+0x100>)
    6db4:	492e      	ldr	r1, [pc, #184]	; (6e70 <z_impl_k_sem_take+0x104>)
    6db6:	482a      	ldr	r0, [pc, #168]	; (6e60 <z_impl_k_sem_take+0xf4>)
    6db8:	2381      	movs	r3, #129	; 0x81
    6dba:	f001 fb50 	bl	845e <printk>
    6dbe:	492a      	ldr	r1, [pc, #168]	; (6e68 <z_impl_k_sem_take+0xfc>)
    6dc0:	482c      	ldr	r0, [pc, #176]	; (6e74 <z_impl_k_sem_take+0x108>)
    6dc2:	f001 fb4c 	bl	845e <printk>
    6dc6:	4829      	ldr	r0, [pc, #164]	; (6e6c <z_impl_k_sem_take+0x100>)
    6dc8:	2181      	movs	r1, #129	; 0x81
    6dca:	f001 fa71 	bl	82b0 <assert_post_action>
	z_spin_lock_set_owner(l);
    6dce:	4826      	ldr	r0, [pc, #152]	; (6e68 <z_impl_k_sem_take+0xfc>)
    6dd0:	f000 f9d0 	bl	7174 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    6dd4:	68a3      	ldr	r3, [r4, #8]
    6dd6:	b1d3      	cbz	r3, 6e0e <z_impl_k_sem_take+0xa2>
		sem->count--;
    6dd8:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6dda:	4823      	ldr	r0, [pc, #140]	; (6e68 <z_impl_k_sem_take+0xfc>)
    6ddc:	60a3      	str	r3, [r4, #8]
    6dde:	f000 f9b9 	bl	7154 <z_spin_unlock_valid>
    6de2:	b968      	cbnz	r0, 6e00 <z_impl_k_sem_take+0x94>
    6de4:	4a21      	ldr	r2, [pc, #132]	; (6e6c <z_impl_k_sem_take+0x100>)
    6de6:	4924      	ldr	r1, [pc, #144]	; (6e78 <z_impl_k_sem_take+0x10c>)
    6de8:	481d      	ldr	r0, [pc, #116]	; (6e60 <z_impl_k_sem_take+0xf4>)
    6dea:	23ac      	movs	r3, #172	; 0xac
    6dec:	f001 fb37 	bl	845e <printk>
    6df0:	491d      	ldr	r1, [pc, #116]	; (6e68 <z_impl_k_sem_take+0xfc>)
    6df2:	4822      	ldr	r0, [pc, #136]	; (6e7c <z_impl_k_sem_take+0x110>)
    6df4:	f001 fb33 	bl	845e <printk>
    6df8:	481c      	ldr	r0, [pc, #112]	; (6e6c <z_impl_k_sem_take+0x100>)
    6dfa:	21ac      	movs	r1, #172	; 0xac
    6dfc:	f001 fa58 	bl	82b0 <assert_post_action>
	__asm__ volatile(
    6e00:	f385 8811 	msr	BASEPRI, r5
    6e04:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    6e08:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    6e0a:	b003      	add	sp, #12
    6e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    6e0e:	ea56 0307 	orrs.w	r3, r6, r7
    6e12:	d118      	bne.n	6e46 <z_impl_k_sem_take+0xda>
    6e14:	4814      	ldr	r0, [pc, #80]	; (6e68 <z_impl_k_sem_take+0xfc>)
    6e16:	f000 f99d 	bl	7154 <z_spin_unlock_valid>
    6e1a:	b968      	cbnz	r0, 6e38 <z_impl_k_sem_take+0xcc>
    6e1c:	4a13      	ldr	r2, [pc, #76]	; (6e6c <z_impl_k_sem_take+0x100>)
    6e1e:	4916      	ldr	r1, [pc, #88]	; (6e78 <z_impl_k_sem_take+0x10c>)
    6e20:	480f      	ldr	r0, [pc, #60]	; (6e60 <z_impl_k_sem_take+0xf4>)
    6e22:	23ac      	movs	r3, #172	; 0xac
    6e24:	f001 fb1b 	bl	845e <printk>
    6e28:	490f      	ldr	r1, [pc, #60]	; (6e68 <z_impl_k_sem_take+0xfc>)
    6e2a:	4814      	ldr	r0, [pc, #80]	; (6e7c <z_impl_k_sem_take+0x110>)
    6e2c:	f001 fb17 	bl	845e <printk>
    6e30:	480e      	ldr	r0, [pc, #56]	; (6e6c <z_impl_k_sem_take+0x100>)
    6e32:	21ac      	movs	r1, #172	; 0xac
    6e34:	f001 fa3c 	bl	82b0 <assert_post_action>
    6e38:	f385 8811 	msr	BASEPRI, r5
    6e3c:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    6e40:	f06f 000f 	mvn.w	r0, #15
    6e44:	e7e1      	b.n	6e0a <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    6e46:	e9cd 6700 	strd	r6, r7, [sp]
    6e4a:	4622      	mov	r2, r4
    6e4c:	4629      	mov	r1, r5
    6e4e:	4806      	ldr	r0, [pc, #24]	; (6e68 <z_impl_k_sem_take+0xfc>)
    6e50:	f7ff fa30 	bl	62b4 <z_pend_curr>
	return ret;
    6e54:	e7d9      	b.n	6e0a <z_impl_k_sem_take+0x9e>
    6e56:	bf00      	nop
    6e58:	0000a2c7 	.word	0x0000a2c7
    6e5c:	0000a2a7 	.word	0x0000a2a7
    6e60:	00009190 	.word	0x00009190
    6e64:	0000a02f 	.word	0x0000a02f
    6e68:	20000c74 	.word	0x20000c74
    6e6c:	00009623 	.word	0x00009623
    6e70:	00009675 	.word	0x00009675
    6e74:	0000968a 	.word	0x0000968a
    6e78:	00009649 	.word	0x00009649
    6e7c:	00009660 	.word	0x00009660

00006e80 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    6e80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    6e82:	4b09      	ldr	r3, [pc, #36]	; (6ea8 <k_sys_work_q_init+0x28>)
    6e84:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    6e86:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    6e88:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    6e8a:	9300      	str	r3, [sp, #0]
    6e8c:	4907      	ldr	r1, [pc, #28]	; (6eac <k_sys_work_q_init+0x2c>)
    6e8e:	4808      	ldr	r0, [pc, #32]	; (6eb0 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    6e90:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    6e94:	f04f 33ff 	mov.w	r3, #4294967295
    6e98:	f44f 6280 	mov.w	r2, #1024	; 0x400
    6e9c:	f000 ff88 	bl	7db0 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    6ea0:	4620      	mov	r0, r4
    6ea2:	b004      	add	sp, #16
    6ea4:	bd10      	pop	{r4, pc}
    6ea6:	bf00      	nop
    6ea8:	0000a314 	.word	0x0000a314
    6eac:	20002880 	.word	0x20002880
    6eb0:	200004f8 	.word	0x200004f8

00006eb4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    6eb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6eb8:	b085      	sub	sp, #20
    6eba:	4604      	mov	r4, r0
    6ebc:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    6ec0:	f1b8 0f0f 	cmp.w	r8, #15
{
    6ec4:	460f      	mov	r7, r1
    6ec6:	4615      	mov	r5, r2
    6ec8:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
    6eca:	d132      	bne.n	6f32 <z_setup_new_thread+0x7e>
    6ecc:	4b25      	ldr	r3, [pc, #148]	; (6f64 <z_setup_new_thread+0xb0>)
    6ece:	4599      	cmp	r9, r3
    6ed0:	d133      	bne.n	6f3a <z_setup_new_thread+0x86>
	sys_dlist_init(&w->waitq);
    6ed2:	f104 0358 	add.w	r3, r4, #88	; 0x58
	list->tail = (sys_dnode_t *)list;
    6ed6:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    6eda:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6edc:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    6ede:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
    6ee0:	2304      	movs	r3, #4
    6ee2:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    6ee4:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    6ee8:	f107 0320 	add.w	r3, r7, #32
	new_thread->stack_info.size = stack_buf_size;
    6eec:	e9c4 351a 	strd	r3, r5, [r4, #104]	; 0x68
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6ef0:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
    6ef2:	f884 800e 	strb.w	r8, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6ef6:	9302      	str	r3, [sp, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    6ef8:	f105 0820 	add.w	r8, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6efc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6efe:	9301      	str	r3, [sp, #4]
	thread_base->pended_on = NULL;
    6f00:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6f02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6f04:	9300      	str	r3, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
    6f06:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6f08:	464b      	mov	r3, r9
	node->prev = NULL;
    6f0a:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
    6f0e:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
    6f10:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
    6f12:	6726      	str	r6, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6f14:	4642      	mov	r2, r8
    6f16:	4639      	mov	r1, r7
    6f18:	4620      	mov	r0, r4
    6f1a:	f7fa ff87 	bl	1e2c <arch_new_thread>
	if (!_current) {
    6f1e:	4b12      	ldr	r3, [pc, #72]	; (6f68 <z_setup_new_thread+0xb4>)
	new_thread->init_data = NULL;
    6f20:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
    6f22:	689b      	ldr	r3, [r3, #8]
    6f24:	b103      	cbz	r3, 6f28 <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
    6f26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
    6f28:	6763      	str	r3, [r4, #116]	; 0x74
}
    6f2a:	4640      	mov	r0, r8
    6f2c:	b005      	add	sp, #20
    6f2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    6f32:	f108 0310 	add.w	r3, r8, #16
    6f36:	2b1e      	cmp	r3, #30
    6f38:	d9cb      	bls.n	6ed2 <z_setup_new_thread+0x1e>
    6f3a:	4a0c      	ldr	r2, [pc, #48]	; (6f6c <z_setup_new_thread+0xb8>)
    6f3c:	490c      	ldr	r1, [pc, #48]	; (6f70 <z_setup_new_thread+0xbc>)
    6f3e:	480d      	ldr	r0, [pc, #52]	; (6f74 <z_setup_new_thread+0xc0>)
    6f40:	f240 13ff 	movw	r3, #511	; 0x1ff
    6f44:	f001 fa8b 	bl	845e <printk>
    6f48:	4641      	mov	r1, r8
    6f4a:	480b      	ldr	r0, [pc, #44]	; (6f78 <z_setup_new_thread+0xc4>)
    6f4c:	f06f 030f 	mvn.w	r3, #15
    6f50:	220e      	movs	r2, #14
    6f52:	f001 fa84 	bl	845e <printk>
    6f56:	4805      	ldr	r0, [pc, #20]	; (6f6c <z_setup_new_thread+0xb8>)
    6f58:	f240 11ff 	movw	r1, #511	; 0x1ff
    6f5c:	f001 f9a8 	bl	82b0 <assert_post_action>
    6f60:	e7b7      	b.n	6ed2 <z_setup_new_thread+0x1e>
    6f62:	bf00      	nop
    6f64:	00004f61 	.word	0x00004f61
    6f68:	20000c34 	.word	0x20000c34
    6f6c:	0000a31d 	.word	0x0000a31d
    6f70:	0000a340 	.word	0x0000a340
    6f74:	00009190 	.word	0x00009190
    6f78:	0000a3c0 	.word	0x0000a3c0

00006f7c <z_impl_k_thread_create>:
{
    6f7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6f80:	b087      	sub	sp, #28
    6f82:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
    6f86:	4604      	mov	r4, r0
    6f88:	460d      	mov	r5, r1
    6f8a:	4690      	mov	r8, r2
    6f8c:	4699      	mov	r9, r3
    6f8e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    6f92:	b173      	cbz	r3, 6fb2 <z_impl_k_thread_create+0x36>
    6f94:	491b      	ldr	r1, [pc, #108]	; (7004 <z_impl_k_thread_create+0x88>)
    6f96:	4a1c      	ldr	r2, [pc, #112]	; (7008 <z_impl_k_thread_create+0x8c>)
    6f98:	481c      	ldr	r0, [pc, #112]	; (700c <z_impl_k_thread_create+0x90>)
    6f9a:	f44f 731a 	mov.w	r3, #616	; 0x268
    6f9e:	f001 fa5e 	bl	845e <printk>
    6fa2:	481b      	ldr	r0, [pc, #108]	; (7010 <z_impl_k_thread_create+0x94>)
    6fa4:	f001 fa5b 	bl	845e <printk>
    6fa8:	4817      	ldr	r0, [pc, #92]	; (7008 <z_impl_k_thread_create+0x8c>)
    6faa:	f44f 711a 	mov.w	r1, #616	; 0x268
    6fae:	f001 f97f 	bl	82b0 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    6fb2:	2300      	movs	r3, #0
    6fb4:	9305      	str	r3, [sp, #20]
    6fb6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6fb8:	9304      	str	r3, [sp, #16]
    6fba:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6fbc:	9303      	str	r3, [sp, #12]
    6fbe:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6fc0:	9302      	str	r3, [sp, #8]
    6fc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6fc4:	9301      	str	r3, [sp, #4]
    6fc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6fc8:	9300      	str	r3, [sp, #0]
    6fca:	4642      	mov	r2, r8
    6fcc:	464b      	mov	r3, r9
    6fce:	4629      	mov	r1, r5
    6fd0:	4620      	mov	r0, r4
    6fd2:	f7ff ff6f 	bl	6eb4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    6fd6:	1c7b      	adds	r3, r7, #1
    6fd8:	bf08      	it	eq
    6fda:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    6fde:	d005      	beq.n	6fec <z_impl_k_thread_create+0x70>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    6fe0:	ea56 0307 	orrs.w	r3, r6, r7
    6fe4:	d106      	bne.n	6ff4 <z_impl_k_thread_create+0x78>
	z_sched_start(thread);
    6fe6:	4620      	mov	r0, r4
    6fe8:	f7fe fffa 	bl	5fe0 <z_sched_start>
}
    6fec:	4620      	mov	r0, r4
    6fee:	b007      	add	sp, #28
    6ff0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    6ff4:	4907      	ldr	r1, [pc, #28]	; (7014 <z_impl_k_thread_create+0x98>)
    6ff6:	4632      	mov	r2, r6
    6ff8:	463b      	mov	r3, r7
    6ffa:	f104 0018 	add.w	r0, r4, #24
    6ffe:	f000 f911 	bl	7224 <z_add_timeout>
    7002:	e7f3      	b.n	6fec <z_impl_k_thread_create+0x70>
    7004:	00009fb6 	.word	0x00009fb6
    7008:	0000a31d 	.word	0x0000a31d
    700c:	00009190 	.word	0x00009190
    7010:	0000a3f1 	.word	0x0000a3f1
    7014:	00006089 	.word	0x00006089

00007018 <z_init_static_threads>:
{
    7018:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    701c:	4f3f      	ldr	r7, [pc, #252]	; (711c <z_init_static_threads+0x104>)
    701e:	4d40      	ldr	r5, [pc, #256]	; (7120 <z_init_static_threads+0x108>)
    7020:	f8df 810c 	ldr.w	r8, [pc, #268]	; 7130 <z_init_static_threads+0x118>
{
    7024:	b086      	sub	sp, #24
    7026:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
    7028:	42bd      	cmp	r5, r7
    702a:	d90e      	bls.n	704a <z_init_static_threads+0x32>
    702c:	493d      	ldr	r1, [pc, #244]	; (7124 <z_init_static_threads+0x10c>)
    702e:	483e      	ldr	r0, [pc, #248]	; (7128 <z_init_static_threads+0x110>)
    7030:	f240 23cf 	movw	r3, #719	; 0x2cf
    7034:	4642      	mov	r2, r8
    7036:	f001 fa12 	bl	845e <printk>
    703a:	483c      	ldr	r0, [pc, #240]	; (712c <z_init_static_threads+0x114>)
    703c:	f001 fa0f 	bl	845e <printk>
    7040:	f240 21cf 	movw	r1, #719	; 0x2cf
    7044:	4640      	mov	r0, r8
    7046:	f001 f933 	bl	82b0 <assert_post_action>
    704a:	42b5      	cmp	r5, r6
    704c:	f105 0430 	add.w	r4, r5, #48	; 0x30
    7050:	d31f      	bcc.n	7092 <z_init_static_threads+0x7a>
	k_sched_lock();
    7052:	f7fe fd21 	bl	5a98 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    7056:	4c32      	ldr	r4, [pc, #200]	; (7120 <z_init_static_threads+0x108>)
    7058:	4d35      	ldr	r5, [pc, #212]	; (7130 <z_init_static_threads+0x118>)
    705a:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 7124 <z_init_static_threads+0x10c>
    705e:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 7128 <z_init_static_threads+0x110>
    7062:	42b4      	cmp	r4, r6
    7064:	d90e      	bls.n	7084 <z_init_static_threads+0x6c>
    7066:	4641      	mov	r1, r8
    7068:	f240 23ee 	movw	r3, #750	; 0x2ee
    706c:	462a      	mov	r2, r5
    706e:	4648      	mov	r0, r9
    7070:	f001 f9f5 	bl	845e <printk>
    7074:	482d      	ldr	r0, [pc, #180]	; (712c <z_init_static_threads+0x114>)
    7076:	f001 f9f2 	bl	845e <printk>
    707a:	f240 21ee 	movw	r1, #750	; 0x2ee
    707e:	4628      	mov	r0, r5
    7080:	f001 f916 	bl	82b0 <assert_post_action>
    7084:	42b4      	cmp	r4, r6
    7086:	d321      	bcc.n	70cc <z_init_static_threads+0xb4>
}
    7088:	b006      	add	sp, #24
    708a:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	k_sched_unlock();
    708e:	f7ff ba47 	b.w	6520 <k_sched_unlock>
		z_setup_new_thread(
    7092:	f854 3c04 	ldr.w	r3, [r4, #-4]
    7096:	9305      	str	r3, [sp, #20]
    7098:	f854 3c10 	ldr.w	r3, [r4, #-16]
    709c:	9304      	str	r3, [sp, #16]
    709e:	f854 3c14 	ldr.w	r3, [r4, #-20]
    70a2:	9303      	str	r3, [sp, #12]
    70a4:	f854 3c18 	ldr.w	r3, [r4, #-24]
    70a8:	9302      	str	r3, [sp, #8]
    70aa:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    70ae:	9301      	str	r3, [sp, #4]
    70b0:	f854 3c20 	ldr.w	r3, [r4, #-32]
    70b4:	9300      	str	r3, [sp, #0]
    70b6:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    70ba:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    70be:	f7ff fef9 	bl	6eb4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    70c2:	f854 3c30 	ldr.w	r3, [r4, #-48]
    70c6:	655d      	str	r5, [r3, #84]	; 0x54
    70c8:	4625      	mov	r5, r4
    70ca:	e7ad      	b.n	7028 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    70cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
    70ce:	1c4b      	adds	r3, r1, #1
    70d0:	d014      	beq.n	70fc <z_init_static_threads+0xe4>
    70d2:	f240 32e7 	movw	r2, #999	; 0x3e7
    70d6:	2300      	movs	r3, #0
					    K_MSEC(thread_data->init_delay));
    70d8:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    70dc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    70e0:	4693      	mov	fp, r2
    70e2:	469c      	mov	ip, r3
    70e4:	fbc0 bc01 	smlal	fp, ip, r0, r1
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    70e8:	459c      	cmp	ip, r3
    70ea:	bf08      	it	eq
    70ec:	4593      	cmpeq	fp, r2
			schedule_new_thread(thread_data->init_thread,
    70ee:	6827      	ldr	r7, [r4, #0]
    70f0:	4658      	mov	r0, fp
    70f2:	4661      	mov	r1, ip
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    70f4:	d104      	bne.n	7100 <z_init_static_threads+0xe8>
	z_sched_start(thread);
    70f6:	4638      	mov	r0, r7
    70f8:	f7fe ff72 	bl	5fe0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    70fc:	3430      	adds	r4, #48	; 0x30
    70fe:	e7b0      	b.n	7062 <z_init_static_threads+0x4a>
    7100:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7104:	2300      	movs	r3, #0
    7106:	f7f8 fffb 	bl	100 <__aeabi_uldivmod>
    710a:	4602      	mov	r2, r0
    710c:	460b      	mov	r3, r1
    710e:	f107 0018 	add.w	r0, r7, #24
    7112:	4908      	ldr	r1, [pc, #32]	; (7134 <z_init_static_threads+0x11c>)
    7114:	f000 f886 	bl	7224 <z_add_timeout>
    7118:	e7f0      	b.n	70fc <z_init_static_threads+0xe4>
    711a:	bf00      	nop
    711c:	20000208 	.word	0x20000208
    7120:	20000208 	.word	0x20000208
    7124:	0000a416 	.word	0x0000a416
    7128:	00009190 	.word	0x00009190
    712c:	00009f75 	.word	0x00009f75
    7130:	0000a31d 	.word	0x0000a31d
    7134:	00006089 	.word	0x00006089

00007138 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    7138:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
    713a:	b138      	cbz	r0, 714c <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    713c:	4b04      	ldr	r3, [pc, #16]	; (7150 <z_spin_lock_valid+0x18>)
    713e:	7d1b      	ldrb	r3, [r3, #20]
    7140:	f000 0003 	and.w	r0, r0, #3
    7144:	1ac0      	subs	r0, r0, r3
    7146:	bf18      	it	ne
    7148:	2001      	movne	r0, #1
    714a:	4770      	bx	lr
			return false;
		}
	}
	return true;
    714c:	2001      	movs	r0, #1
}
    714e:	4770      	bx	lr
    7150:	20000c34 	.word	0x20000c34

00007154 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    7154:	4906      	ldr	r1, [pc, #24]	; (7170 <z_spin_unlock_valid+0x1c>)
{
    7156:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    7158:	688a      	ldr	r2, [r1, #8]
    715a:	7d08      	ldrb	r0, [r1, #20]
    715c:	6819      	ldr	r1, [r3, #0]
    715e:	4302      	orrs	r2, r0
    7160:	4291      	cmp	r1, r2
    7162:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
    7166:	bf04      	itt	eq
    7168:	6018      	streq	r0, [r3, #0]
	return true;
    716a:	2001      	moveq	r0, #1
}
    716c:	4770      	bx	lr
    716e:	bf00      	nop
    7170:	20000c34 	.word	0x20000c34

00007174 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    7174:	4a02      	ldr	r2, [pc, #8]	; (7180 <z_spin_lock_set_owner+0xc>)
    7176:	7d11      	ldrb	r1, [r2, #20]
    7178:	6893      	ldr	r3, [r2, #8]
    717a:	430b      	orrs	r3, r1
    717c:	6003      	str	r3, [r0, #0]
}
    717e:	4770      	bx	lr
    7180:	20000c34 	.word	0x20000c34

00007184 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    7184:	4b03      	ldr	r3, [pc, #12]	; (7194 <elapsed+0x10>)
    7186:	681b      	ldr	r3, [r3, #0]
    7188:	b90b      	cbnz	r3, 718e <elapsed+0xa>
    718a:	f7fc bd6b 	b.w	3c64 <sys_clock_elapsed>
}
    718e:	2000      	movs	r0, #0
    7190:	4770      	bx	lr
    7192:	bf00      	nop
    7194:	20000c78 	.word	0x20000c78

00007198 <next_timeout>:

static int32_t next_timeout(void)
{
    7198:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    719a:	4b13      	ldr	r3, [pc, #76]	; (71e8 <next_timeout+0x50>)
    719c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    719e:	429c      	cmp	r4, r3
    71a0:	bf08      	it	eq
    71a2:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    71a4:	f7ff ffee 	bl	7184 <elapsed>
    71a8:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    71aa:	b1bc      	cbz	r4, 71dc <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    71ac:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    71b0:	1b40      	subs	r0, r0, r5
    71b2:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    71b6:	2801      	cmp	r0, #1
    71b8:	f171 0300 	sbcs.w	r3, r1, #0
    71bc:	db11      	blt.n	71e2 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    71be:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    71c2:	2300      	movs	r3, #0
    71c4:	4282      	cmp	r2, r0
    71c6:	eb73 0401 	sbcs.w	r4, r3, r1
    71ca:	da00      	bge.n	71ce <next_timeout+0x36>
    71cc:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    71ce:	4b07      	ldr	r3, [pc, #28]	; (71ec <next_timeout+0x54>)
    71d0:	691b      	ldr	r3, [r3, #16]
    71d2:	b113      	cbz	r3, 71da <next_timeout+0x42>
    71d4:	4298      	cmp	r0, r3
    71d6:	bfa8      	it	ge
    71d8:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    71da:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    71dc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    71e0:	e7f5      	b.n	71ce <next_timeout+0x36>
    71e2:	2000      	movs	r0, #0
    71e4:	e7f3      	b.n	71ce <next_timeout+0x36>
    71e6:	bf00      	nop
    71e8:	20000184 	.word	0x20000184
    71ec:	20000c34 	.word	0x20000c34

000071f0 <remove_timeout>:
{
    71f0:	b530      	push	{r4, r5, lr}
    71f2:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    71f4:	b168      	cbz	r0, 7212 <remove_timeout+0x22>
    71f6:	4a0a      	ldr	r2, [pc, #40]	; (7220 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    71f8:	6852      	ldr	r2, [r2, #4]
    71fa:	4290      	cmp	r0, r2
    71fc:	d009      	beq.n	7212 <remove_timeout+0x22>
	if (next(t) != NULL) {
    71fe:	b143      	cbz	r3, 7212 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    7200:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    7204:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    7208:	1912      	adds	r2, r2, r4
    720a:	eb45 0101 	adc.w	r1, r5, r1
    720e:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
    7212:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
    7214:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    7216:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    7218:	2300      	movs	r3, #0
	node->prev = NULL;
    721a:	e9c0 3300 	strd	r3, r3, [r0]
}
    721e:	bd30      	pop	{r4, r5, pc}
    7220:	20000184 	.word	0x20000184

00007224 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    7224:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7228:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    722a:	1c6b      	adds	r3, r5, #1
    722c:	bf08      	it	eq
    722e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    7232:	4682      	mov	sl, r0
    7234:	468b      	mov	fp, r1
    7236:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7238:	f000 80aa 	beq.w	7390 <z_add_timeout+0x16c>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    723c:	6803      	ldr	r3, [r0, #0]
    723e:	b163      	cbz	r3, 725a <z_add_timeout+0x36>
    7240:	4955      	ldr	r1, [pc, #340]	; (7398 <z_add_timeout+0x174>)
    7242:	4a56      	ldr	r2, [pc, #344]	; (739c <z_add_timeout+0x178>)
    7244:	4856      	ldr	r0, [pc, #344]	; (73a0 <z_add_timeout+0x17c>)
    7246:	235d      	movs	r3, #93	; 0x5d
    7248:	f001 f909 	bl	845e <printk>
    724c:	4855      	ldr	r0, [pc, #340]	; (73a4 <z_add_timeout+0x180>)
    724e:	f001 f906 	bl	845e <printk>
    7252:	4852      	ldr	r0, [pc, #328]	; (739c <z_add_timeout+0x178>)
    7254:	215d      	movs	r1, #93	; 0x5d
    7256:	f001 f82b 	bl	82b0 <assert_post_action>
	to->fn = fn;
    725a:	f8ca b008 	str.w	fp, [sl, #8]
	__asm__ volatile(
    725e:	f04f 0320 	mov.w	r3, #32
    7262:	f3ef 8b11 	mrs	fp, BASEPRI
    7266:	f383 8812 	msr	BASEPRI_MAX, r3
    726a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    726e:	484e      	ldr	r0, [pc, #312]	; (73a8 <z_add_timeout+0x184>)
    7270:	f7ff ff62 	bl	7138 <z_spin_lock_valid>
    7274:	b968      	cbnz	r0, 7292 <z_add_timeout+0x6e>
    7276:	4a4d      	ldr	r2, [pc, #308]	; (73ac <z_add_timeout+0x188>)
    7278:	494d      	ldr	r1, [pc, #308]	; (73b0 <z_add_timeout+0x18c>)
    727a:	4849      	ldr	r0, [pc, #292]	; (73a0 <z_add_timeout+0x17c>)
    727c:	2381      	movs	r3, #129	; 0x81
    727e:	f001 f8ee 	bl	845e <printk>
    7282:	4949      	ldr	r1, [pc, #292]	; (73a8 <z_add_timeout+0x184>)
    7284:	484b      	ldr	r0, [pc, #300]	; (73b4 <z_add_timeout+0x190>)
    7286:	f001 f8ea 	bl	845e <printk>
    728a:	4848      	ldr	r0, [pc, #288]	; (73ac <z_add_timeout+0x188>)
    728c:	2181      	movs	r1, #129	; 0x81
    728e:	f001 f80f 	bl	82b0 <assert_post_action>
	z_spin_lock_set_owner(l);
    7292:	4845      	ldr	r0, [pc, #276]	; (73a8 <z_add_timeout+0x184>)
    7294:	f7ff ff6e 	bl	7174 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    7298:	f06f 0301 	mvn.w	r3, #1
    729c:	ebb3 0804 	subs.w	r8, r3, r4
    72a0:	f04f 32ff 	mov.w	r2, #4294967295
    72a4:	eb62 0905 	sbc.w	r9, r2, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    72a8:	f1b8 0f00 	cmp.w	r8, #0
    72ac:	f179 0100 	sbcs.w	r1, r9, #0
    72b0:	db1c      	blt.n	72ec <z_add_timeout+0xc8>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    72b2:	4841      	ldr	r0, [pc, #260]	; (73b8 <z_add_timeout+0x194>)
    72b4:	e9d0 1000 	ldrd	r1, r0, [r0]
    72b8:	1a5b      	subs	r3, r3, r1
    72ba:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
    72be:	1b1e      	subs	r6, r3, r4
    72c0:	eb62 0705 	sbc.w	r7, r2, r5
    72c4:	2e01      	cmp	r6, #1
    72c6:	f177 0300 	sbcs.w	r3, r7, #0
    72ca:	bfbc      	itt	lt
    72cc:	2601      	movlt	r6, #1
    72ce:	2700      	movlt	r7, #0
    72d0:	e9ca 6704 	strd	r6, r7, [sl, #16]
	return list->head == list;
    72d4:	4a39      	ldr	r2, [pc, #228]	; (73bc <z_add_timeout+0x198>)
    72d6:	e9d2 3600 	ldrd	r3, r6, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    72da:	4293      	cmp	r3, r2
    72dc:	d11d      	bne.n	731a <z_add_timeout+0xf6>
	node->prev = tail;
    72de:	e9ca 2600 	strd	r2, r6, [sl]
	tail->next = node;
    72e2:	f8c6 a000 	str.w	sl, [r6]
	list->tail = node;
    72e6:	f8c2 a004 	str.w	sl, [r2, #4]
}
    72ea:	e02c      	b.n	7346 <z_add_timeout+0x122>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    72ec:	f7ff ff4a 	bl	7184 <elapsed>
    72f0:	1c63      	adds	r3, r4, #1
    72f2:	9300      	str	r3, [sp, #0]
    72f4:	f145 0300 	adc.w	r3, r5, #0
    72f8:	9301      	str	r3, [sp, #4]
    72fa:	e9dd 2300 	ldrd	r2, r3, [sp]
    72fe:	1812      	adds	r2, r2, r0
    7300:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
    7304:	e9ca 2304 	strd	r2, r3, [sl, #16]
    7308:	e7e4      	b.n	72d4 <z_add_timeout+0xb0>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    730a:	1be0      	subs	r0, r4, r7
    730c:	eb65 0108 	sbc.w	r1, r5, r8
	return (node == list->tail) ? NULL : node->next;
    7310:	42b3      	cmp	r3, r6
    7312:	e9ca 0104 	strd	r0, r1, [sl, #16]
    7316:	d0e2      	beq.n	72de <z_add_timeout+0xba>
    7318:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    731a:	2b00      	cmp	r3, #0
    731c:	d0df      	beq.n	72de <z_add_timeout+0xba>
			if (t->dticks > to->dticks) {
    731e:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
    7322:	e9da 4504 	ldrd	r4, r5, [sl, #16]
    7326:	42bc      	cmp	r4, r7
    7328:	eb75 0108 	sbcs.w	r1, r5, r8
    732c:	daed      	bge.n	730a <z_add_timeout+0xe6>
				t->dticks -= to->dticks;
    732e:	1b38      	subs	r0, r7, r4
    7330:	eb68 0105 	sbc.w	r1, r8, r5
    7334:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    7338:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    733a:	e9ca 3100 	strd	r3, r1, [sl]
	prev->next = node;
    733e:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    7342:	f8c3 a004 	str.w	sl, [r3, #4]
	return list->head == list;
    7346:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7348:	4293      	cmp	r3, r2
    734a:	d00b      	beq.n	7364 <z_add_timeout+0x140>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    734c:	459a      	cmp	sl, r3
    734e:	d109      	bne.n	7364 <z_add_timeout+0x140>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    7350:	f7ff ff22 	bl	7198 <next_timeout>

			if (next_time == 0 ||
    7354:	b118      	cbz	r0, 735e <z_add_timeout+0x13a>
			    _current_cpu->slice_ticks != next_time) {
    7356:	4b1a      	ldr	r3, [pc, #104]	; (73c0 <z_add_timeout+0x19c>)
			if (next_time == 0 ||
    7358:	691b      	ldr	r3, [r3, #16]
    735a:	4283      	cmp	r3, r0
    735c:	d002      	beq.n	7364 <z_add_timeout+0x140>
				sys_clock_set_timeout(next_time, false);
    735e:	2100      	movs	r1, #0
    7360:	f7fc fc50 	bl	3c04 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7364:	4810      	ldr	r0, [pc, #64]	; (73a8 <z_add_timeout+0x184>)
    7366:	f7ff fef5 	bl	7154 <z_spin_unlock_valid>
    736a:	b968      	cbnz	r0, 7388 <z_add_timeout+0x164>
    736c:	4a0f      	ldr	r2, [pc, #60]	; (73ac <z_add_timeout+0x188>)
    736e:	4915      	ldr	r1, [pc, #84]	; (73c4 <z_add_timeout+0x1a0>)
    7370:	480b      	ldr	r0, [pc, #44]	; (73a0 <z_add_timeout+0x17c>)
    7372:	23ac      	movs	r3, #172	; 0xac
    7374:	f001 f873 	bl	845e <printk>
    7378:	490b      	ldr	r1, [pc, #44]	; (73a8 <z_add_timeout+0x184>)
    737a:	4813      	ldr	r0, [pc, #76]	; (73c8 <z_add_timeout+0x1a4>)
    737c:	f001 f86f 	bl	845e <printk>
    7380:	480a      	ldr	r0, [pc, #40]	; (73ac <z_add_timeout+0x188>)
    7382:	21ac      	movs	r1, #172	; 0xac
    7384:	f000 ff94 	bl	82b0 <assert_post_action>
	__asm__ volatile(
    7388:	f38b 8811 	msr	BASEPRI, fp
    738c:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    7390:	b003      	add	sp, #12
    7392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7396:	bf00      	nop
    7398:	0000a467 	.word	0x0000a467
    739c:	0000a443 	.word	0x0000a443
    73a0:	00009190 	.word	0x00009190
    73a4:	0000a02f 	.word	0x0000a02f
    73a8:	20000c7c 	.word	0x20000c7c
    73ac:	00009623 	.word	0x00009623
    73b0:	00009675 	.word	0x00009675
    73b4:	0000968a 	.word	0x0000968a
    73b8:	20000598 	.word	0x20000598
    73bc:	20000184 	.word	0x20000184
    73c0:	20000c34 	.word	0x20000c34
    73c4:	00009649 	.word	0x00009649
    73c8:	00009660 	.word	0x00009660

000073cc <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    73cc:	b538      	push	{r3, r4, r5, lr}
    73ce:	4604      	mov	r4, r0
	__asm__ volatile(
    73d0:	f04f 0320 	mov.w	r3, #32
    73d4:	f3ef 8511 	mrs	r5, BASEPRI
    73d8:	f383 8812 	msr	BASEPRI_MAX, r3
    73dc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    73e0:	481a      	ldr	r0, [pc, #104]	; (744c <z_abort_timeout+0x80>)
    73e2:	f7ff fea9 	bl	7138 <z_spin_lock_valid>
    73e6:	b968      	cbnz	r0, 7404 <z_abort_timeout+0x38>
    73e8:	4a19      	ldr	r2, [pc, #100]	; (7450 <z_abort_timeout+0x84>)
    73ea:	491a      	ldr	r1, [pc, #104]	; (7454 <z_abort_timeout+0x88>)
    73ec:	481a      	ldr	r0, [pc, #104]	; (7458 <z_abort_timeout+0x8c>)
    73ee:	2381      	movs	r3, #129	; 0x81
    73f0:	f001 f835 	bl	845e <printk>
    73f4:	4915      	ldr	r1, [pc, #84]	; (744c <z_abort_timeout+0x80>)
    73f6:	4819      	ldr	r0, [pc, #100]	; (745c <z_abort_timeout+0x90>)
    73f8:	f001 f831 	bl	845e <printk>
    73fc:	4814      	ldr	r0, [pc, #80]	; (7450 <z_abort_timeout+0x84>)
    73fe:	2181      	movs	r1, #129	; 0x81
    7400:	f000 ff56 	bl	82b0 <assert_post_action>
	z_spin_lock_set_owner(l);
    7404:	4811      	ldr	r0, [pc, #68]	; (744c <z_abort_timeout+0x80>)
    7406:	f7ff feb5 	bl	7174 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    740a:	6823      	ldr	r3, [r4, #0]
    740c:	b1db      	cbz	r3, 7446 <z_abort_timeout+0x7a>
			remove_timeout(to);
    740e:	4620      	mov	r0, r4
    7410:	f7ff feee 	bl	71f0 <remove_timeout>
			ret = 0;
    7414:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7416:	480d      	ldr	r0, [pc, #52]	; (744c <z_abort_timeout+0x80>)
    7418:	f7ff fe9c 	bl	7154 <z_spin_unlock_valid>
    741c:	b968      	cbnz	r0, 743a <z_abort_timeout+0x6e>
    741e:	4a0c      	ldr	r2, [pc, #48]	; (7450 <z_abort_timeout+0x84>)
    7420:	490f      	ldr	r1, [pc, #60]	; (7460 <z_abort_timeout+0x94>)
    7422:	480d      	ldr	r0, [pc, #52]	; (7458 <z_abort_timeout+0x8c>)
    7424:	23ac      	movs	r3, #172	; 0xac
    7426:	f001 f81a 	bl	845e <printk>
    742a:	4908      	ldr	r1, [pc, #32]	; (744c <z_abort_timeout+0x80>)
    742c:	480d      	ldr	r0, [pc, #52]	; (7464 <z_abort_timeout+0x98>)
    742e:	f001 f816 	bl	845e <printk>
    7432:	4807      	ldr	r0, [pc, #28]	; (7450 <z_abort_timeout+0x84>)
    7434:	21ac      	movs	r1, #172	; 0xac
    7436:	f000 ff3b 	bl	82b0 <assert_post_action>
	__asm__ volatile(
    743a:	f385 8811 	msr	BASEPRI, r5
    743e:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    7442:	4620      	mov	r0, r4
    7444:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
    7446:	f06f 0415 	mvn.w	r4, #21
    744a:	e7e4      	b.n	7416 <z_abort_timeout+0x4a>
    744c:	20000c7c 	.word	0x20000c7c
    7450:	00009623 	.word	0x00009623
    7454:	00009675 	.word	0x00009675
    7458:	00009190 	.word	0x00009190
    745c:	0000968a 	.word	0x0000968a
    7460:	00009649 	.word	0x00009649
    7464:	00009660 	.word	0x00009660

00007468 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    7468:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    746a:	f04f 0320 	mov.w	r3, #32
    746e:	f3ef 8511 	mrs	r5, BASEPRI
    7472:	f383 8812 	msr	BASEPRI_MAX, r3
    7476:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    747a:	4818      	ldr	r0, [pc, #96]	; (74dc <z_get_next_timeout_expiry+0x74>)
    747c:	f7ff fe5c 	bl	7138 <z_spin_lock_valid>
    7480:	b968      	cbnz	r0, 749e <z_get_next_timeout_expiry+0x36>
    7482:	4a17      	ldr	r2, [pc, #92]	; (74e0 <z_get_next_timeout_expiry+0x78>)
    7484:	4917      	ldr	r1, [pc, #92]	; (74e4 <z_get_next_timeout_expiry+0x7c>)
    7486:	4818      	ldr	r0, [pc, #96]	; (74e8 <z_get_next_timeout_expiry+0x80>)
    7488:	2381      	movs	r3, #129	; 0x81
    748a:	f000 ffe8 	bl	845e <printk>
    748e:	4913      	ldr	r1, [pc, #76]	; (74dc <z_get_next_timeout_expiry+0x74>)
    7490:	4816      	ldr	r0, [pc, #88]	; (74ec <z_get_next_timeout_expiry+0x84>)
    7492:	f000 ffe4 	bl	845e <printk>
    7496:	4812      	ldr	r0, [pc, #72]	; (74e0 <z_get_next_timeout_expiry+0x78>)
    7498:	2181      	movs	r1, #129	; 0x81
    749a:	f000 ff09 	bl	82b0 <assert_post_action>
	z_spin_lock_set_owner(l);
    749e:	480f      	ldr	r0, [pc, #60]	; (74dc <z_get_next_timeout_expiry+0x74>)
    74a0:	f7ff fe68 	bl	7174 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    74a4:	f7ff fe78 	bl	7198 <next_timeout>
    74a8:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    74aa:	480c      	ldr	r0, [pc, #48]	; (74dc <z_get_next_timeout_expiry+0x74>)
    74ac:	f7ff fe52 	bl	7154 <z_spin_unlock_valid>
    74b0:	b968      	cbnz	r0, 74ce <z_get_next_timeout_expiry+0x66>
    74b2:	4a0b      	ldr	r2, [pc, #44]	; (74e0 <z_get_next_timeout_expiry+0x78>)
    74b4:	490e      	ldr	r1, [pc, #56]	; (74f0 <z_get_next_timeout_expiry+0x88>)
    74b6:	480c      	ldr	r0, [pc, #48]	; (74e8 <z_get_next_timeout_expiry+0x80>)
    74b8:	23ac      	movs	r3, #172	; 0xac
    74ba:	f000 ffd0 	bl	845e <printk>
    74be:	4907      	ldr	r1, [pc, #28]	; (74dc <z_get_next_timeout_expiry+0x74>)
    74c0:	480c      	ldr	r0, [pc, #48]	; (74f4 <z_get_next_timeout_expiry+0x8c>)
    74c2:	f000 ffcc 	bl	845e <printk>
    74c6:	4806      	ldr	r0, [pc, #24]	; (74e0 <z_get_next_timeout_expiry+0x78>)
    74c8:	21ac      	movs	r1, #172	; 0xac
    74ca:	f000 fef1 	bl	82b0 <assert_post_action>
	__asm__ volatile(
    74ce:	f385 8811 	msr	BASEPRI, r5
    74d2:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
    74d6:	4620      	mov	r0, r4
    74d8:	bd38      	pop	{r3, r4, r5, pc}
    74da:	bf00      	nop
    74dc:	20000c7c 	.word	0x20000c7c
    74e0:	00009623 	.word	0x00009623
    74e4:	00009675 	.word	0x00009675
    74e8:	00009190 	.word	0x00009190
    74ec:	0000968a 	.word	0x0000968a
    74f0:	00009649 	.word	0x00009649
    74f4:	00009660 	.word	0x00009660

000074f8 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    74f8:	b570      	push	{r4, r5, r6, lr}
    74fa:	4604      	mov	r4, r0
    74fc:	460d      	mov	r5, r1
	__asm__ volatile(
    74fe:	f04f 0320 	mov.w	r3, #32
    7502:	f3ef 8611 	mrs	r6, BASEPRI
    7506:	f383 8812 	msr	BASEPRI_MAX, r3
    750a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    750e:	481b      	ldr	r0, [pc, #108]	; (757c <z_set_timeout_expiry+0x84>)
    7510:	f7ff fe12 	bl	7138 <z_spin_lock_valid>
    7514:	b968      	cbnz	r0, 7532 <z_set_timeout_expiry+0x3a>
    7516:	4a1a      	ldr	r2, [pc, #104]	; (7580 <z_set_timeout_expiry+0x88>)
    7518:	491a      	ldr	r1, [pc, #104]	; (7584 <z_set_timeout_expiry+0x8c>)
    751a:	481b      	ldr	r0, [pc, #108]	; (7588 <z_set_timeout_expiry+0x90>)
    751c:	2381      	movs	r3, #129	; 0x81
    751e:	f000 ff9e 	bl	845e <printk>
    7522:	4916      	ldr	r1, [pc, #88]	; (757c <z_set_timeout_expiry+0x84>)
    7524:	4819      	ldr	r0, [pc, #100]	; (758c <z_set_timeout_expiry+0x94>)
    7526:	f000 ff9a 	bl	845e <printk>
    752a:	4815      	ldr	r0, [pc, #84]	; (7580 <z_set_timeout_expiry+0x88>)
    752c:	2181      	movs	r1, #129	; 0x81
    752e:	f000 febf 	bl	82b0 <assert_post_action>
	z_spin_lock_set_owner(l);
    7532:	4812      	ldr	r0, [pc, #72]	; (757c <z_set_timeout_expiry+0x84>)
    7534:	f7ff fe1e 	bl	7174 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    7538:	f7ff fe2e 	bl	7198 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    753c:	2801      	cmp	r0, #1
    753e:	dd05      	ble.n	754c <z_set_timeout_expiry+0x54>
    7540:	42a0      	cmp	r0, r4
    7542:	db03      	blt.n	754c <z_set_timeout_expiry+0x54>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    7544:	4629      	mov	r1, r5
    7546:	4620      	mov	r0, r4
    7548:	f7fc fb5c 	bl	3c04 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    754c:	480b      	ldr	r0, [pc, #44]	; (757c <z_set_timeout_expiry+0x84>)
    754e:	f7ff fe01 	bl	7154 <z_spin_unlock_valid>
    7552:	b968      	cbnz	r0, 7570 <z_set_timeout_expiry+0x78>
    7554:	4a0a      	ldr	r2, [pc, #40]	; (7580 <z_set_timeout_expiry+0x88>)
    7556:	490e      	ldr	r1, [pc, #56]	; (7590 <z_set_timeout_expiry+0x98>)
    7558:	480b      	ldr	r0, [pc, #44]	; (7588 <z_set_timeout_expiry+0x90>)
    755a:	23ac      	movs	r3, #172	; 0xac
    755c:	f000 ff7f 	bl	845e <printk>
    7560:	4906      	ldr	r1, [pc, #24]	; (757c <z_set_timeout_expiry+0x84>)
    7562:	480c      	ldr	r0, [pc, #48]	; (7594 <z_set_timeout_expiry+0x9c>)
    7564:	f000 ff7b 	bl	845e <printk>
    7568:	4805      	ldr	r0, [pc, #20]	; (7580 <z_set_timeout_expiry+0x88>)
    756a:	21ac      	movs	r1, #172	; 0xac
    756c:	f000 fea0 	bl	82b0 <assert_post_action>
	__asm__ volatile(
    7570:	f386 8811 	msr	BASEPRI, r6
    7574:	f3bf 8f6f 	isb	sy
		}
	}
}
    7578:	bd70      	pop	{r4, r5, r6, pc}
    757a:	bf00      	nop
    757c:	20000c7c 	.word	0x20000c7c
    7580:	00009623 	.word	0x00009623
    7584:	00009675 	.word	0x00009675
    7588:	00009190 	.word	0x00009190
    758c:	0000968a 	.word	0x0000968a
    7590:	00009649 	.word	0x00009649
    7594:	00009660 	.word	0x00009660

00007598 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    7598:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    759c:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    759e:	f7fe fc0d 	bl	5dbc <z_time_slice>
	__asm__ volatile(
    75a2:	f04f 0320 	mov.w	r3, #32
    75a6:	f3ef 8711 	mrs	r7, BASEPRI
    75aa:	f383 8812 	msr	BASEPRI_MAX, r3
    75ae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    75b2:	4855      	ldr	r0, [pc, #340]	; (7708 <sys_clock_announce+0x170>)
    75b4:	f7ff fdc0 	bl	7138 <z_spin_lock_valid>
    75b8:	b968      	cbnz	r0, 75d6 <sys_clock_announce+0x3e>
    75ba:	4a54      	ldr	r2, [pc, #336]	; (770c <sys_clock_announce+0x174>)
    75bc:	4954      	ldr	r1, [pc, #336]	; (7710 <sys_clock_announce+0x178>)
    75be:	4855      	ldr	r0, [pc, #340]	; (7714 <sys_clock_announce+0x17c>)
    75c0:	2381      	movs	r3, #129	; 0x81
    75c2:	f000 ff4c 	bl	845e <printk>
    75c6:	4950      	ldr	r1, [pc, #320]	; (7708 <sys_clock_announce+0x170>)
    75c8:	4853      	ldr	r0, [pc, #332]	; (7718 <sys_clock_announce+0x180>)
    75ca:	f000 ff48 	bl	845e <printk>
    75ce:	484f      	ldr	r0, [pc, #316]	; (770c <sys_clock_announce+0x174>)
    75d0:	2181      	movs	r1, #129	; 0x81
    75d2:	f000 fe6d 	bl	82b0 <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    75d6:	4d51      	ldr	r5, [pc, #324]	; (771c <sys_clock_announce+0x184>)
    75d8:	4e51      	ldr	r6, [pc, #324]	; (7720 <sys_clock_announce+0x188>)
	z_spin_lock_set_owner(l);
    75da:	484b      	ldr	r0, [pc, #300]	; (7708 <sys_clock_announce+0x170>)
	return list->head == list;
    75dc:	f8df a14c 	ldr.w	sl, [pc, #332]	; 772c <sys_clock_announce+0x194>
    75e0:	f7ff fdc8 	bl	7174 <z_spin_lock_set_owner>
    75e4:	46b3      	mov	fp, r6
    75e6:	602c      	str	r4, [r5, #0]
    75e8:	e9d6 2300 	ldrd	r2, r3, [r6]
    75ec:	f8d5 c000 	ldr.w	ip, [r5]
    75f0:	f8da 4000 	ldr.w	r4, [sl]
    75f4:	e9cd 2300 	strd	r2, r3, [sp]
    75f8:	4662      	mov	r2, ip
    75fa:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    75fc:	4554      	cmp	r4, sl
    75fe:	46e0      	mov	r8, ip
    7600:	4699      	mov	r9, r3
    7602:	d00c      	beq.n	761e <sys_clock_announce+0x86>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    7604:	b15c      	cbz	r4, 761e <sys_clock_announce+0x86>
    7606:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    760a:	458c      	cmp	ip, r1
    760c:	eb79 0302 	sbcs.w	r3, r9, r2
    7610:	da2e      	bge.n	7670 <sys_clock_announce+0xd8>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    7612:	ebb1 000c 	subs.w	r0, r1, ip
    7616:	eb62 0109 	sbc.w	r1, r2, r9
    761a:	e9c4 0104 	strd	r0, r1, [r4, #16]
	}

	curr_tick += announce_remaining;
    761e:	9a00      	ldr	r2, [sp, #0]
    7620:	9901      	ldr	r1, [sp, #4]
    7622:	eb18 0202 	adds.w	r2, r8, r2
    7626:	464b      	mov	r3, r9
    7628:	eb43 0101 	adc.w	r1, r3, r1
	announce_remaining = 0;
    762c:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    762e:	e9cb 2100 	strd	r2, r1, [fp]
	announce_remaining = 0;
    7632:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
    7634:	f7ff fdb0 	bl	7198 <next_timeout>
    7638:	4621      	mov	r1, r4
    763a:	f7fc fae3 	bl	3c04 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    763e:	4832      	ldr	r0, [pc, #200]	; (7708 <sys_clock_announce+0x170>)
    7640:	f7ff fd88 	bl	7154 <z_spin_unlock_valid>
    7644:	b968      	cbnz	r0, 7662 <sys_clock_announce+0xca>
    7646:	4a31      	ldr	r2, [pc, #196]	; (770c <sys_clock_announce+0x174>)
    7648:	4936      	ldr	r1, [pc, #216]	; (7724 <sys_clock_announce+0x18c>)
    764a:	4832      	ldr	r0, [pc, #200]	; (7714 <sys_clock_announce+0x17c>)
    764c:	23ac      	movs	r3, #172	; 0xac
    764e:	f000 ff06 	bl	845e <printk>
    7652:	492d      	ldr	r1, [pc, #180]	; (7708 <sys_clock_announce+0x170>)
    7654:	4834      	ldr	r0, [pc, #208]	; (7728 <sys_clock_announce+0x190>)
    7656:	f000 ff02 	bl	845e <printk>
    765a:	482c      	ldr	r0, [pc, #176]	; (770c <sys_clock_announce+0x174>)
    765c:	21ac      	movs	r1, #172	; 0xac
    765e:	f000 fe27 	bl	82b0 <assert_post_action>
	__asm__ volatile(
    7662:	f387 8811 	msr	BASEPRI, r7
    7666:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    766a:	b003      	add	sp, #12
    766c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
    7670:	e9dd 8900 	ldrd	r8, r9, [sp]
		announce_remaining -= dt;
    7674:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
    7678:	eb18 0801 	adds.w	r8, r8, r1
		t->dticks = 0;
    767c:	f04f 0200 	mov.w	r2, #0
    7680:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
    7684:	eb49 79e1 	adc.w	r9, r9, r1, asr #31
		announce_remaining -= dt;
    7688:	6028      	str	r0, [r5, #0]
		t->dticks = 0;
    768a:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    768e:	4620      	mov	r0, r4
		curr_tick += dt;
    7690:	e9c6 8900 	strd	r8, r9, [r6]
		remove_timeout(t);
    7694:	f7ff fdac 	bl	71f0 <remove_timeout>
    7698:	481b      	ldr	r0, [pc, #108]	; (7708 <sys_clock_announce+0x170>)
    769a:	f7ff fd5b 	bl	7154 <z_spin_unlock_valid>
    769e:	b968      	cbnz	r0, 76bc <sys_clock_announce+0x124>
    76a0:	4a1a      	ldr	r2, [pc, #104]	; (770c <sys_clock_announce+0x174>)
    76a2:	4920      	ldr	r1, [pc, #128]	; (7724 <sys_clock_announce+0x18c>)
    76a4:	481b      	ldr	r0, [pc, #108]	; (7714 <sys_clock_announce+0x17c>)
    76a6:	23ac      	movs	r3, #172	; 0xac
    76a8:	f000 fed9 	bl	845e <printk>
    76ac:	4916      	ldr	r1, [pc, #88]	; (7708 <sys_clock_announce+0x170>)
    76ae:	481e      	ldr	r0, [pc, #120]	; (7728 <sys_clock_announce+0x190>)
    76b0:	f000 fed5 	bl	845e <printk>
    76b4:	4815      	ldr	r0, [pc, #84]	; (770c <sys_clock_announce+0x174>)
    76b6:	21ac      	movs	r1, #172	; 0xac
    76b8:	f000 fdfa 	bl	82b0 <assert_post_action>
    76bc:	f387 8811 	msr	BASEPRI, r7
    76c0:	f3bf 8f6f 	isb	sy
		t->fn(t);
    76c4:	68a3      	ldr	r3, [r4, #8]
    76c6:	4620      	mov	r0, r4
    76c8:	4798      	blx	r3
	__asm__ volatile(
    76ca:	f04f 0320 	mov.w	r3, #32
    76ce:	f3ef 8711 	mrs	r7, BASEPRI
    76d2:	f383 8812 	msr	BASEPRI_MAX, r3
    76d6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    76da:	480b      	ldr	r0, [pc, #44]	; (7708 <sys_clock_announce+0x170>)
    76dc:	f7ff fd2c 	bl	7138 <z_spin_lock_valid>
    76e0:	b968      	cbnz	r0, 76fe <sys_clock_announce+0x166>
    76e2:	4a0a      	ldr	r2, [pc, #40]	; (770c <sys_clock_announce+0x174>)
    76e4:	490a      	ldr	r1, [pc, #40]	; (7710 <sys_clock_announce+0x178>)
    76e6:	480b      	ldr	r0, [pc, #44]	; (7714 <sys_clock_announce+0x17c>)
    76e8:	2381      	movs	r3, #129	; 0x81
    76ea:	f000 feb8 	bl	845e <printk>
    76ee:	4906      	ldr	r1, [pc, #24]	; (7708 <sys_clock_announce+0x170>)
    76f0:	4809      	ldr	r0, [pc, #36]	; (7718 <sys_clock_announce+0x180>)
    76f2:	f000 feb4 	bl	845e <printk>
    76f6:	4805      	ldr	r0, [pc, #20]	; (770c <sys_clock_announce+0x174>)
    76f8:	2181      	movs	r1, #129	; 0x81
    76fa:	f000 fdd9 	bl	82b0 <assert_post_action>
	z_spin_lock_set_owner(l);
    76fe:	4802      	ldr	r0, [pc, #8]	; (7708 <sys_clock_announce+0x170>)
    7700:	f7ff fd38 	bl	7174 <z_spin_lock_set_owner>
	return k;
    7704:	e770      	b.n	75e8 <sys_clock_announce+0x50>
    7706:	bf00      	nop
    7708:	20000c7c 	.word	0x20000c7c
    770c:	00009623 	.word	0x00009623
    7710:	00009675 	.word	0x00009675
    7714:	00009190 	.word	0x00009190
    7718:	0000968a 	.word	0x0000968a
    771c:	20000c78 	.word	0x20000c78
    7720:	20000598 	.word	0x20000598
    7724:	00009649 	.word	0x00009649
    7728:	00009660 	.word	0x00009660
    772c:	20000184 	.word	0x20000184

00007730 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    7730:	b570      	push	{r4, r5, r6, lr}
    7732:	f04f 0320 	mov.w	r3, #32
    7736:	f3ef 8611 	mrs	r6, BASEPRI
    773a:	f383 8812 	msr	BASEPRI_MAX, r3
    773e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7742:	481b      	ldr	r0, [pc, #108]	; (77b0 <sys_clock_tick_get+0x80>)
    7744:	f7ff fcf8 	bl	7138 <z_spin_lock_valid>
    7748:	b968      	cbnz	r0, 7766 <sys_clock_tick_get+0x36>
    774a:	4a1a      	ldr	r2, [pc, #104]	; (77b4 <sys_clock_tick_get+0x84>)
    774c:	491a      	ldr	r1, [pc, #104]	; (77b8 <sys_clock_tick_get+0x88>)
    774e:	481b      	ldr	r0, [pc, #108]	; (77bc <sys_clock_tick_get+0x8c>)
    7750:	2381      	movs	r3, #129	; 0x81
    7752:	f000 fe84 	bl	845e <printk>
    7756:	4916      	ldr	r1, [pc, #88]	; (77b0 <sys_clock_tick_get+0x80>)
    7758:	4819      	ldr	r0, [pc, #100]	; (77c0 <sys_clock_tick_get+0x90>)
    775a:	f000 fe80 	bl	845e <printk>
    775e:	4815      	ldr	r0, [pc, #84]	; (77b4 <sys_clock_tick_get+0x84>)
    7760:	2181      	movs	r1, #129	; 0x81
    7762:	f000 fda5 	bl	82b0 <assert_post_action>
	z_spin_lock_set_owner(l);
    7766:	4812      	ldr	r0, [pc, #72]	; (77b0 <sys_clock_tick_get+0x80>)
    7768:	f7ff fd04 	bl	7174 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    776c:	f7fc fa7a 	bl	3c64 <sys_clock_elapsed>
    7770:	4b14      	ldr	r3, [pc, #80]	; (77c4 <sys_clock_tick_get+0x94>)
    7772:	e9d3 4500 	ldrd	r4, r5, [r3]
    7776:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7778:	480d      	ldr	r0, [pc, #52]	; (77b0 <sys_clock_tick_get+0x80>)
    777a:	f145 0500 	adc.w	r5, r5, #0
    777e:	f7ff fce9 	bl	7154 <z_spin_unlock_valid>
    7782:	b968      	cbnz	r0, 77a0 <sys_clock_tick_get+0x70>
    7784:	4a0b      	ldr	r2, [pc, #44]	; (77b4 <sys_clock_tick_get+0x84>)
    7786:	4910      	ldr	r1, [pc, #64]	; (77c8 <sys_clock_tick_get+0x98>)
    7788:	480c      	ldr	r0, [pc, #48]	; (77bc <sys_clock_tick_get+0x8c>)
    778a:	23ac      	movs	r3, #172	; 0xac
    778c:	f000 fe67 	bl	845e <printk>
    7790:	4907      	ldr	r1, [pc, #28]	; (77b0 <sys_clock_tick_get+0x80>)
    7792:	480e      	ldr	r0, [pc, #56]	; (77cc <sys_clock_tick_get+0x9c>)
    7794:	f000 fe63 	bl	845e <printk>
    7798:	4806      	ldr	r0, [pc, #24]	; (77b4 <sys_clock_tick_get+0x84>)
    779a:	21ac      	movs	r1, #172	; 0xac
    779c:	f000 fd88 	bl	82b0 <assert_post_action>
	__asm__ volatile(
    77a0:	f386 8811 	msr	BASEPRI, r6
    77a4:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    77a8:	4620      	mov	r0, r4
    77aa:	4629      	mov	r1, r5
    77ac:	bd70      	pop	{r4, r5, r6, pc}
    77ae:	bf00      	nop
    77b0:	20000c7c 	.word	0x20000c7c
    77b4:	00009623 	.word	0x00009623
    77b8:	00009675 	.word	0x00009675
    77bc:	00009190 	.word	0x00009190
    77c0:	0000968a 	.word	0x0000968a
    77c4:	20000598 	.word	0x20000598
    77c8:	00009649 	.word	0x00009649
    77cc:	00009660 	.word	0x00009660

000077d0 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    77d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    77d2:	4604      	mov	r4, r0
	__asm__ volatile(
    77d4:	f04f 0320 	mov.w	r3, #32
    77d8:	f3ef 8511 	mrs	r5, BASEPRI
    77dc:	f383 8812 	msr	BASEPRI_MAX, r3
    77e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    77e4:	484c      	ldr	r0, [pc, #304]	; (7918 <z_timer_expiration_handler+0x148>)
    77e6:	f7ff fca7 	bl	7138 <z_spin_lock_valid>
    77ea:	b968      	cbnz	r0, 7808 <z_timer_expiration_handler+0x38>
    77ec:	4a4b      	ldr	r2, [pc, #300]	; (791c <z_timer_expiration_handler+0x14c>)
    77ee:	494c      	ldr	r1, [pc, #304]	; (7920 <z_timer_expiration_handler+0x150>)
    77f0:	484c      	ldr	r0, [pc, #304]	; (7924 <z_timer_expiration_handler+0x154>)
    77f2:	2381      	movs	r3, #129	; 0x81
    77f4:	f000 fe33 	bl	845e <printk>
    77f8:	4947      	ldr	r1, [pc, #284]	; (7918 <z_timer_expiration_handler+0x148>)
    77fa:	484b      	ldr	r0, [pc, #300]	; (7928 <z_timer_expiration_handler+0x158>)
    77fc:	f000 fe2f 	bl	845e <printk>
    7800:	4846      	ldr	r0, [pc, #280]	; (791c <z_timer_expiration_handler+0x14c>)
    7802:	2181      	movs	r1, #129	; 0x81
    7804:	f000 fd54 	bl	82b0 <assert_post_action>
	z_spin_lock_set_owner(l);
    7808:	4843      	ldr	r0, [pc, #268]	; (7918 <z_timer_expiration_handler+0x148>)
    780a:	f7ff fcb3 	bl	7174 <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    780e:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    7812:	1c56      	adds	r6, r2, #1
    7814:	f143 0700 	adc.w	r7, r3, #0
    7818:	2f00      	cmp	r7, #0
    781a:	bf08      	it	eq
    781c:	2e02      	cmpeq	r6, #2
    781e:	d303      	bcc.n	7828 <z_timer_expiration_handler+0x58>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    7820:	4942      	ldr	r1, [pc, #264]	; (792c <z_timer_expiration_handler+0x15c>)
    7822:	4620      	mov	r0, r4
    7824:	f7ff fcfe 	bl	7224 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    7828:	6b23      	ldr	r3, [r4, #48]	; 0x30
    782a:	3301      	adds	r3, #1
    782c:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    782e:	6a23      	ldr	r3, [r4, #32]
    7830:	2b00      	cmp	r3, #0
    7832:	d035      	beq.n	78a0 <z_timer_expiration_handler+0xd0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7834:	4838      	ldr	r0, [pc, #224]	; (7918 <z_timer_expiration_handler+0x148>)
    7836:	f7ff fc8d 	bl	7154 <z_spin_unlock_valid>
    783a:	b968      	cbnz	r0, 7858 <z_timer_expiration_handler+0x88>
    783c:	4a37      	ldr	r2, [pc, #220]	; (791c <z_timer_expiration_handler+0x14c>)
    783e:	493c      	ldr	r1, [pc, #240]	; (7930 <z_timer_expiration_handler+0x160>)
    7840:	4838      	ldr	r0, [pc, #224]	; (7924 <z_timer_expiration_handler+0x154>)
    7842:	23ac      	movs	r3, #172	; 0xac
    7844:	f000 fe0b 	bl	845e <printk>
    7848:	4933      	ldr	r1, [pc, #204]	; (7918 <z_timer_expiration_handler+0x148>)
    784a:	483a      	ldr	r0, [pc, #232]	; (7934 <z_timer_expiration_handler+0x164>)
    784c:	f000 fe07 	bl	845e <printk>
    7850:	4832      	ldr	r0, [pc, #200]	; (791c <z_timer_expiration_handler+0x14c>)
    7852:	21ac      	movs	r1, #172	; 0xac
    7854:	f000 fd2c 	bl	82b0 <assert_post_action>
	__asm__ volatile(
    7858:	f385 8811 	msr	BASEPRI, r5
    785c:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    7860:	6a23      	ldr	r3, [r4, #32]
    7862:	4620      	mov	r0, r4
    7864:	4798      	blx	r3
	__asm__ volatile(
    7866:	f04f 0320 	mov.w	r3, #32
    786a:	f3ef 8511 	mrs	r5, BASEPRI
    786e:	f383 8812 	msr	BASEPRI_MAX, r3
    7872:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7876:	4828      	ldr	r0, [pc, #160]	; (7918 <z_timer_expiration_handler+0x148>)
    7878:	f7ff fc5e 	bl	7138 <z_spin_lock_valid>
    787c:	b968      	cbnz	r0, 789a <z_timer_expiration_handler+0xca>
    787e:	4a27      	ldr	r2, [pc, #156]	; (791c <z_timer_expiration_handler+0x14c>)
    7880:	4927      	ldr	r1, [pc, #156]	; (7920 <z_timer_expiration_handler+0x150>)
    7882:	4828      	ldr	r0, [pc, #160]	; (7924 <z_timer_expiration_handler+0x154>)
    7884:	2381      	movs	r3, #129	; 0x81
    7886:	f000 fdea 	bl	845e <printk>
    788a:	4923      	ldr	r1, [pc, #140]	; (7918 <z_timer_expiration_handler+0x148>)
    788c:	4826      	ldr	r0, [pc, #152]	; (7928 <z_timer_expiration_handler+0x158>)
    788e:	f000 fde6 	bl	845e <printk>
    7892:	4822      	ldr	r0, [pc, #136]	; (791c <z_timer_expiration_handler+0x14c>)
    7894:	2181      	movs	r1, #129	; 0x81
    7896:	f000 fd0b 	bl	82b0 <assert_post_action>
	z_spin_lock_set_owner(l);
    789a:	481f      	ldr	r0, [pc, #124]	; (7918 <z_timer_expiration_handler+0x148>)
    789c:	f7ff fc6a 	bl	7174 <z_spin_lock_set_owner>
	return list->head == list;
    78a0:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    78a4:	42a6      	cmp	r6, r4
    78a6:	d000      	beq.n	78aa <z_timer_expiration_handler+0xda>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    78a8:	b9b6      	cbnz	r6, 78d8 <z_timer_expiration_handler+0x108>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    78aa:	481b      	ldr	r0, [pc, #108]	; (7918 <z_timer_expiration_handler+0x148>)
    78ac:	f7ff fc52 	bl	7154 <z_spin_unlock_valid>
    78b0:	b968      	cbnz	r0, 78ce <z_timer_expiration_handler+0xfe>
    78b2:	4a1a      	ldr	r2, [pc, #104]	; (791c <z_timer_expiration_handler+0x14c>)
    78b4:	491e      	ldr	r1, [pc, #120]	; (7930 <z_timer_expiration_handler+0x160>)
    78b6:	481b      	ldr	r0, [pc, #108]	; (7924 <z_timer_expiration_handler+0x154>)
    78b8:	23ac      	movs	r3, #172	; 0xac
    78ba:	f000 fdd0 	bl	845e <printk>
    78be:	4916      	ldr	r1, [pc, #88]	; (7918 <z_timer_expiration_handler+0x148>)
    78c0:	481c      	ldr	r0, [pc, #112]	; (7934 <z_timer_expiration_handler+0x164>)
    78c2:	f000 fdcc 	bl	845e <printk>
    78c6:	4815      	ldr	r0, [pc, #84]	; (791c <z_timer_expiration_handler+0x14c>)
    78c8:	21ac      	movs	r1, #172	; 0xac
    78ca:	f000 fcf1 	bl	82b0 <assert_post_action>
	__asm__ volatile(
    78ce:	f385 8811 	msr	BASEPRI, r5
    78d2:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    78d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	z_unpend_thread_no_timeout(thread);
    78d8:	4630      	mov	r0, r6
    78da:	f7fe f851 	bl	5980 <z_unpend_thread_no_timeout>
    78de:	2300      	movs	r3, #0
    78e0:	480d      	ldr	r0, [pc, #52]	; (7918 <z_timer_expiration_handler+0x148>)
    78e2:	67f3      	str	r3, [r6, #124]	; 0x7c
    78e4:	f7ff fc36 	bl	7154 <z_spin_unlock_valid>
    78e8:	b968      	cbnz	r0, 7906 <z_timer_expiration_handler+0x136>
    78ea:	4a0c      	ldr	r2, [pc, #48]	; (791c <z_timer_expiration_handler+0x14c>)
    78ec:	4910      	ldr	r1, [pc, #64]	; (7930 <z_timer_expiration_handler+0x160>)
    78ee:	480d      	ldr	r0, [pc, #52]	; (7924 <z_timer_expiration_handler+0x154>)
    78f0:	23ac      	movs	r3, #172	; 0xac
    78f2:	f000 fdb4 	bl	845e <printk>
    78f6:	4908      	ldr	r1, [pc, #32]	; (7918 <z_timer_expiration_handler+0x148>)
    78f8:	480e      	ldr	r0, [pc, #56]	; (7934 <z_timer_expiration_handler+0x164>)
    78fa:	f000 fdb0 	bl	845e <printk>
    78fe:	4807      	ldr	r0, [pc, #28]	; (791c <z_timer_expiration_handler+0x14c>)
    7900:	21ac      	movs	r1, #172	; 0xac
    7902:	f000 fcd5 	bl	82b0 <assert_post_action>
    7906:	f385 8811 	msr	BASEPRI, r5
    790a:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    790e:	4630      	mov	r0, r6
}
    7910:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
    7914:	f7fe bb1c 	b.w	5f50 <z_ready_thread>
    7918:	20000c80 	.word	0x20000c80
    791c:	00009623 	.word	0x00009623
    7920:	00009675 	.word	0x00009675
    7924:	00009190 	.word	0x00009190
    7928:	0000968a 	.word	0x0000968a
    792c:	000077d1 	.word	0x000077d1
    7930:	00009649 	.word	0x00009649
    7934:	00009660 	.word	0x00009660

00007938 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    7938:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
    793c:	4619      	mov	r1, r3
    793e:	4606      	mov	r6, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    7940:	1c4c      	adds	r4, r1, #1
{
    7942:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    7944:	bf08      	it	eq
    7946:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    794a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    794e:	4680      	mov	r8, r0
    7950:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    7952:	d04c      	beq.n	79ee <z_impl_k_timer_start+0xb6>
    7954:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    7956:	1c6b      	adds	r3, r5, #1
    7958:	bf08      	it	eq
    795a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    795e:	4614      	mov	r4, r2
    7960:	d019      	beq.n	7996 <z_impl_k_timer_start+0x5e>
    7962:	ea54 0305 	orrs.w	r3, r4, r5
    7966:	d016      	beq.n	7996 <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
    7968:	f06f 0301 	mvn.w	r3, #1
    796c:	ebb3 0a02 	subs.w	sl, r3, r2
    7970:	f04f 33ff 	mov.w	r3, #4294967295
    7974:	eb63 0b05 	sbc.w	fp, r3, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    7978:	f1ba 0f00 	cmp.w	sl, #0
    797c:	f17b 0300 	sbcs.w	r3, fp, #0
    7980:	da09      	bge.n	7996 <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
    7982:	f112 34ff 	adds.w	r4, r2, #4294967295
    7986:	f145 35ff 	adc.w	r5, r5, #4294967295
    798a:	2c01      	cmp	r4, #1
    798c:	f175 0300 	sbcs.w	r3, r5, #0
    7990:	bfbc      	itt	lt
    7992:	2401      	movlt	r4, #1
    7994:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    7996:	f06f 0301 	mvn.w	r3, #1
    799a:	1a1b      	subs	r3, r3, r0
    799c:	9300      	str	r3, [sp, #0]
    799e:	f04f 33ff 	mov.w	r3, #4294967295
    79a2:	eb63 0301 	sbc.w	r3, r3, r1
    79a6:	9301      	str	r3, [sp, #4]
    79a8:	e9dd 2300 	ldrd	r2, r3, [sp]
    79ac:	2a00      	cmp	r2, #0
    79ae:	f173 0300 	sbcs.w	r3, r3, #0
    79b2:	da0c      	bge.n	79ce <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
    79b4:	f110 38ff 	adds.w	r8, r0, #4294967295
    79b8:	f141 39ff 	adc.w	r9, r1, #4294967295
    79bc:	f1b8 0f00 	cmp.w	r8, #0
    79c0:	f179 0300 	sbcs.w	r3, r9, #0
    79c4:	bfbc      	itt	lt
    79c6:	f04f 0800 	movlt.w	r8, #0
    79ca:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
    79ce:	4630      	mov	r0, r6
    79d0:	f7ff fcfc 	bl	73cc <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    79d4:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    79d6:	4907      	ldr	r1, [pc, #28]	; (79f4 <z_impl_k_timer_start+0xbc>)
	timer->status = 0U;
    79d8:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    79da:	4642      	mov	r2, r8
    79dc:	464b      	mov	r3, r9
    79de:	4630      	mov	r0, r6
	timer->period = period;
    79e0:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
    79e4:	b002      	add	sp, #8
    79e6:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    79ea:	f7ff bc1b 	b.w	7224 <z_add_timeout>
}
    79ee:	b002      	add	sp, #8
    79f0:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
    79f4:	000077d1 	.word	0x000077d1

000079f8 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    79f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    79fc:	4e7e      	ldr	r6, [pc, #504]	; (7bf8 <work_queue_main+0x200>)
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    79fe:	4f7f      	ldr	r7, [pc, #508]	; (7bfc <work_queue_main+0x204>)
{
    7a00:	b085      	sub	sp, #20
    7a02:	4604      	mov	r4, r0
	__asm__ volatile(
    7a04:	f04f 0320 	mov.w	r3, #32
    7a08:	f3ef 8811 	mrs	r8, BASEPRI
    7a0c:	f383 8812 	msr	BASEPRI_MAX, r3
    7a10:	f3bf 8f6f 	isb	sy
    7a14:	4630      	mov	r0, r6
    7a16:	f7ff fb8f 	bl	7138 <z_spin_lock_valid>
    7a1a:	b968      	cbnz	r0, 7a38 <work_queue_main+0x40>
    7a1c:	4a78      	ldr	r2, [pc, #480]	; (7c00 <work_queue_main+0x208>)
    7a1e:	4979      	ldr	r1, [pc, #484]	; (7c04 <work_queue_main+0x20c>)
    7a20:	4879      	ldr	r0, [pc, #484]	; (7c08 <work_queue_main+0x210>)
    7a22:	2381      	movs	r3, #129	; 0x81
    7a24:	f000 fd1b 	bl	845e <printk>
    7a28:	4878      	ldr	r0, [pc, #480]	; (7c0c <work_queue_main+0x214>)
    7a2a:	4631      	mov	r1, r6
    7a2c:	f000 fd17 	bl	845e <printk>
    7a30:	4873      	ldr	r0, [pc, #460]	; (7c00 <work_queue_main+0x208>)
    7a32:	2181      	movs	r1, #129	; 0x81
    7a34:	f000 fc3c 	bl	82b0 <assert_post_action>
	z_spin_lock_set_owner(l);
    7a38:	4630      	mov	r0, r6
    7a3a:	f7ff fb9b 	bl	7174 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(slist)
    7a3e:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
	return list->head;
    7a42:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
Z_GENLIST_GET(slist, snode)
    7a46:	b9ad      	cbnz	r5, 7a74 <work_queue_main+0x7c>
	*flagp &= ~BIT(bit);
    7a48:	f023 0204 	bic.w	r2, r3, #4
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
    7a4c:	0758      	lsls	r0, r3, #29
	*flagp &= ~BIT(bit);
    7a4e:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
    7a52:	f100 8092 	bmi.w	7b7a <work_queue_main+0x182>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
    7a56:	2300      	movs	r3, #0
    7a58:	9302      	str	r3, [sp, #8]
    7a5a:	f04f 32ff 	mov.w	r2, #4294967295
    7a5e:	f04f 33ff 	mov.w	r3, #4294967295
    7a62:	e9cd 2300 	strd	r2, r3, [sp]
    7a66:	4641      	mov	r1, r8
    7a68:	f104 0288 	add.w	r2, r4, #136	; 0x88
    7a6c:	4630      	mov	r0, r6
    7a6e:	f7ff f927 	bl	6cc0 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
    7a72:	e7c7      	b.n	7a04 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    7a74:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
    7a78:	682a      	ldr	r2, [r5, #0]
	list->head = node;
    7a7a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    7a7e:	428d      	cmp	r5, r1
    7a80:	d101      	bne.n	7a86 <work_queue_main+0x8e>
	list->tail = node;
    7a82:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
    7a86:	f043 0302 	orr.w	r3, r3, #2
    7a8a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
    7a8e:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
    7a90:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
    7a94:	f023 0304 	bic.w	r3, r3, #4
    7a98:	f043 0301 	orr.w	r3, r3, #1
    7a9c:	60eb      	str	r3, [r5, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7a9e:	4630      	mov	r0, r6
    7aa0:	f7ff fb58 	bl	7154 <z_spin_unlock_valid>
    7aa4:	b968      	cbnz	r0, 7ac2 <work_queue_main+0xca>
    7aa6:	4a56      	ldr	r2, [pc, #344]	; (7c00 <work_queue_main+0x208>)
    7aa8:	4959      	ldr	r1, [pc, #356]	; (7c10 <work_queue_main+0x218>)
    7aaa:	4857      	ldr	r0, [pc, #348]	; (7c08 <work_queue_main+0x210>)
    7aac:	23ac      	movs	r3, #172	; 0xac
    7aae:	f000 fcd6 	bl	845e <printk>
    7ab2:	4858      	ldr	r0, [pc, #352]	; (7c14 <work_queue_main+0x21c>)
    7ab4:	4631      	mov	r1, r6
    7ab6:	f000 fcd2 	bl	845e <printk>
    7aba:	4851      	ldr	r0, [pc, #324]	; (7c00 <work_queue_main+0x208>)
    7abc:	21ac      	movs	r1, #172	; 0xac
    7abe:	f000 fbf7 	bl	82b0 <assert_post_action>
	__asm__ volatile(
    7ac2:	f388 8811 	msr	BASEPRI, r8
    7ac6:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
    7aca:	f1b9 0f00 	cmp.w	r9, #0
    7ace:	d10b      	bne.n	7ae8 <work_queue_main+0xf0>
    7ad0:	4951      	ldr	r1, [pc, #324]	; (7c18 <work_queue_main+0x220>)
    7ad2:	484d      	ldr	r0, [pc, #308]	; (7c08 <work_queue_main+0x210>)
    7ad4:	4a51      	ldr	r2, [pc, #324]	; (7c1c <work_queue_main+0x224>)
    7ad6:	f44f 7322 	mov.w	r3, #648	; 0x288
    7ada:	f000 fcc0 	bl	845e <printk>
    7ade:	484f      	ldr	r0, [pc, #316]	; (7c1c <work_queue_main+0x224>)
    7ae0:	f44f 7122 	mov.w	r1, #648	; 0x288
    7ae4:	f000 fbe4 	bl	82b0 <assert_post_action>
		handler(work);
    7ae8:	4628      	mov	r0, r5
    7aea:	47c8      	blx	r9
	__asm__ volatile(
    7aec:	f04f 0320 	mov.w	r3, #32
    7af0:	f3ef 8a11 	mrs	sl, BASEPRI
    7af4:	f383 8812 	msr	BASEPRI_MAX, r3
    7af8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7afc:	4630      	mov	r0, r6
    7afe:	f7ff fb1b 	bl	7138 <z_spin_lock_valid>
    7b02:	b968      	cbnz	r0, 7b20 <work_queue_main+0x128>
    7b04:	4a3e      	ldr	r2, [pc, #248]	; (7c00 <work_queue_main+0x208>)
    7b06:	493f      	ldr	r1, [pc, #252]	; (7c04 <work_queue_main+0x20c>)
    7b08:	483f      	ldr	r0, [pc, #252]	; (7c08 <work_queue_main+0x210>)
    7b0a:	2381      	movs	r3, #129	; 0x81
    7b0c:	f000 fca7 	bl	845e <printk>
    7b10:	483e      	ldr	r0, [pc, #248]	; (7c0c <work_queue_main+0x214>)
    7b12:	4631      	mov	r1, r6
    7b14:	f000 fca3 	bl	845e <printk>
    7b18:	4839      	ldr	r0, [pc, #228]	; (7c00 <work_queue_main+0x208>)
    7b1a:	2181      	movs	r1, #129	; 0x81
    7b1c:	f000 fbc8 	bl	82b0 <assert_post_action>
	z_spin_lock_set_owner(l);
    7b20:	4630      	mov	r0, r6
    7b22:	f7ff fb27 	bl	7174 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
    7b26:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    7b28:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    7b2a:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    7b2e:	d42e      	bmi.n	7b8e <work_queue_main+0x196>
	*flagp &= ~BIT(bit);
    7b30:	60ea      	str	r2, [r5, #12]
    7b32:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    7b36:	f023 0302 	bic.w	r3, r3, #2
    7b3a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7b3e:	4630      	mov	r0, r6
	return (*flagp & BIT(bit)) != 0U;
    7b40:	f3c3 2500 	ubfx	r5, r3, #8, #1
    7b44:	f7ff fb06 	bl	7154 <z_spin_unlock_valid>
    7b48:	b968      	cbnz	r0, 7b66 <work_queue_main+0x16e>
    7b4a:	4a2d      	ldr	r2, [pc, #180]	; (7c00 <work_queue_main+0x208>)
    7b4c:	4930      	ldr	r1, [pc, #192]	; (7c10 <work_queue_main+0x218>)
    7b4e:	482e      	ldr	r0, [pc, #184]	; (7c08 <work_queue_main+0x210>)
    7b50:	23ac      	movs	r3, #172	; 0xac
    7b52:	f000 fc84 	bl	845e <printk>
    7b56:	482f      	ldr	r0, [pc, #188]	; (7c14 <work_queue_main+0x21c>)
    7b58:	4631      	mov	r1, r6
    7b5a:	f000 fc80 	bl	845e <printk>
    7b5e:	4828      	ldr	r0, [pc, #160]	; (7c00 <work_queue_main+0x208>)
    7b60:	21ac      	movs	r1, #172	; 0xac
    7b62:	f000 fba5 	bl	82b0 <assert_post_action>
	__asm__ volatile(
    7b66:	f38a 8811 	msr	BASEPRI, sl
    7b6a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    7b6e:	2d00      	cmp	r5, #0
    7b70:	f47f af48 	bne.w	7a04 <work_queue_main+0xc>
	z_impl_k_yield();
    7b74:	f7fe fdf8 	bl	6768 <z_impl_k_yield>
}
    7b78:	e744      	b.n	7a04 <work_queue_main+0xc>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    7b7a:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    7b7e:	2200      	movs	r2, #0
    7b80:	2101      	movs	r1, #1
    7b82:	4628      	mov	r0, r5
    7b84:	f7ff f844 	bl	6c10 <z_sched_wake>
    7b88:	2800      	cmp	r0, #0
    7b8a:	d1f8      	bne.n	7b7e <work_queue_main+0x186>
    7b8c:	e763      	b.n	7a56 <work_queue_main+0x5e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    7b8e:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
    7b90:	f023 0303 	bic.w	r3, r3, #3
    7b94:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    7b96:	2800      	cmp	r0, #0
    7b98:	d0cb      	beq.n	7b32 <work_queue_main+0x13a>
	return node->next;
    7b9a:	6803      	ldr	r3, [r0, #0]
    7b9c:	2b00      	cmp	r3, #0
    7b9e:	bf38      	it	cc
    7ba0:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    7ba2:	f04f 0900 	mov.w	r9, #0
    7ba6:	4698      	mov	r8, r3
	parent->next = child;
    7ba8:	46cb      	mov	fp, r9
		if (wc->work == work) {
    7baa:	6843      	ldr	r3, [r0, #4]
    7bac:	429d      	cmp	r5, r3
    7bae:	4602      	mov	r2, r0
    7bb0:	d10d      	bne.n	7bce <work_queue_main+0x1d6>
Z_GENLIST_REMOVE(slist, snode)
    7bb2:	6802      	ldr	r2, [r0, #0]
    7bb4:	f1b9 0f00 	cmp.w	r9, #0
    7bb8:	d115      	bne.n	7be6 <work_queue_main+0x1ee>
    7bba:	687b      	ldr	r3, [r7, #4]
	list->head = node;
    7bbc:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    7bbe:	4283      	cmp	r3, r0
    7bc0:	d100      	bne.n	7bc4 <work_queue_main+0x1cc>
	list->tail = node;
    7bc2:	607a      	str	r2, [r7, #4]
	parent->next = child;
    7bc4:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
    7bc8:	f7ff f88c 	bl	6ce4 <z_impl_k_sem_give>
}
    7bcc:	464a      	mov	r2, r9
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    7bce:	f1b8 0f00 	cmp.w	r8, #0
    7bd2:	d0ae      	beq.n	7b32 <work_queue_main+0x13a>
	return node->next;
    7bd4:	f8d8 3000 	ldr.w	r3, [r8]
    7bd8:	2b00      	cmp	r3, #0
    7bda:	bf38      	it	cc
    7bdc:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    7bde:	4640      	mov	r0, r8
    7be0:	4691      	mov	r9, r2
    7be2:	4698      	mov	r8, r3
    7be4:	e7e1      	b.n	7baa <work_queue_main+0x1b2>
	parent->next = child;
    7be6:	f8c9 2000 	str.w	r2, [r9]
Z_GENLIST_REMOVE(slist, snode)
    7bea:	687b      	ldr	r3, [r7, #4]
    7bec:	4283      	cmp	r3, r0
	list->tail = node;
    7bee:	bf08      	it	eq
    7bf0:	f8c7 9004 	streq.w	r9, [r7, #4]
}
    7bf4:	e7e6      	b.n	7bc4 <work_queue_main+0x1cc>
    7bf6:	bf00      	nop
    7bf8:	20000c84 	.word	0x20000c84
    7bfc:	20000c88 	.word	0x20000c88
    7c00:	00009623 	.word	0x00009623
    7c04:	00009675 	.word	0x00009675
    7c08:	00009190 	.word	0x00009190
    7c0c:	0000968a 	.word	0x0000968a
    7c10:	00009649 	.word	0x00009649
    7c14:	00009660 	.word	0x00009660
    7c18:	0000a4a8 	.word	0x0000a4a8
    7c1c:	0000a487 	.word	0x0000a487

00007c20 <submit_to_queue_locked>:
{
    7c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    7c22:	68c3      	ldr	r3, [r0, #12]
    7c24:	079a      	lsls	r2, r3, #30
{
    7c26:	4604      	mov	r4, r0
    7c28:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    7c2a:	f3c3 0540 	ubfx	r5, r3, #1, #1
    7c2e:	d42b      	bmi.n	7c88 <submit_to_queue_locked+0x68>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    7c30:	075f      	lsls	r7, r3, #29
    7c32:	d42b      	bmi.n	7c8c <submit_to_queue_locked+0x6c>
		if (*queuep == NULL) {
    7c34:	680a      	ldr	r2, [r1, #0]
    7c36:	b90a      	cbnz	r2, 7c3c <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    7c38:	6882      	ldr	r2, [r0, #8]
    7c3a:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    7c3c:	07d8      	lsls	r0, r3, #31
    7c3e:	d528      	bpl.n	7c92 <submit_to_queue_locked+0x72>
			__ASSERT_NO_MSG(work->queue != NULL);
    7c40:	68a3      	ldr	r3, [r4, #8]
    7c42:	b95b      	cbnz	r3, 7c5c <submit_to_queue_locked+0x3c>
    7c44:	4924      	ldr	r1, [pc, #144]	; (7cd8 <submit_to_queue_locked+0xb8>)
    7c46:	4825      	ldr	r0, [pc, #148]	; (7cdc <submit_to_queue_locked+0xbc>)
    7c48:	4a25      	ldr	r2, [pc, #148]	; (7ce0 <submit_to_queue_locked+0xc0>)
    7c4a:	f44f 73a7 	mov.w	r3, #334	; 0x14e
    7c4e:	f000 fc06 	bl	845e <printk>
    7c52:	4823      	ldr	r0, [pc, #140]	; (7ce0 <submit_to_queue_locked+0xc0>)
    7c54:	f44f 71a7 	mov.w	r1, #334	; 0x14e
    7c58:	f000 fb2a 	bl	82b0 <assert_post_action>
			*queuep = work->queue;
    7c5c:	68a3      	ldr	r3, [r4, #8]
    7c5e:	6033      	str	r3, [r6, #0]
			ret = 2;
    7c60:	2502      	movs	r5, #2
		int rc = queue_submit_locked(*queuep, work);
    7c62:	6837      	ldr	r7, [r6, #0]
	if (queue == NULL) {
    7c64:	b38f      	cbz	r7, 7cca <submit_to_queue_locked+0xaa>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    7c66:	4b1f      	ldr	r3, [pc, #124]	; (7ce4 <submit_to_queue_locked+0xc4>)
    7c68:	689b      	ldr	r3, [r3, #8]
    7c6a:	42bb      	cmp	r3, r7
    7c6c:	d113      	bne.n	7c96 <submit_to_queue_locked+0x76>
    7c6e:	f000 ff85 	bl	8b7c <k_is_in_isr>
    7c72:	f080 0001 	eor.w	r0, r0, #1
    7c76:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
    7c78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    7c7c:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    7c7e:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    7c82:	d525      	bpl.n	7cd0 <submit_to_queue_locked+0xb0>
	} else if (draining && !chained) {
    7c84:	b14a      	cbz	r2, 7c9a <submit_to_queue_locked+0x7a>
    7c86:	b950      	cbnz	r0, 7c9e <submit_to_queue_locked+0x7e>
		ret = -EBUSY;
    7c88:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
    7c8c:	2300      	movs	r3, #0
    7c8e:	6033      	str	r3, [r6, #0]
	return ret;
    7c90:	e015      	b.n	7cbe <submit_to_queue_locked+0x9e>
		ret = 1;
    7c92:	2501      	movs	r5, #1
    7c94:	e7e5      	b.n	7c62 <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    7c96:	2000      	movs	r0, #0
    7c98:	e7ee      	b.n	7c78 <submit_to_queue_locked+0x58>
	} else if (plugged && !draining) {
    7c9a:	071b      	lsls	r3, r3, #28
    7c9c:	d4f4      	bmi.n	7c88 <submit_to_queue_locked+0x68>
	parent->next = child;
    7c9e:	2300      	movs	r3, #0
    7ca0:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
    7ca2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    7ca6:	b963      	cbnz	r3, 7cc2 <submit_to_queue_locked+0xa2>
	list->head = node;
    7ca8:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
    7cac:	4638      	mov	r0, r7
    7cae:	f000 ff97 	bl	8be0 <notify_queue_locked>
	*flagp |= BIT(bit);
    7cb2:	68e3      	ldr	r3, [r4, #12]
    7cb4:	f043 0304 	orr.w	r3, r3, #4
    7cb8:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    7cba:	6833      	ldr	r3, [r6, #0]
    7cbc:	60a3      	str	r3, [r4, #8]
}
    7cbe:	4628      	mov	r0, r5
    7cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    7cc2:	601c      	str	r4, [r3, #0]
	list->tail = node;
    7cc4:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
    7cc8:	e7f0      	b.n	7cac <submit_to_queue_locked+0x8c>
		return -EINVAL;
    7cca:	f06f 0515 	mvn.w	r5, #21
    7cce:	e7dd      	b.n	7c8c <submit_to_queue_locked+0x6c>
		ret = -ENODEV;
    7cd0:	f06f 0512 	mvn.w	r5, #18
    7cd4:	e7da      	b.n	7c8c <submit_to_queue_locked+0x6c>
    7cd6:	bf00      	nop
    7cd8:	0000a4bf 	.word	0x0000a4bf
    7cdc:	00009190 	.word	0x00009190
    7ce0:	0000a487 	.word	0x0000a487
    7ce4:	20000c34 	.word	0x20000c34

00007ce8 <k_work_submit_to_queue>:
{
    7ce8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
    7cea:	460c      	mov	r4, r1
{
    7cec:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
    7cee:	b959      	cbnz	r1, 7d08 <k_work_submit_to_queue+0x20>
    7cf0:	4926      	ldr	r1, [pc, #152]	; (7d8c <k_work_submit_to_queue+0xa4>)
    7cf2:	4827      	ldr	r0, [pc, #156]	; (7d90 <k_work_submit_to_queue+0xa8>)
    7cf4:	4a27      	ldr	r2, [pc, #156]	; (7d94 <k_work_submit_to_queue+0xac>)
    7cf6:	f240 1369 	movw	r3, #361	; 0x169
    7cfa:	f000 fbb0 	bl	845e <printk>
    7cfe:	4825      	ldr	r0, [pc, #148]	; (7d94 <k_work_submit_to_queue+0xac>)
    7d00:	f240 1169 	movw	r1, #361	; 0x169
    7d04:	f000 fad4 	bl	82b0 <assert_post_action>
	__asm__ volatile(
    7d08:	f04f 0320 	mov.w	r3, #32
    7d0c:	f3ef 8511 	mrs	r5, BASEPRI
    7d10:	f383 8812 	msr	BASEPRI_MAX, r3
    7d14:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7d18:	481f      	ldr	r0, [pc, #124]	; (7d98 <k_work_submit_to_queue+0xb0>)
    7d1a:	f7ff fa0d 	bl	7138 <z_spin_lock_valid>
    7d1e:	b968      	cbnz	r0, 7d3c <k_work_submit_to_queue+0x54>
    7d20:	4a1e      	ldr	r2, [pc, #120]	; (7d9c <k_work_submit_to_queue+0xb4>)
    7d22:	491f      	ldr	r1, [pc, #124]	; (7da0 <k_work_submit_to_queue+0xb8>)
    7d24:	481a      	ldr	r0, [pc, #104]	; (7d90 <k_work_submit_to_queue+0xa8>)
    7d26:	2381      	movs	r3, #129	; 0x81
    7d28:	f000 fb99 	bl	845e <printk>
    7d2c:	491a      	ldr	r1, [pc, #104]	; (7d98 <k_work_submit_to_queue+0xb0>)
    7d2e:	481d      	ldr	r0, [pc, #116]	; (7da4 <k_work_submit_to_queue+0xbc>)
    7d30:	f000 fb95 	bl	845e <printk>
    7d34:	4819      	ldr	r0, [pc, #100]	; (7d9c <k_work_submit_to_queue+0xb4>)
    7d36:	2181      	movs	r1, #129	; 0x81
    7d38:	f000 faba 	bl	82b0 <assert_post_action>
	z_spin_lock_set_owner(l);
    7d3c:	4816      	ldr	r0, [pc, #88]	; (7d98 <k_work_submit_to_queue+0xb0>)
    7d3e:	f7ff fa19 	bl	7174 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
    7d42:	4620      	mov	r0, r4
    7d44:	a901      	add	r1, sp, #4
    7d46:	f7ff ff6b 	bl	7c20 <submit_to_queue_locked>
    7d4a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7d4c:	4812      	ldr	r0, [pc, #72]	; (7d98 <k_work_submit_to_queue+0xb0>)
    7d4e:	f7ff fa01 	bl	7154 <z_spin_unlock_valid>
    7d52:	b968      	cbnz	r0, 7d70 <k_work_submit_to_queue+0x88>
    7d54:	4a11      	ldr	r2, [pc, #68]	; (7d9c <k_work_submit_to_queue+0xb4>)
    7d56:	4914      	ldr	r1, [pc, #80]	; (7da8 <k_work_submit_to_queue+0xc0>)
    7d58:	480d      	ldr	r0, [pc, #52]	; (7d90 <k_work_submit_to_queue+0xa8>)
    7d5a:	23ac      	movs	r3, #172	; 0xac
    7d5c:	f000 fb7f 	bl	845e <printk>
    7d60:	490d      	ldr	r1, [pc, #52]	; (7d98 <k_work_submit_to_queue+0xb0>)
    7d62:	4812      	ldr	r0, [pc, #72]	; (7dac <k_work_submit_to_queue+0xc4>)
    7d64:	f000 fb7b 	bl	845e <printk>
    7d68:	480c      	ldr	r0, [pc, #48]	; (7d9c <k_work_submit_to_queue+0xb4>)
    7d6a:	21ac      	movs	r1, #172	; 0xac
    7d6c:	f000 faa0 	bl	82b0 <assert_post_action>
	__asm__ volatile(
    7d70:	f385 8811 	msr	BASEPRI, r5
    7d74:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
    7d78:	2c00      	cmp	r4, #0
    7d7a:	dd04      	ble.n	7d86 <k_work_submit_to_queue+0x9e>
	return z_impl_k_is_preempt_thread();
    7d7c:	f7fe fe84 	bl	6a88 <z_impl_k_is_preempt_thread>
    7d80:	b108      	cbz	r0, 7d86 <k_work_submit_to_queue+0x9e>
	z_impl_k_yield();
    7d82:	f7fe fcf1 	bl	6768 <z_impl_k_yield>
}
    7d86:	4620      	mov	r0, r4
    7d88:	b003      	add	sp, #12
    7d8a:	bd30      	pop	{r4, r5, pc}
    7d8c:	0000a4da 	.word	0x0000a4da
    7d90:	00009190 	.word	0x00009190
    7d94:	0000a487 	.word	0x0000a487
    7d98:	20000c84 	.word	0x20000c84
    7d9c:	00009623 	.word	0x00009623
    7da0:	00009675 	.word	0x00009675
    7da4:	0000968a 	.word	0x0000968a
    7da8:	00009649 	.word	0x00009649
    7dac:	00009660 	.word	0x00009660

00007db0 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    7db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7db4:	b088      	sub	sp, #32
    7db6:	460e      	mov	r6, r1
    7db8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    7dba:	4617      	mov	r7, r2
    7dbc:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(queue);
    7dbe:	4604      	mov	r4, r0
    7dc0:	b958      	cbnz	r0, 7dda <k_work_queue_start+0x2a>
    7dc2:	492e      	ldr	r1, [pc, #184]	; (7e7c <k_work_queue_start+0xcc>)
    7dc4:	482e      	ldr	r0, [pc, #184]	; (7e80 <k_work_queue_start+0xd0>)
    7dc6:	4a2f      	ldr	r2, [pc, #188]	; (7e84 <k_work_queue_start+0xd4>)
    7dc8:	f240 23b5 	movw	r3, #693	; 0x2b5
    7dcc:	f000 fb47 	bl	845e <printk>
    7dd0:	482c      	ldr	r0, [pc, #176]	; (7e84 <k_work_queue_start+0xd4>)
    7dd2:	f240 21b5 	movw	r1, #693	; 0x2b5
    7dd6:	f000 fa6b 	bl	82b0 <assert_post_action>
	__ASSERT_NO_MSG(stack);
    7dda:	b95e      	cbnz	r6, 7df4 <k_work_queue_start+0x44>
    7ddc:	492a      	ldr	r1, [pc, #168]	; (7e88 <k_work_queue_start+0xd8>)
    7dde:	4828      	ldr	r0, [pc, #160]	; (7e80 <k_work_queue_start+0xd0>)
    7de0:	4a28      	ldr	r2, [pc, #160]	; (7e84 <k_work_queue_start+0xd4>)
    7de2:	f240 23b6 	movw	r3, #694	; 0x2b6
    7de6:	f000 fb3a 	bl	845e <printk>
    7dea:	4826      	ldr	r0, [pc, #152]	; (7e84 <k_work_queue_start+0xd4>)
    7dec:	f240 21b6 	movw	r1, #694	; 0x2b6
    7df0:	f000 fa5e 	bl	82b0 <assert_post_action>
	return (*flagp & BIT(bit)) != 0U;
    7df4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
    7df8:	07db      	lsls	r3, r3, #31
    7dfa:	d50b      	bpl.n	7e14 <k_work_queue_start+0x64>
    7dfc:	4923      	ldr	r1, [pc, #140]	; (7e8c <k_work_queue_start+0xdc>)
    7dfe:	4820      	ldr	r0, [pc, #128]	; (7e80 <k_work_queue_start+0xd0>)
    7e00:	4a20      	ldr	r2, [pc, #128]	; (7e84 <k_work_queue_start+0xd4>)
    7e02:	f240 23b7 	movw	r3, #695	; 0x2b7
    7e06:	f000 fb2a 	bl	845e <printk>
    7e0a:	481e      	ldr	r0, [pc, #120]	; (7e84 <k_work_queue_start+0xd4>)
    7e0c:	f240 21b7 	movw	r1, #695	; 0x2b7
    7e10:	f000 fa4e 	bl	82b0 <assert_post_action>
	list->head = NULL;
    7e14:	2300      	movs	r3, #0
	list->tail = NULL;
    7e16:	e9c4 3320 	strd	r3, r3, [r4, #128]	; 0x80
    7e1a:	f104 0388 	add.w	r3, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
    7e1e:	e9c4 3322 	strd	r3, r3, [r4, #136]	; 0x88
    7e22:	f104 0390 	add.w	r3, r4, #144	; 0x90
    7e26:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    7e2a:	b32d      	cbz	r5, 7e78 <k_work_queue_start+0xc8>
    7e2c:	792b      	ldrb	r3, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    7e2e:	2b00      	cmp	r3, #0
    7e30:	f240 1101 	movw	r1, #257	; 0x101
    7e34:	bf08      	it	eq
    7e36:	2101      	moveq	r1, #1
	*flagp = flags;
    7e38:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    7e3c:	f04f 32ff 	mov.w	r2, #4294967295
    7e40:	f04f 33ff 	mov.w	r3, #4294967295
    7e44:	e9cd 2306 	strd	r2, r3, [sp, #24]
    7e48:	2200      	movs	r2, #0
    7e4a:	e9cd 8203 	strd	r8, r2, [sp, #12]
    7e4e:	e9cd 2201 	strd	r2, r2, [sp, #4]
    7e52:	4b0f      	ldr	r3, [pc, #60]	; (7e90 <k_work_queue_start+0xe0>)
    7e54:	9400      	str	r4, [sp, #0]
    7e56:	463a      	mov	r2, r7
    7e58:	4631      	mov	r1, r6
    7e5a:	4620      	mov	r0, r4
    7e5c:	f7ff f88e 	bl	6f7c <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    7e60:	b125      	cbz	r5, 7e6c <k_work_queue_start+0xbc>
    7e62:	6829      	ldr	r1, [r5, #0]
    7e64:	b111      	cbz	r1, 7e6c <k_work_queue_start+0xbc>
	return z_impl_k_thread_name_set(thread, str);
    7e66:	4620      	mov	r0, r4
    7e68:	f000 fe8e 	bl	8b88 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    7e6c:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    7e6e:	b008      	add	sp, #32
    7e70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7e74:	f000 be8b 	b.w	8b8e <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    7e78:	2101      	movs	r1, #1
    7e7a:	e7dd      	b.n	7e38 <k_work_queue_start+0x88>
    7e7c:	0000a4ee 	.word	0x0000a4ee
    7e80:	00009190 	.word	0x00009190
    7e84:	0000a487 	.word	0x0000a487
    7e88:	0000a4f4 	.word	0x0000a4f4
    7e8c:	0000a4fa 	.word	0x0000a4fa
    7e90:	000079f9 	.word	0x000079f9

00007e94 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    7e94:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    7e96:	4806      	ldr	r0, [pc, #24]	; (7eb0 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    7e98:	4a06      	ldr	r2, [pc, #24]	; (7eb4 <z_data_copy+0x20>)
    7e9a:	4907      	ldr	r1, [pc, #28]	; (7eb8 <z_data_copy+0x24>)
    7e9c:	1a12      	subs	r2, r2, r0
    7e9e:	f000 fb2c 	bl	84fa <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    7ea2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    7ea6:	4a05      	ldr	r2, [pc, #20]	; (7ebc <z_data_copy+0x28>)
    7ea8:	4905      	ldr	r1, [pc, #20]	; (7ec0 <z_data_copy+0x2c>)
    7eaa:	4806      	ldr	r0, [pc, #24]	; (7ec4 <z_data_copy+0x30>)
    7eac:	f000 bb25 	b.w	84fa <memcpy>
    7eb0:	20000000 	.word	0x20000000
    7eb4:	20000258 	.word	0x20000258
    7eb8:	0000a564 	.word	0x0000a564
    7ebc:	00000000 	.word	0x00000000
    7ec0:	0000a564 	.word	0x0000a564
    7ec4:	20000000 	.word	0x20000000

00007ec8 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    7ec8:	4a02      	ldr	r2, [pc, #8]	; (7ed4 <boot_banner+0xc>)
    7eca:	4903      	ldr	r1, [pc, #12]	; (7ed8 <boot_banner+0x10>)
    7ecc:	4803      	ldr	r0, [pc, #12]	; (7edc <boot_banner+0x14>)
    7ece:	f000 bac6 	b.w	845e <printk>
    7ed2:	bf00      	nop
    7ed4:	0000a031 	.word	0x0000a031
    7ed8:	0000a52e 	.word	0x0000a52e
    7edc:	0000a53d 	.word	0x0000a53d

00007ee0 <nrf_cc3xx_platform_init_no_rng>:
    7ee0:	b510      	push	{r4, lr}
    7ee2:	4c0a      	ldr	r4, [pc, #40]	; (7f0c <nrf_cc3xx_platform_init_no_rng+0x2c>)
    7ee4:	6823      	ldr	r3, [r4, #0]
    7ee6:	b11b      	cbz	r3, 7ef0 <nrf_cc3xx_platform_init_no_rng+0x10>
    7ee8:	2301      	movs	r3, #1
    7eea:	6023      	str	r3, [r4, #0]
    7eec:	2000      	movs	r0, #0
    7eee:	bd10      	pop	{r4, pc}
    7ef0:	f000 f8d6 	bl	80a0 <CC_LibInitNoRng>
    7ef4:	2800      	cmp	r0, #0
    7ef6:	d0f7      	beq.n	7ee8 <nrf_cc3xx_platform_init_no_rng+0x8>
    7ef8:	3801      	subs	r0, #1
    7efa:	2806      	cmp	r0, #6
    7efc:	d803      	bhi.n	7f06 <nrf_cc3xx_platform_init_no_rng+0x26>
    7efe:	4b04      	ldr	r3, [pc, #16]	; (7f10 <nrf_cc3xx_platform_init_no_rng+0x30>)
    7f00:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    7f04:	bd10      	pop	{r4, pc}
    7f06:	4803      	ldr	r0, [pc, #12]	; (7f14 <nrf_cc3xx_platform_init_no_rng+0x34>)
    7f08:	bd10      	pop	{r4, pc}
    7f0a:	bf00      	nop
    7f0c:	20000c90 	.word	0x20000c90
    7f10:	00009044 	.word	0x00009044
    7f14:	ffff8ffe 	.word	0xffff8ffe

00007f18 <nrf_cc3xx_platform_abort>:
    7f18:	f3bf 8f4f 	dsb	sy
    7f1c:	4905      	ldr	r1, [pc, #20]	; (7f34 <nrf_cc3xx_platform_abort+0x1c>)
    7f1e:	4b06      	ldr	r3, [pc, #24]	; (7f38 <nrf_cc3xx_platform_abort+0x20>)
    7f20:	68ca      	ldr	r2, [r1, #12]
    7f22:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    7f26:	4313      	orrs	r3, r2
    7f28:	60cb      	str	r3, [r1, #12]
    7f2a:	f3bf 8f4f 	dsb	sy
    7f2e:	bf00      	nop
    7f30:	e7fd      	b.n	7f2e <nrf_cc3xx_platform_abort+0x16>
    7f32:	bf00      	nop
    7f34:	e000ed00 	.word	0xe000ed00
    7f38:	05fa0004 	.word	0x05fa0004

00007f3c <CC_PalAbort>:
    7f3c:	b4f0      	push	{r4, r5, r6, r7}
    7f3e:	4f09      	ldr	r7, [pc, #36]	; (7f64 <CC_PalAbort+0x28>)
    7f40:	4e09      	ldr	r6, [pc, #36]	; (7f68 <CC_PalAbort+0x2c>)
    7f42:	4c0a      	ldr	r4, [pc, #40]	; (7f6c <CC_PalAbort+0x30>)
    7f44:	4a0a      	ldr	r2, [pc, #40]	; (7f70 <CC_PalAbort+0x34>)
    7f46:	4d0b      	ldr	r5, [pc, #44]	; (7f74 <CC_PalAbort+0x38>)
    7f48:	490b      	ldr	r1, [pc, #44]	; (7f78 <CC_PalAbort+0x3c>)
    7f4a:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    7f4e:	603b      	str	r3, [r7, #0]
    7f50:	6852      	ldr	r2, [r2, #4]
    7f52:	6033      	str	r3, [r6, #0]
    7f54:	6023      	str	r3, [r4, #0]
    7f56:	2400      	movs	r4, #0
    7f58:	602b      	str	r3, [r5, #0]
    7f5a:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
    7f5e:	bcf0      	pop	{r4, r5, r6, r7}
    7f60:	4710      	bx	r2
    7f62:	bf00      	nop
    7f64:	5002b400 	.word	0x5002b400
    7f68:	5002b404 	.word	0x5002b404
    7f6c:	5002b408 	.word	0x5002b408
    7f70:	2000018c 	.word	0x2000018c
    7f74:	5002b40c 	.word	0x5002b40c
    7f78:	5002a000 	.word	0x5002a000

00007f7c <nrf_cc3xx_platform_set_abort>:
    7f7c:	e9d0 1200 	ldrd	r1, r2, [r0]
    7f80:	4b01      	ldr	r3, [pc, #4]	; (7f88 <nrf_cc3xx_platform_set_abort+0xc>)
    7f82:	e9c3 1200 	strd	r1, r2, [r3]
    7f86:	4770      	bx	lr
    7f88:	2000018c 	.word	0x2000018c

00007f8c <mutex_free>:
    7f8c:	b510      	push	{r4, lr}
    7f8e:	4604      	mov	r4, r0
    7f90:	b130      	cbz	r0, 7fa0 <mutex_free+0x14>
    7f92:	6863      	ldr	r3, [r4, #4]
    7f94:	06db      	lsls	r3, r3, #27
    7f96:	d502      	bpl.n	7f9e <mutex_free+0x12>
    7f98:	2300      	movs	r3, #0
    7f9a:	6023      	str	r3, [r4, #0]
    7f9c:	6063      	str	r3, [r4, #4]
    7f9e:	bd10      	pop	{r4, pc}
    7fa0:	4b02      	ldr	r3, [pc, #8]	; (7fac <mutex_free+0x20>)
    7fa2:	4803      	ldr	r0, [pc, #12]	; (7fb0 <mutex_free+0x24>)
    7fa4:	685b      	ldr	r3, [r3, #4]
    7fa6:	4798      	blx	r3
    7fa8:	e7f3      	b.n	7f92 <mutex_free+0x6>
    7faa:	bf00      	nop
    7fac:	2000018c 	.word	0x2000018c
    7fb0:	00009060 	.word	0x00009060

00007fb4 <mutex_unlock>:
    7fb4:	b168      	cbz	r0, 7fd2 <mutex_unlock+0x1e>
    7fb6:	6843      	ldr	r3, [r0, #4]
    7fb8:	b13b      	cbz	r3, 7fca <mutex_unlock+0x16>
    7fba:	06db      	lsls	r3, r3, #27
    7fbc:	d507      	bpl.n	7fce <mutex_unlock+0x1a>
    7fbe:	f3bf 8f5f 	dmb	sy
    7fc2:	2300      	movs	r3, #0
    7fc4:	6003      	str	r3, [r0, #0]
    7fc6:	4618      	mov	r0, r3
    7fc8:	4770      	bx	lr
    7fca:	4803      	ldr	r0, [pc, #12]	; (7fd8 <mutex_unlock+0x24>)
    7fcc:	4770      	bx	lr
    7fce:	4803      	ldr	r0, [pc, #12]	; (7fdc <mutex_unlock+0x28>)
    7fd0:	4770      	bx	lr
    7fd2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    7fd6:	4770      	bx	lr
    7fd8:	ffff8fea 	.word	0xffff8fea
    7fdc:	ffff8fe9 	.word	0xffff8fe9

00007fe0 <mutex_init>:
    7fe0:	b510      	push	{r4, lr}
    7fe2:	4604      	mov	r4, r0
    7fe4:	b120      	cbz	r0, 7ff0 <mutex_init+0x10>
    7fe6:	2200      	movs	r2, #0
    7fe8:	2311      	movs	r3, #17
    7fea:	6022      	str	r2, [r4, #0]
    7fec:	6063      	str	r3, [r4, #4]
    7fee:	bd10      	pop	{r4, pc}
    7ff0:	4801      	ldr	r0, [pc, #4]	; (7ff8 <mutex_init+0x18>)
    7ff2:	f7ff ffa3 	bl	7f3c <CC_PalAbort>
    7ff6:	e7f6      	b.n	7fe6 <mutex_init+0x6>
    7ff8:	00009088 	.word	0x00009088

00007ffc <mutex_lock>:
    7ffc:	b1c0      	cbz	r0, 8030 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30>
    7ffe:	6843      	ldr	r3, [r0, #4]
    8000:	b1a3      	cbz	r3, 802c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c>
    8002:	06db      	lsls	r3, r3, #27
    8004:	d510      	bpl.n	8028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>
    8006:	2201      	movs	r2, #1
    8008:	f3bf 8f5b 	dmb	ish
    800c:	e850 3f00 	ldrex	r3, [r0]
    8010:	e840 2100 	strex	r1, r2, [r0]
    8014:	2900      	cmp	r1, #0
    8016:	d1f9      	bne.n	800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>
    8018:	f3bf 8f5b 	dmb	ish
    801c:	2b01      	cmp	r3, #1
    801e:	d0f3      	beq.n	8008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>
    8020:	f3bf 8f5f 	dmb	sy
    8024:	2000      	movs	r0, #0
    8026:	4770      	bx	lr
    8028:	4803      	ldr	r0, [pc, #12]	; (8038 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38>)
    802a:	4770      	bx	lr
    802c:	4803      	ldr	r0, [pc, #12]	; (803c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c>)
    802e:	4770      	bx	lr
    8030:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    8034:	4770      	bx	lr
    8036:	bf00      	nop
    8038:	ffff8fe9 	.word	0xffff8fe9
    803c:	ffff8fea 	.word	0xffff8fea

00008040 <nrf_cc3xx_platform_set_mutexes>:
    8040:	b570      	push	{r4, r5, r6, lr}
    8042:	e9d0 2300 	ldrd	r2, r3, [r0]
    8046:	4c13      	ldr	r4, [pc, #76]	; (8094 <nrf_cc3xx_platform_set_mutexes+0x54>)
    8048:	4d13      	ldr	r5, [pc, #76]	; (8098 <nrf_cc3xx_platform_set_mutexes+0x58>)
    804a:	e9c4 2300 	strd	r2, r3, [r4]
    804e:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
    8052:	e9c4 6302 	strd	r6, r3, [r4, #8]
    8056:	4b11      	ldr	r3, [pc, #68]	; (809c <nrf_cc3xx_platform_set_mutexes+0x5c>)
    8058:	6808      	ldr	r0, [r1, #0]
    805a:	6018      	str	r0, [r3, #0]
    805c:	6848      	ldr	r0, [r1, #4]
    805e:	6058      	str	r0, [r3, #4]
    8060:	6888      	ldr	r0, [r1, #8]
    8062:	6098      	str	r0, [r3, #8]
    8064:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
    8068:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    806c:	60de      	str	r6, [r3, #12]
    806e:	6118      	str	r0, [r3, #16]
    8070:	06cb      	lsls	r3, r1, #27
    8072:	d50d      	bpl.n	8090 <nrf_cc3xx_platform_set_mutexes+0x50>
    8074:	2300      	movs	r3, #0
    8076:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    807a:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    807e:	f505 7088 	add.w	r0, r5, #272	; 0x110
    8082:	4790      	blx	r2
    8084:	6823      	ldr	r3, [r4, #0]
    8086:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    808a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    808e:	4718      	bx	r3
    8090:	bd70      	pop	{r4, r5, r6, pc}
    8092:	bf00      	nop
    8094:	2000019c 	.word	0x2000019c
    8098:	20000cac 	.word	0x20000cac
    809c:	200001ac 	.word	0x200001ac

000080a0 <CC_LibInitNoRng>:
    80a0:	b510      	push	{r4, lr}
    80a2:	f000 f833 	bl	810c <CC_HalInit>
    80a6:	b120      	cbz	r0, 80b2 <CC_LibInitNoRng+0x12>
    80a8:	2403      	movs	r4, #3
    80aa:	f000 f867 	bl	817c <CC_PalTerminate>
    80ae:	4620      	mov	r0, r4
    80b0:	bd10      	pop	{r4, pc}
    80b2:	f000 f835 	bl	8120 <CC_PalInit>
    80b6:	b990      	cbnz	r0, 80de <CC_LibInitNoRng+0x3e>
    80b8:	f000 f8b0 	bl	821c <CC_PalPowerSaveModeSelect>
    80bc:	b990      	cbnz	r0, 80e4 <CC_LibInitNoRng+0x44>
    80be:	4b0f      	ldr	r3, [pc, #60]	; (80fc <CC_LibInitNoRng+0x5c>)
    80c0:	681b      	ldr	r3, [r3, #0]
    80c2:	0e1b      	lsrs	r3, r3, #24
    80c4:	2bf0      	cmp	r3, #240	; 0xf0
    80c6:	d108      	bne.n	80da <CC_LibInitNoRng+0x3a>
    80c8:	4a0d      	ldr	r2, [pc, #52]	; (8100 <CC_LibInitNoRng+0x60>)
    80ca:	4b0e      	ldr	r3, [pc, #56]	; (8104 <CC_LibInitNoRng+0x64>)
    80cc:	6812      	ldr	r2, [r2, #0]
    80ce:	429a      	cmp	r2, r3
    80d0:	d00a      	beq.n	80e8 <CC_LibInitNoRng+0x48>
    80d2:	2407      	movs	r4, #7
    80d4:	f000 f81c 	bl	8110 <CC_HalTerminate>
    80d8:	e7e7      	b.n	80aa <CC_LibInitNoRng+0xa>
    80da:	2406      	movs	r4, #6
    80dc:	e7fa      	b.n	80d4 <CC_LibInitNoRng+0x34>
    80de:	2404      	movs	r4, #4
    80e0:	4620      	mov	r0, r4
    80e2:	bd10      	pop	{r4, pc}
    80e4:	2400      	movs	r4, #0
    80e6:	e7f5      	b.n	80d4 <CC_LibInitNoRng+0x34>
    80e8:	2001      	movs	r0, #1
    80ea:	f000 f897 	bl	821c <CC_PalPowerSaveModeSelect>
    80ee:	4604      	mov	r4, r0
    80f0:	2800      	cmp	r0, #0
    80f2:	d1f7      	bne.n	80e4 <CC_LibInitNoRng+0x44>
    80f4:	4b04      	ldr	r3, [pc, #16]	; (8108 <CC_LibInitNoRng+0x68>)
    80f6:	6018      	str	r0, [r3, #0]
    80f8:	e7d9      	b.n	80ae <CC_LibInitNoRng+0xe>
    80fa:	bf00      	nop
    80fc:	5002b928 	.word	0x5002b928
    8100:	5002ba24 	.word	0x5002ba24
    8104:	20e00000 	.word	0x20e00000
    8108:	5002ba0c 	.word	0x5002ba0c

0000810c <CC_HalInit>:
    810c:	2000      	movs	r0, #0
    810e:	4770      	bx	lr

00008110 <CC_HalTerminate>:
    8110:	2000      	movs	r0, #0
    8112:	4770      	bx	lr

00008114 <CC_HalMaskInterrupt>:
    8114:	4b01      	ldr	r3, [pc, #4]	; (811c <CC_HalMaskInterrupt+0x8>)
    8116:	6018      	str	r0, [r3, #0]
    8118:	4770      	bx	lr
    811a:	bf00      	nop
    811c:	5002ba04 	.word	0x5002ba04

00008120 <CC_PalInit>:
    8120:	b510      	push	{r4, lr}
    8122:	4811      	ldr	r0, [pc, #68]	; (8168 <CC_PalInit+0x48>)
    8124:	f000 f848 	bl	81b8 <CC_PalMutexCreate>
    8128:	b100      	cbz	r0, 812c <CC_PalInit+0xc>
    812a:	bd10      	pop	{r4, pc}
    812c:	480f      	ldr	r0, [pc, #60]	; (816c <CC_PalInit+0x4c>)
    812e:	f000 f843 	bl	81b8 <CC_PalMutexCreate>
    8132:	2800      	cmp	r0, #0
    8134:	d1f9      	bne.n	812a <CC_PalInit+0xa>
    8136:	4c0e      	ldr	r4, [pc, #56]	; (8170 <CC_PalInit+0x50>)
    8138:	4620      	mov	r0, r4
    813a:	f000 f83d 	bl	81b8 <CC_PalMutexCreate>
    813e:	2800      	cmp	r0, #0
    8140:	d1f3      	bne.n	812a <CC_PalInit+0xa>
    8142:	4b0c      	ldr	r3, [pc, #48]	; (8174 <CC_PalInit+0x54>)
    8144:	480c      	ldr	r0, [pc, #48]	; (8178 <CC_PalInit+0x58>)
    8146:	601c      	str	r4, [r3, #0]
    8148:	f000 f836 	bl	81b8 <CC_PalMutexCreate>
    814c:	4601      	mov	r1, r0
    814e:	2800      	cmp	r0, #0
    8150:	d1eb      	bne.n	812a <CC_PalInit+0xa>
    8152:	f000 f82d 	bl	81b0 <CC_PalDmaInit>
    8156:	4604      	mov	r4, r0
    8158:	b108      	cbz	r0, 815e <CC_PalInit+0x3e>
    815a:	4620      	mov	r0, r4
    815c:	bd10      	pop	{r4, pc}
    815e:	f000 f83f 	bl	81e0 <CC_PalPowerSaveModeInit>
    8162:	4620      	mov	r0, r4
    8164:	e7fa      	b.n	815c <CC_PalInit+0x3c>
    8166:	bf00      	nop
    8168:	200001e4 	.word	0x200001e4
    816c:	200001d8 	.word	0x200001d8
    8170:	200001e0 	.word	0x200001e0
    8174:	200001e8 	.word	0x200001e8
    8178:	200001dc 	.word	0x200001dc

0000817c <CC_PalTerminate>:
    817c:	b508      	push	{r3, lr}
    817e:	4808      	ldr	r0, [pc, #32]	; (81a0 <CC_PalTerminate+0x24>)
    8180:	f000 f824 	bl	81cc <CC_PalMutexDestroy>
    8184:	4807      	ldr	r0, [pc, #28]	; (81a4 <CC_PalTerminate+0x28>)
    8186:	f000 f821 	bl	81cc <CC_PalMutexDestroy>
    818a:	4807      	ldr	r0, [pc, #28]	; (81a8 <CC_PalTerminate+0x2c>)
    818c:	f000 f81e 	bl	81cc <CC_PalMutexDestroy>
    8190:	4806      	ldr	r0, [pc, #24]	; (81ac <CC_PalTerminate+0x30>)
    8192:	f000 f81b 	bl	81cc <CC_PalMutexDestroy>
    8196:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    819a:	f000 b80b 	b.w	81b4 <CC_PalDmaTerminate>
    819e:	bf00      	nop
    81a0:	200001e4 	.word	0x200001e4
    81a4:	200001d8 	.word	0x200001d8
    81a8:	200001e0 	.word	0x200001e0
    81ac:	200001dc 	.word	0x200001dc

000081b0 <CC_PalDmaInit>:
    81b0:	2000      	movs	r0, #0
    81b2:	4770      	bx	lr

000081b4 <CC_PalDmaTerminate>:
    81b4:	4770      	bx	lr
    81b6:	bf00      	nop

000081b8 <CC_PalMutexCreate>:
    81b8:	b508      	push	{r3, lr}
    81ba:	4b03      	ldr	r3, [pc, #12]	; (81c8 <CC_PalMutexCreate+0x10>)
    81bc:	6802      	ldr	r2, [r0, #0]
    81be:	681b      	ldr	r3, [r3, #0]
    81c0:	6810      	ldr	r0, [r2, #0]
    81c2:	4798      	blx	r3
    81c4:	2000      	movs	r0, #0
    81c6:	bd08      	pop	{r3, pc}
    81c8:	2000019c 	.word	0x2000019c

000081cc <CC_PalMutexDestroy>:
    81cc:	b508      	push	{r3, lr}
    81ce:	4b03      	ldr	r3, [pc, #12]	; (81dc <CC_PalMutexDestroy+0x10>)
    81d0:	6802      	ldr	r2, [r0, #0]
    81d2:	685b      	ldr	r3, [r3, #4]
    81d4:	6810      	ldr	r0, [r2, #0]
    81d6:	4798      	blx	r3
    81d8:	2000      	movs	r0, #0
    81da:	bd08      	pop	{r3, pc}
    81dc:	2000019c 	.word	0x2000019c

000081e0 <CC_PalPowerSaveModeInit>:
    81e0:	b570      	push	{r4, r5, r6, lr}
    81e2:	4c09      	ldr	r4, [pc, #36]	; (8208 <CC_PalPowerSaveModeInit+0x28>)
    81e4:	4d09      	ldr	r5, [pc, #36]	; (820c <CC_PalPowerSaveModeInit+0x2c>)
    81e6:	6920      	ldr	r0, [r4, #16]
    81e8:	68ab      	ldr	r3, [r5, #8]
    81ea:	4798      	blx	r3
    81ec:	b118      	cbz	r0, 81f6 <CC_PalPowerSaveModeInit+0x16>
    81ee:	4b08      	ldr	r3, [pc, #32]	; (8210 <CC_PalPowerSaveModeInit+0x30>)
    81f0:	4808      	ldr	r0, [pc, #32]	; (8214 <CC_PalPowerSaveModeInit+0x34>)
    81f2:	685b      	ldr	r3, [r3, #4]
    81f4:	4798      	blx	r3
    81f6:	4a08      	ldr	r2, [pc, #32]	; (8218 <CC_PalPowerSaveModeInit+0x38>)
    81f8:	68eb      	ldr	r3, [r5, #12]
    81fa:	6920      	ldr	r0, [r4, #16]
    81fc:	2100      	movs	r1, #0
    81fe:	6011      	str	r1, [r2, #0]
    8200:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8204:	4718      	bx	r3
    8206:	bf00      	nop
    8208:	200001ac 	.word	0x200001ac
    820c:	2000019c 	.word	0x2000019c
    8210:	2000018c 	.word	0x2000018c
    8214:	000090ac 	.word	0x000090ac
    8218:	20000ca4 	.word	0x20000ca4

0000821c <CC_PalPowerSaveModeSelect>:
    821c:	b570      	push	{r4, r5, r6, lr}
    821e:	4d1a      	ldr	r5, [pc, #104]	; (8288 <CC_PalPowerSaveModeSelect+0x6c>)
    8220:	4e1a      	ldr	r6, [pc, #104]	; (828c <CC_PalPowerSaveModeSelect+0x70>)
    8222:	4604      	mov	r4, r0
    8224:	68b2      	ldr	r2, [r6, #8]
    8226:	6928      	ldr	r0, [r5, #16]
    8228:	4790      	blx	r2
    822a:	b9f0      	cbnz	r0, 826a <CC_PalPowerSaveModeSelect+0x4e>
    822c:	b15c      	cbz	r4, 8246 <CC_PalPowerSaveModeSelect+0x2a>
    822e:	4c18      	ldr	r4, [pc, #96]	; (8290 <CC_PalPowerSaveModeSelect+0x74>)
    8230:	6823      	ldr	r3, [r4, #0]
    8232:	b1ab      	cbz	r3, 8260 <CC_PalPowerSaveModeSelect+0x44>
    8234:	2b01      	cmp	r3, #1
    8236:	d01a      	beq.n	826e <CC_PalPowerSaveModeSelect+0x52>
    8238:	3b01      	subs	r3, #1
    823a:	6023      	str	r3, [r4, #0]
    823c:	6928      	ldr	r0, [r5, #16]
    823e:	68f3      	ldr	r3, [r6, #12]
    8240:	4798      	blx	r3
    8242:	2000      	movs	r0, #0
    8244:	bd70      	pop	{r4, r5, r6, pc}
    8246:	4c12      	ldr	r4, [pc, #72]	; (8290 <CC_PalPowerSaveModeSelect+0x74>)
    8248:	6821      	ldr	r1, [r4, #0]
    824a:	b939      	cbnz	r1, 825c <CC_PalPowerSaveModeSelect+0x40>
    824c:	4b11      	ldr	r3, [pc, #68]	; (8294 <CC_PalPowerSaveModeSelect+0x78>)
    824e:	4a12      	ldr	r2, [pc, #72]	; (8298 <CC_PalPowerSaveModeSelect+0x7c>)
    8250:	2001      	movs	r0, #1
    8252:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    8256:	6813      	ldr	r3, [r2, #0]
    8258:	2b00      	cmp	r3, #0
    825a:	d1fc      	bne.n	8256 <CC_PalPowerSaveModeSelect+0x3a>
    825c:	3101      	adds	r1, #1
    825e:	6021      	str	r1, [r4, #0]
    8260:	68f3      	ldr	r3, [r6, #12]
    8262:	6928      	ldr	r0, [r5, #16]
    8264:	4798      	blx	r3
    8266:	2000      	movs	r0, #0
    8268:	bd70      	pop	{r4, r5, r6, pc}
    826a:	480c      	ldr	r0, [pc, #48]	; (829c <CC_PalPowerSaveModeSelect+0x80>)
    826c:	bd70      	pop	{r4, r5, r6, pc}
    826e:	4a0a      	ldr	r2, [pc, #40]	; (8298 <CC_PalPowerSaveModeSelect+0x7c>)
    8270:	6813      	ldr	r3, [r2, #0]
    8272:	2b00      	cmp	r3, #0
    8274:	d1fc      	bne.n	8270 <CC_PalPowerSaveModeSelect+0x54>
    8276:	4a07      	ldr	r2, [pc, #28]	; (8294 <CC_PalPowerSaveModeSelect+0x78>)
    8278:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    827c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    8280:	f7ff ff48 	bl	8114 <CC_HalMaskInterrupt>
    8284:	6823      	ldr	r3, [r4, #0]
    8286:	e7d7      	b.n	8238 <CC_PalPowerSaveModeSelect+0x1c>
    8288:	200001ac 	.word	0x200001ac
    828c:	2000019c 	.word	0x2000019c
    8290:	20000ca4 	.word	0x20000ca4
    8294:	5002a000 	.word	0x5002a000
    8298:	5002b910 	.word	0x5002b910
    829c:	ffff8fe9 	.word	0xffff8fe9

000082a0 <gpio_add_callback>:
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    82a0:	6883      	ldr	r3, [r0, #8]
    82a2:	69db      	ldr	r3, [r3, #28]
    82a4:	b10b      	cbz	r3, 82aa <gpio_add_callback+0xa>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    82a6:	2201      	movs	r2, #1
    82a8:	4718      	bx	r3
}
    82aa:	f06f 0085 	mvn.w	r0, #133	; 0x85
    82ae:	4770      	bx	lr

000082b0 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    82b0:	4040      	eors	r0, r0
    82b2:	f380 8811 	msr	BASEPRI, r0
    82b6:	f04f 0004 	mov.w	r0, #4
    82ba:	df02      	svc	2
}
    82bc:	4770      	bx	lr

000082be <encode_uint>:
{
    82be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    82c2:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    82c4:	78d3      	ldrb	r3, [r2, #3]
{
    82c6:	4614      	mov	r4, r2
	switch (specifier) {
    82c8:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    82ca:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
    82ce:	4606      	mov	r6, r0
    82d0:	460f      	mov	r7, r1
    82d2:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    82d4:	d02d      	beq.n	8332 <encode_uint+0x74>
    82d6:	d828      	bhi.n	832a <encode_uint+0x6c>
		return 16;
    82d8:	2b58      	cmp	r3, #88	; 0x58
    82da:	bf14      	ite	ne
    82dc:	250a      	movne	r5, #10
    82de:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
    82e0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
    82e4:	46aa      	mov	sl, r5
    82e6:	f04f 0b00 	mov.w	fp, #0
    82ea:	4652      	mov	r2, sl
    82ec:	465b      	mov	r3, fp
    82ee:	4630      	mov	r0, r6
    82f0:	4639      	mov	r1, r7
    82f2:	f7f7 ff05 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    82f6:	2a09      	cmp	r2, #9
    82f8:	b2d3      	uxtb	r3, r2
    82fa:	d81f      	bhi.n	833c <encode_uint+0x7e>
    82fc:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    82fe:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8300:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    8302:	bf08      	it	eq
    8304:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8306:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    830a:	d301      	bcc.n	8310 <encode_uint+0x52>
    830c:	45c8      	cmp	r8, r9
    830e:	d812      	bhi.n	8336 <encode_uint+0x78>
	if (conv->flag_hash) {
    8310:	7823      	ldrb	r3, [r4, #0]
    8312:	069b      	lsls	r3, r3, #26
    8314:	d505      	bpl.n	8322 <encode_uint+0x64>
		if (radix == 8) {
    8316:	2d08      	cmp	r5, #8
    8318:	d116      	bne.n	8348 <encode_uint+0x8a>
			conv->altform_0 = true;
    831a:	78a3      	ldrb	r3, [r4, #2]
    831c:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    8320:	70a3      	strb	r3, [r4, #2]
}
    8322:	4640      	mov	r0, r8
    8324:	b003      	add	sp, #12
    8326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    832a:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    832e:	2b70      	cmp	r3, #112	; 0x70
    8330:	e7d3      	b.n	82da <encode_uint+0x1c>
	switch (specifier) {
    8332:	2508      	movs	r5, #8
    8334:	e7d4      	b.n	82e0 <encode_uint+0x22>
		value /= radix;
    8336:	4606      	mov	r6, r0
    8338:	460f      	mov	r7, r1
    833a:	e7d6      	b.n	82ea <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    833c:	9a01      	ldr	r2, [sp, #4]
    833e:	2a19      	cmp	r2, #25
    8340:	bf94      	ite	ls
    8342:	3337      	addls	r3, #55	; 0x37
    8344:	3357      	addhi	r3, #87	; 0x57
    8346:	e7da      	b.n	82fe <encode_uint+0x40>
		} else if (radix == 16) {
    8348:	2d10      	cmp	r5, #16
    834a:	d1ea      	bne.n	8322 <encode_uint+0x64>
			conv->altform_0c = true;
    834c:	78a3      	ldrb	r3, [r4, #2]
    834e:	f043 0310 	orr.w	r3, r3, #16
    8352:	e7e5      	b.n	8320 <encode_uint+0x62>

00008354 <outs>:
{
    8354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8358:	4607      	mov	r7, r0
    835a:	4688      	mov	r8, r1
    835c:	4615      	mov	r5, r2
    835e:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    8360:	4614      	mov	r4, r2
    8362:	42b4      	cmp	r4, r6
    8364:	eba4 0005 	sub.w	r0, r4, r5
    8368:	d302      	bcc.n	8370 <outs+0x1c>
    836a:	b93e      	cbnz	r6, 837c <outs+0x28>
    836c:	7823      	ldrb	r3, [r4, #0]
    836e:	b12b      	cbz	r3, 837c <outs+0x28>
		int rc = out((int)*sp++, ctx);
    8370:	f814 0b01 	ldrb.w	r0, [r4], #1
    8374:	4641      	mov	r1, r8
    8376:	47b8      	blx	r7
		if (rc < 0) {
    8378:	2800      	cmp	r0, #0
    837a:	daf2      	bge.n	8362 <outs+0xe>
}
    837c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008380 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    8380:	4770      	bx	lr

00008382 <sys_notify_validate>:
	if (notify == NULL) {
    8382:	4603      	mov	r3, r0
    8384:	b140      	cbz	r0, 8398 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    8386:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    8388:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
    838c:	2a02      	cmp	r2, #2
    838e:	d006      	beq.n	839e <sys_notify_validate+0x1c>
    8390:	2a03      	cmp	r2, #3
    8392:	d004      	beq.n	839e <sys_notify_validate+0x1c>
    8394:	2a01      	cmp	r2, #1
    8396:	d005      	beq.n	83a4 <sys_notify_validate+0x22>
		return -EINVAL;
    8398:	f06f 0015 	mvn.w	r0, #21
}
    839c:	4770      	bx	lr
		if (notify->method.signal == NULL) {
    839e:	681a      	ldr	r2, [r3, #0]
    83a0:	2a00      	cmp	r2, #0
    83a2:	d0f9      	beq.n	8398 <sys_notify_validate+0x16>
		notify->result = 0;
    83a4:	2000      	movs	r0, #0
    83a6:	6098      	str	r0, [r3, #8]
    83a8:	4770      	bx	lr

000083aa <abort_function>:
{
    83aa:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    83ac:	2000      	movs	r0, #0
    83ae:	f7f9 fc25 	bl	1bfc <sys_reboot>

000083b2 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    83b2:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    83b4:	f013 0307 	ands.w	r3, r3, #7
    83b8:	d105      	bne.n	83c6 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    83ba:	6803      	ldr	r3, [r0, #0]
    83bc:	2b00      	cmp	r3, #0
		evt = EVT_START;
    83be:	bf0c      	ite	eq
    83c0:	2000      	moveq	r0, #0
    83c2:	2003      	movne	r0, #3
    83c4:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    83c6:	2b02      	cmp	r3, #2
    83c8:	d105      	bne.n	83d6 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    83ca:	8bc3      	ldrh	r3, [r0, #30]
    83cc:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    83ce:	bf14      	ite	ne
    83d0:	2000      	movne	r0, #0
    83d2:	2004      	moveq	r0, #4
    83d4:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    83d6:	2b01      	cmp	r3, #1
    83d8:	d105      	bne.n	83e6 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    83da:	6803      	ldr	r3, [r0, #0]
    83dc:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    83de:	bf0c      	ite	eq
    83e0:	2000      	moveq	r0, #0
    83e2:	2005      	movne	r0, #5
    83e4:	4770      	bx	lr
	int evt = EVT_NOP;
    83e6:	2000      	movs	r0, #0
}
    83e8:	4770      	bx	lr

000083ea <notify_one>:
{
    83ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    83ee:	460d      	mov	r5, r1
    83f0:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    83f2:	4619      	mov	r1, r3
    83f4:	1d28      	adds	r0, r5, #4
{
    83f6:	4690      	mov	r8, r2
    83f8:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    83fa:	f7f8 fedf 	bl	11bc <sys_notify_finalize>
	if (cb) {
    83fe:	4604      	mov	r4, r0
    8400:	b138      	cbz	r0, 8412 <notify_one+0x28>
		cb(mgr, cli, state, res);
    8402:	4633      	mov	r3, r6
    8404:	4642      	mov	r2, r8
    8406:	4629      	mov	r1, r5
    8408:	4638      	mov	r0, r7
    840a:	46a4      	mov	ip, r4
}
    840c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    8410:	4760      	bx	ip
}
    8412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008416 <validate_args>:
{
    8416:	b510      	push	{r4, lr}
    8418:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    841a:	b140      	cbz	r0, 842e <validate_args+0x18>
    841c:	b139      	cbz	r1, 842e <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    841e:	1d08      	adds	r0, r1, #4
    8420:	f7ff ffaf 	bl	8382 <sys_notify_validate>
	if ((rv == 0)
    8424:	b928      	cbnz	r0, 8432 <validate_args+0x1c>
	    && ((cli->notify.flags
    8426:	68a3      	ldr	r3, [r4, #8]
    8428:	f033 0303 	bics.w	r3, r3, #3
    842c:	d001      	beq.n	8432 <validate_args+0x1c>
		rv = -EINVAL;
    842e:	f06f 0015 	mvn.w	r0, #21
}
    8432:	bd10      	pop	{r4, pc}

00008434 <onoff_manager_init>:
{
    8434:	b538      	push	{r3, r4, r5, lr}
    8436:	460c      	mov	r4, r1
	if ((mgr == NULL)
    8438:	4605      	mov	r5, r0
    843a:	b158      	cbz	r0, 8454 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    843c:	b151      	cbz	r1, 8454 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    843e:	680b      	ldr	r3, [r1, #0]
    8440:	b143      	cbz	r3, 8454 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    8442:	684b      	ldr	r3, [r1, #4]
    8444:	b133      	cbz	r3, 8454 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    8446:	2220      	movs	r2, #32
    8448:	2100      	movs	r1, #0
    844a:	f000 f861 	bl	8510 <memset>
    844e:	612c      	str	r4, [r5, #16]
	return 0;
    8450:	2000      	movs	r0, #0
}
    8452:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    8454:	f06f 0015 	mvn.w	r0, #21
    8458:	e7fb      	b.n	8452 <onoff_manager_init+0x1e>

0000845a <arch_printk_char_out>:
}
    845a:	2000      	movs	r0, #0
    845c:	4770      	bx	lr

0000845e <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
    845e:	b40f      	push	{r0, r1, r2, r3}
    8460:	b507      	push	{r0, r1, r2, lr}
    8462:	a904      	add	r1, sp, #16
    8464:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    8468:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    846a:	f7f9 fbb9 	bl	1be0 <vprintk>
	}
	va_end(ap);
}
    846e:	b003      	add	sp, #12
    8470:	f85d eb04 	ldr.w	lr, [sp], #4
    8474:	b004      	add	sp, #16
    8476:	4770      	bx	lr

00008478 <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    8478:	2200      	movs	r2, #0
    847a:	e9c0 2200 	strd	r2, r2, [r0]
    847e:	6082      	str	r2, [r0, #8]
}
    8480:	4770      	bx	lr

00008482 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    8482:	4604      	mov	r4, r0
    8484:	b508      	push	{r3, lr}
    8486:	4608      	mov	r0, r1
    8488:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    848a:	461a      	mov	r2, r3
    848c:	47a0      	blx	r4
	return z_impl_z_current_get();
    848e:	f7fe faf5 	bl	6a7c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    8492:	f7f9 feef 	bl	2274 <z_impl_k_thread_abort>

00008496 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    8496:	f7fc bd31 	b.w	4efc <z_fatal_error>

0000849a <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    849a:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    849c:	6800      	ldr	r0, [r0, #0]
    849e:	f7fc bd2d 	b.w	4efc <z_fatal_error>

000084a2 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    84a2:	2100      	movs	r1, #0
    84a4:	2001      	movs	r0, #1
    84a6:	f7ff bff6 	b.w	8496 <z_arm_fatal_error>

000084aa <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    84aa:	b508      	push	{r3, lr}
	handler();
    84ac:	f7f9 fbf8 	bl	1ca0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    84b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    84b4:	f7f9 bd06 	b.w	1ec4 <z_arm_exc_exit>

000084b8 <_stdout_hook_default>:
}
    84b8:	f04f 30ff 	mov.w	r0, #4294967295
    84bc:	4770      	bx	lr

000084be <fputc>:
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&c, *(uintptr_t *)&stream, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
    84be:	f7fa b829 	b.w	2514 <z_impl_zephyr_fputc>

000084c2 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    84c2:	4603      	mov	r3, r0
	size_t n = 0;
    84c4:	2000      	movs	r0, #0

	while (*s != '\0') {
    84c6:	5c1a      	ldrb	r2, [r3, r0]
    84c8:	b902      	cbnz	r2, 84cc <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    84ca:	4770      	bx	lr
		n++;
    84cc:	3001      	adds	r0, #1
    84ce:	e7fa      	b.n	84c6 <strlen+0x4>

000084d0 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    84d0:	4603      	mov	r3, r0
	size_t n = 0;
    84d2:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    84d4:	5c1a      	ldrb	r2, [r3, r0]
    84d6:	b10a      	cbz	r2, 84dc <strnlen+0xc>
    84d8:	4288      	cmp	r0, r1
    84da:	d100      	bne.n	84de <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    84dc:	4770      	bx	lr
		n++;
    84de:	3001      	adds	r0, #1
    84e0:	e7f8      	b.n	84d4 <strnlen+0x4>

000084e2 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    84e2:	1e43      	subs	r3, r0, #1
    84e4:	3901      	subs	r1, #1
    84e6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    84ea:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    84ee:	4282      	cmp	r2, r0
    84f0:	d101      	bne.n	84f6 <strcmp+0x14>
    84f2:	2a00      	cmp	r2, #0
    84f4:	d1f7      	bne.n	84e6 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    84f6:	1a10      	subs	r0, r2, r0
    84f8:	4770      	bx	lr

000084fa <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    84fa:	b510      	push	{r4, lr}
    84fc:	1e43      	subs	r3, r0, #1
    84fe:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    8500:	4291      	cmp	r1, r2
    8502:	d100      	bne.n	8506 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    8504:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    8506:	f811 4b01 	ldrb.w	r4, [r1], #1
    850a:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    850e:	e7f7      	b.n	8500 <memcpy+0x6>

00008510 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    8510:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    8512:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    8514:	4603      	mov	r3, r0
	while (n > 0) {
    8516:	4293      	cmp	r3, r2
    8518:	d100      	bne.n	851c <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    851a:	4770      	bx	lr
		*(d_byte++) = c_byte;
    851c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    8520:	e7f9      	b.n	8516 <memset+0x6>

00008522 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    8522:	b084      	sub	sp, #16
    8524:	ab04      	add	r3, sp, #16
    8526:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    852a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    852e:	2b06      	cmp	r3, #6
    8530:	d108      	bne.n	8544 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    8532:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8536:	2201      	movs	r2, #1
    8538:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    853c:	f3bf 8f4f 	dsb	sy
        __WFE();
    8540:	bf20      	wfe
    while (true)
    8542:	e7fd      	b.n	8540 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    8544:	b004      	add	sp, #16
    8546:	4770      	bx	lr

00008548 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    8548:	b084      	sub	sp, #16
    854a:	ab04      	add	r3, sp, #16
    854c:	e903 0007 	stmdb	r3, {r0, r1, r2}
    8550:	2300      	movs	r3, #0
    8552:	f383 8811 	msr	BASEPRI, r3
    8556:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    855a:	b004      	add	sp, #16
    855c:	4770      	bx	lr

0000855e <adc_context_on_timer_expired>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    855e:	f1a0 0308 	sub.w	r3, r0, #8
    8562:	f3bf 8f5b 	dmb	ish
    8566:	e853 2f00 	ldrex	r2, [r3]
    856a:	1c51      	adds	r1, r2, #1
    856c:	e843 1c00 	strex	ip, r1, [r3]
    8570:	f1bc 0f00 	cmp.w	ip, #0
    8574:	d1f7      	bne.n	8566 <adc_context_on_timer_expired+0x8>
    8576:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
    857a:	b91a      	cbnz	r2, 8584 <adc_context_on_timer_expired+0x26>
		adc_context_start_sampling(ctx);
    857c:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    8580:	f7fa b826 	b.w	25d0 <adc_context_start_sampling.isra.0>
		ctx->status = -EBUSY;
    8584:	f06f 030f 	mvn.w	r3, #15
    8588:	6683      	str	r3, [r0, #104]	; 0x68
}
    858a:	4770      	bx	lr

0000858c <set_starting_state>:
{
    858c:	b510      	push	{r4, lr}
	__asm__ volatile(
    858e:	f04f 0320 	mov.w	r3, #32
    8592:	f3ef 8211 	mrs	r2, BASEPRI
    8596:	f383 8812 	msr	BASEPRI_MAX, r3
    859a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    859e:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    85a0:	f003 0407 	and.w	r4, r3, #7
    85a4:	2c01      	cmp	r4, #1
    85a6:	d106      	bne.n	85b6 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    85a8:	6001      	str	r1, [r0, #0]
	int err = 0;
    85aa:	2000      	movs	r0, #0
	__asm__ volatile(
    85ac:	f382 8811 	msr	BASEPRI, r2
    85b0:	f3bf 8f6f 	isb	sy
}
    85b4:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    85b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    85ba:	428b      	cmp	r3, r1
		err = -EALREADY;
    85bc:	bf14      	ite	ne
    85be:	f04f 30ff 	movne.w	r0, #4294967295
    85c2:	f06f 0077 	mvneq.w	r0, #119	; 0x77
    85c6:	e7f1      	b.n	85ac <set_starting_state+0x20>

000085c8 <set_on_state>:
	__asm__ volatile(
    85c8:	f04f 0320 	mov.w	r3, #32
    85cc:	f3ef 8211 	mrs	r2, BASEPRI
    85d0:	f383 8812 	msr	BASEPRI_MAX, r3
    85d4:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    85d8:	6803      	ldr	r3, [r0, #0]
    85da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    85de:	f043 0302 	orr.w	r3, r3, #2
    85e2:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    85e4:	f382 8811 	msr	BASEPRI, r2
    85e8:	f3bf 8f6f 	isb	sy
}
    85ec:	4770      	bx	lr

000085ee <onoff_started_callback>:
	return &data->mgr[type];
    85ee:	6900      	ldr	r0, [r0, #16]
    85f0:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    85f2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    85f6:	2100      	movs	r1, #0
    85f8:	4710      	bx	r2

000085fa <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    85fa:	2000      	movs	r0, #0
    85fc:	f7fb bbb4 	b.w	3d68 <nrfx_clock_start>

00008600 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    8600:	2000      	movs	r0, #0
    8602:	f7fb bc05 	b.w	3e10 <nrfx_clock_stop>

00008606 <api_stop>:
	return stop(dev, subsys, CTX_API);
    8606:	2280      	movs	r2, #128	; 0x80
    8608:	f7fa ba48 	b.w	2a9c <stop>

0000860c <blocking_start_callback>:
{
    860c:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    860e:	f7fe bb69 	b.w	6ce4 <z_impl_k_sem_give>

00008612 <api_start>:
{
    8612:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8616:	b2cd      	uxtb	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
    8618:	270c      	movs	r7, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    861a:	6904      	ldr	r4, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
    861c:	436f      	muls	r7, r5
{
    861e:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    8620:	f107 0048 	add.w	r0, r7, #72	; 0x48
    8624:	2180      	movs	r1, #128	; 0x80
    8626:	4420      	add	r0, r4
{
    8628:	4690      	mov	r8, r2
    862a:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
    862c:	f7ff ffae 	bl	858c <set_starting_state>
	if (err < 0) {
    8630:	2800      	cmp	r0, #0
    8632:	db07      	blt.n	8644 <api_start+0x32>
	subdata->cb = cb;
    8634:	443c      	add	r4, r7
	subdata->user_data = user_data;
    8636:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    863a:	6873      	ldr	r3, [r6, #4]
    863c:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
    8640:	4798      	blx	r3
	return 0;
    8642:	2000      	movs	r0, #0
}
    8644:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00008648 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8648:	6843      	ldr	r3, [r0, #4]
    864a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    864c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    8650:	600b      	str	r3, [r1, #0]
}
    8652:	2000      	movs	r0, #0
    8654:	4770      	bx	lr

00008656 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8656:	6843      	ldr	r3, [r0, #4]
    8658:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    865a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    865e:	4042      	eors	r2, r0
    8660:	400a      	ands	r2, r1
    8662:	4042      	eors	r2, r0
    p_reg->OUT = value;
    8664:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    8668:	2000      	movs	r0, #0
    866a:	4770      	bx	lr

0000866c <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    866c:	6843      	ldr	r3, [r0, #4]
    866e:	685b      	ldr	r3, [r3, #4]
}
    8670:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    8672:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    8676:	4770      	bx	lr

00008678 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8678:	6843      	ldr	r3, [r0, #4]
    867a:	685b      	ldr	r3, [r3, #4]
}
    867c:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    867e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    8682:	4770      	bx	lr

00008684 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8684:	6843      	ldr	r3, [r0, #4]
    8686:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    8688:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    868c:	404b      	eors	r3, r1
    p_reg->OUT = value;
    868e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    8692:	2000      	movs	r0, #0
    8694:	4770      	bx	lr

00008696 <any_other_channel_is_active>:
{
    8696:	b530      	push	{r4, r5, lr}
    8698:	2300      	movs	r3, #0
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
    869a:	1d0c      	adds	r4, r1, #4
		if (i != channel && pwm_channel_is_active(i, data)) {
    869c:	b2da      	uxtb	r2, r3
    869e:	4282      	cmp	r2, r0
    86a0:	d007      	beq.n	86b2 <any_other_channel_is_active+0x1c>
	uint16_t pulse_cycle =
    86a2:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
    86a6:	f3c2 020e 	ubfx	r2, r2, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    86aa:	b112      	cbz	r2, 86b2 <any_other_channel_is_active+0x1c>
    86ac:	898d      	ldrh	r5, [r1, #12]
    86ae:	4295      	cmp	r5, r2
    86b0:	d804      	bhi.n	86bc <any_other_channel_is_active+0x26>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
    86b2:	3301      	adds	r3, #1
    86b4:	2b04      	cmp	r3, #4
    86b6:	d1f1      	bne.n	869c <any_other_channel_is_active+0x6>
	return false;
    86b8:	2000      	movs	r0, #0
}
    86ba:	bd30      	pop	{r4, r5, pc}
			return true;
    86bc:	2001      	movs	r0, #1
    86be:	e7fc      	b.n	86ba <any_other_channel_is_active+0x24>

000086c0 <pwm_nrfx_pin_set>:
{
    86c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    86c4:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
	const struct pwm_nrfx_config *config = dev->config;
    86c8:	6847      	ldr	r7, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;
    86ca:	6904      	ldr	r4, [r0, #16]
{
    86cc:	4688      	mov	r8, r1
    86ce:	4616      	mov	r6, r2
    86d0:	4699      	mov	r9, r3
	if (flags) {
    86d2:	2d00      	cmp	r5, #0
    86d4:	d140      	bne.n	8758 <pwm_nrfx_pin_set+0x98>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
    86d6:	1dfa      	adds	r2, r7, #7
		if (output_pins[i] != NRFX_PWM_PIN_NOT_USED
    86d8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    86dc:	2bff      	cmp	r3, #255	; 0xff
    86de:	d003      	beq.n	86e8 <pwm_nrfx_pin_set+0x28>
		    && (pwm == (output_pins[i] & PWM_NRFX_CH_PIN_MASK))) {
    86e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    86e4:	4598      	cmp	r8, r3
    86e6:	d03a      	beq.n	875e <pwm_nrfx_pin_set+0x9e>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
    86e8:	3501      	adds	r5, #1
    86ea:	b2ed      	uxtb	r5, r5
    86ec:	2d04      	cmp	r5, #4
    86ee:	d1f3      	bne.n	86d8 <pwm_nrfx_pin_set+0x18>
		return -EINVAL;
    86f0:	f06f 0015 	mvn.w	r0, #21
    86f4:	e009      	b.n	870a <pwm_nrfx_pin_set+0x4a>
	was_stopped = !pwm_channel_is_active(channel, data) &&
    86f6:	2000      	movs	r0, #0
    86f8:	e042      	b.n	8780 <pwm_nrfx_pin_set+0xc0>
		countertop >>= 1;
    86fa:	3301      	adds	r3, #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
    86fc:	2b08      	cmp	r3, #8
		countertop >>= 1;
    86fe:	ea4f 0252 	mov.w	r2, r2, lsr #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
    8702:	d158      	bne.n	87b6 <pwm_nrfx_pin_set+0xf6>
    8704:	e7f4      	b.n	86f0 <pwm_nrfx_pin_set+0x30>
		if (was_stopped) {
    8706:	b9d0      	cbnz	r0, 873e <pwm_nrfx_pin_set+0x7e>
	return 0;
    8708:	2000      	movs	r0, #0
}
    870a:	b003      	add	sp, #12
    870c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			&& channel_inverted_state;
    8710:	454e      	cmp	r6, r9
    8712:	d87f      	bhi.n	8814 <pwm_nrfx_pin_set+0x154>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8714:	a801      	add	r0, sp, #4
    8716:	f8cd 8004 	str.w	r8, [sp, #4]
    871a:	f7fa fdf7 	bl	330c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    871e:	9a01      	ldr	r2, [sp, #4]
    8720:	2301      	movs	r3, #1
    8722:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    8724:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
		if (!any_other_channel_is_active(channel, data)) {
    8728:	4621      	mov	r1, r4
    872a:	4628      	mov	r0, r5
    872c:	f7ff ffb3 	bl	8696 <any_other_channel_is_active>
    8730:	2800      	cmp	r0, #0
    8732:	d1e9      	bne.n	8708 <pwm_nrfx_pin_set+0x48>
			nrfx_pwm_stop(&config->pwm, false);
    8734:	4601      	mov	r1, r0
    8736:	4638      	mov	r0, r7
    8738:	f7fc fa54 	bl	4be4 <nrfx_pwm_stop>
    873c:	e7e4      	b.n	8708 <pwm_nrfx_pin_set+0x48>
			while (!nrfx_pwm_is_stopped(&config->pwm)) {
    873e:	4638      	mov	r0, r7
    8740:	f7fc fa22 	bl	4b88 <nrfx_pwm_is_stopped>
    8744:	2800      	cmp	r0, #0
    8746:	d0fa      	beq.n	873e <pwm_nrfx_pin_set+0x7e>
			nrfx_pwm_simple_playback(&config->pwm,
    8748:	2302      	movs	r3, #2
    874a:	2201      	movs	r2, #1
    874c:	f107 0118 	add.w	r1, r7, #24
    8750:	4638      	mov	r0, r7
    8752:	f7fc f9a5 	bl	4aa0 <nrfx_pwm_simple_playback>
    8756:	e7d7      	b.n	8708 <pwm_nrfx_pin_set+0x48>
		return -ENOTSUP;
    8758:	f06f 0085 	mvn.w	r0, #133	; 0x85
    875c:	e7d5      	b.n	870a <pwm_nrfx_pin_set+0x4a>
	uint16_t pulse_cycle =
    875e:	eb04 0a45 	add.w	sl, r4, r5, lsl #1
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
    8762:	f8ba b004 	ldrh.w	fp, [sl, #4]
	uint16_t pulse_cycle =
    8766:	f3cb 030e 	ubfx	r3, fp, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    876a:	b113      	cbz	r3, 8772 <pwm_nrfx_pin_set+0xb2>
    876c:	89a2      	ldrh	r2, [r4, #12]
    876e:	429a      	cmp	r2, r3
    8770:	d8c1      	bhi.n	86f6 <pwm_nrfx_pin_set+0x36>
		      !any_other_channel_is_active(channel, data);
    8772:	4621      	mov	r1, r4
    8774:	4628      	mov	r0, r5
    8776:	f7ff ff8e 	bl	8696 <any_other_channel_is_active>
	was_stopped = !pwm_channel_is_active(channel, data) &&
    877a:	f080 0001 	eor.w	r0, r0, #1
    877e:	b2c0      	uxtb	r0, r0
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
    8780:	7bb9      	ldrb	r1, [r7, #14]
    8782:	2901      	cmp	r1, #1
		period_cycles /= 2;
    8784:	bf04      	itt	eq
    8786:	0876      	lsreq	r6, r6, #1
		pulse_cycles /= 2;
    8788:	ea4f 0959 	moveq.w	r9, r9, lsr #1
	if (period_cycles != 0 && period_cycles != data->period_cycles) {
    878c:	b326      	cbz	r6, 87d8 <pwm_nrfx_pin_set+0x118>
    878e:	6823      	ldr	r3, [r4, #0]
    8790:	42b3      	cmp	r3, r6
    8792:	d021      	beq.n	87d8 <pwm_nrfx_pin_set+0x118>
    8794:	2300      	movs	r3, #0
				data->current[i]
    8796:	f104 0c04 	add.w	ip, r4, #4
		if (i != channel) {
    879a:	b2da      	uxtb	r2, r3
    879c:	42aa      	cmp	r2, r5
    879e:	d005      	beq.n	87ac <pwm_nrfx_pin_set+0xec>
			uint16_t channel_pulse_cycle =
    87a0:	f83c 2013 	ldrh.w	r2, [ip, r3, lsl #1]
			if (channel_pulse_cycle > 0) {
    87a4:	f3c2 020e 	ubfx	r2, r2, #0, #15
    87a8:	2a00      	cmp	r2, #0
    87aa:	d1a1      	bne.n	86f0 <pwm_nrfx_pin_set+0x30>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
    87ac:	3301      	adds	r3, #1
    87ae:	2b04      	cmp	r3, #4
    87b0:	d1f3      	bne.n	879a <pwm_nrfx_pin_set+0xda>
    87b2:	4632      	mov	r2, r6
    87b4:	2300      	movs	r3, #0
		if (countertop <= PWM_COUNTERTOP_COUNTERTOP_Msk) {
    87b6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    87ba:	fa5f fc83 	uxtb.w	ip, r3
    87be:	d29c      	bcs.n	86fa <pwm_nrfx_pin_set+0x3a>
			data->prescaler     = prescaler;
    87c0:	f884 c00e 	strb.w	ip, [r4, #14]
			nrf_pwm_configure(config->pwm.p_registers,
    87c4:	f8d7 c000 	ldr.w	ip, [r7]
			data->period_cycles = period_cycles;
    87c8:	6026      	str	r6, [r4, #0]
			data->countertop    = (uint16_t)countertop;
    87ca:	81a2      	strh	r2, [r4, #12]
    p_reg->PRESCALER  = base_clock;
    87cc:	f8cc 350c 	str.w	r3, [ip, #1292]	; 0x50c
    p_reg->MODE       = mode;
    87d0:	f8cc 1504 	str.w	r1, [ip, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
    87d4:	f8cc 2508 	str.w	r2, [ip, #1288]	; 0x508
		| (pulse_cycles >> data->prescaler));
    87d8:	7ba2      	ldrb	r2, [r4, #14]
	pulse_cycles = MIN(pulse_cycles, period_cycles);
    87da:	454e      	cmp	r6, r9
    87dc:	4633      	mov	r3, r6
    87de:	bf28      	it	cs
    87e0:	464b      	movcs	r3, r9
		| (pulse_cycles >> data->prescaler));
    87e2:	fa23 f202 	lsr.w	r2, r3, r2
		(data->current[channel] & PWM_NRFX_CH_POLARITY_MASK)
    87e6:	f40b 4b00 	and.w	fp, fp, #32768	; 0x8000
		| (pulse_cycles >> data->prescaler));
    87ea:	ea42 020b 	orr.w	r2, r2, fp
    87ee:	b292      	uxth	r2, r2
	data->current[channel] = (
    87f0:	f8aa 2004 	strh.w	r2, [sl, #4]
	uint16_t pulse_cycle =
    87f4:	f3c2 020e 	ubfx	r2, r2, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    87f8:	b112      	cbz	r2, 8800 <pwm_nrfx_pin_set+0x140>
    87fa:	89a1      	ldrh	r1, [r4, #12]
    87fc:	4291      	cmp	r1, r2
    87fe:	d882      	bhi.n	8706 <pwm_nrfx_pin_set+0x46>
			config->initial_config.output_pins[channel]
    8800:	197a      	adds	r2, r7, r5
    8802:	f992 2008 	ldrsb.w	r2, [r2, #8]
			&& !channel_inverted_state;
    8806:	2b00      	cmp	r3, #0
    8808:	d082      	beq.n	8710 <pwm_nrfx_pin_set+0x50>
			&& channel_inverted_state;
    880a:	454e      	cmp	r6, r9
    880c:	d805      	bhi.n	881a <pwm_nrfx_pin_set+0x15a>
    880e:	2a00      	cmp	r2, #0
    8810:	db80      	blt.n	8714 <pwm_nrfx_pin_set+0x54>
    8812:	e002      	b.n	881a <pwm_nrfx_pin_set+0x15a>
		if (pulse_0_and_not_inverted || pulse_100_and_inverted) {
    8814:	2a00      	cmp	r2, #0
    8816:	f6bf af7d 	bge.w	8714 <pwm_nrfx_pin_set+0x54>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    881a:	a801      	add	r0, sp, #4
    881c:	f8cd 8004 	str.w	r8, [sp, #4]
    8820:	f7fa fd74 	bl	330c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    8824:	9a01      	ldr	r2, [sp, #4]
    8826:	2301      	movs	r3, #1
    8828:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    882a:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    882e:	e77b      	b.n	8728 <pwm_nrfx_pin_set+0x68>

00008830 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    8830:	6843      	ldr	r3, [r0, #4]
    8832:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    8834:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    8838:	05d1      	lsls	r1, r2, #23
    883a:	d518      	bpl.n	886e <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    883c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    8840:	b1aa      	cbz	r2, 886e <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    8842:	f04f 0120 	mov.w	r1, #32
    8846:	f3ef 8211 	mrs	r2, BASEPRI
    884a:	f381 8812 	msr	BASEPRI_MAX, r1
    884e:	f3bf 8f6f 	isb	sy
    8852:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    8856:	b131      	cbz	r1, 8866 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8858:	2100      	movs	r1, #0
    885a:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    885e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8862:	2101      	movs	r1, #1
    8864:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    8866:	f382 8811 	msr	BASEPRI, r2
    886a:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    886e:	6842      	ldr	r2, [r0, #4]
    8870:	6852      	ldr	r2, [r2, #4]
    8872:	06d2      	lsls	r2, r2, #27
    8874:	d515      	bpl.n	88a2 <uarte_nrfx_isr_int+0x72>
	__asm__ volatile(
    8876:	f04f 0120 	mov.w	r1, #32
    887a:	f3ef 8211 	mrs	r2, BASEPRI
    887e:	f381 8812 	msr	BASEPRI_MAX, r1
    8882:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8886:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    888a:	b111      	cbz	r1, 8892 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    888c:	2100      	movs	r1, #0
    888e:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    8892:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    8896:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    889a:	f382 8811 	msr	BASEPRI, r2
    889e:	f3bf 8f6f 	isb	sy
}
    88a2:	4770      	bx	lr

000088a4 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    88a4:	6902      	ldr	r2, [r0, #16]
{
    88a6:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    88a8:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    88ac:	e883 0003 	stmia.w	r3, {r0, r1}
}
    88b0:	2000      	movs	r0, #0
    88b2:	4770      	bx	lr

000088b4 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    88b4:	6843      	ldr	r3, [r0, #4]
    88b6:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    88b8:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    88bc:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    88c0:	4770      	bx	lr

000088c2 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    88c2:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    88c4:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    88c6:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    88ca:	b940      	cbnz	r0, 88de <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    88cc:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    88ce:	0792      	lsls	r2, r2, #30
    88d0:	d406      	bmi.n	88e0 <is_tx_ready+0x1e>
    88d2:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    88d6:	3800      	subs	r0, #0
    88d8:	bf18      	it	ne
    88da:	2001      	movne	r0, #1
    88dc:	4770      	bx	lr
    88de:	2001      	movs	r0, #1
}
    88e0:	4770      	bx	lr

000088e2 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    88e2:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    88e4:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    88e6:	681b      	ldr	r3, [r3, #0]
    88e8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    88ec:	b148      	cbz	r0, 8902 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    88ee:	7c52      	ldrb	r2, [r2, #17]
    88f0:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    88f2:	2000      	movs	r0, #0
    88f4:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    88f8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    88fc:	2201      	movs	r2, #1
    88fe:	601a      	str	r2, [r3, #0]
	return 0;
    8900:	4770      	bx	lr
		return -1;
    8902:	f04f 30ff 	mov.w	r0, #4294967295
}
    8906:	4770      	bx	lr

00008908 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    8908:	b510      	push	{r4, lr}
    890a:	2200      	movs	r2, #0
    890c:	4604      	mov	r4, r0
    890e:	2101      	movs	r1, #1
    8910:	2002      	movs	r0, #2
    8912:	f7f9 fa21 	bl	1d58 <z_arm_irq_priority_set>
    8916:	2002      	movs	r0, #2
    8918:	f7f9 fa00 	bl	1d1c <arch_irq_enable>
    891c:	4620      	mov	r0, r4
    891e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8922:	f7fa be8b 	b.w	363c <uarte_instance_init.isra.0>

00008926 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    8926:	b510      	push	{r4, lr}
    8928:	2200      	movs	r2, #0
    892a:	4604      	mov	r4, r0
    892c:	2101      	movs	r1, #1
    892e:	2028      	movs	r0, #40	; 0x28
    8930:	f7f9 fa12 	bl	1d58 <z_arm_irq_priority_set>
    8934:	2028      	movs	r0, #40	; 0x28
    8936:	f7f9 f9f1 	bl	1d1c <arch_irq_enable>
    893a:	4620      	mov	r0, r4
    893c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8940:	f7fa be7c 	b.w	363c <uarte_instance_init.isra.0>

00008944 <sys_clock_cycle_get_32>:
{
    8944:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    8946:	f7fa ffd7 	bl	38f8 <z_nrf_rtc_timer_read>
}
    894a:	bd08      	pop	{r3, pc}

0000894c <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    894c:	4770      	bx	lr

0000894e <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    894e:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    8950:	2000      	movs	r0, #0
    8952:	f7f9 fe1d 	bl	2590 <sys_arch_reboot>

00008956 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    8956:	f7ff bac3 	b.w	7ee0 <nrf_cc3xx_platform_init_no_rng>

0000895a <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    895a:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    895c:	f7f8 fc5e 	bl	121c <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    8960:	f7f8 fd10 	bl	1384 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    8964:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    8968:	f7ff baba 	b.w	7ee0 <nrf_cc3xx_platform_init_no_rng>

0000896c <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    896c:	4700      	bx	r0

0000896e <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    896e:	f000 b916 	b.w	8b9e <z_impl_k_busy_wait>

00008972 <nrf_gpio_pin_present_check>:
    switch (port)
    8972:	0943      	lsrs	r3, r0, #5
    8974:	d00b      	beq.n	898e <nrf_gpio_pin_present_check+0x1c>
    8976:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    8978:	f64f 73ff 	movw	r3, #65535	; 0xffff
    897c:	bf18      	it	ne
    897e:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    8980:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
    8984:	fa23 f000 	lsr.w	r0, r3, r0
}
    8988:	f000 0001 	and.w	r0, r0, #1
    898c:	4770      	bx	lr
    switch (port)
    898e:	f04f 33ff 	mov.w	r3, #4294967295
    8992:	e7f5      	b.n	8980 <nrf_gpio_pin_present_check+0xe>

00008994 <nrf_gpiote_in_event_get>:
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    8994:	0080      	lsls	r0, r0, #2
}
    8996:	f500 7080 	add.w	r0, r0, #256	; 0x100
    899a:	4770      	bx	lr

0000899c <nrf_gpio_reconfigure>:
{
    899c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    89a0:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    89a2:	a801      	add	r0, sp, #4
{
    89a4:	460e      	mov	r6, r1
    89a6:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    89aa:	4690      	mov	r8, r2
    89ac:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    89ae:	f7fb fb9d 	bl	40ec <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    89b2:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    89b4:	f1b8 0f00 	cmp.w	r8, #0
    89b8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    89bc:	bf14      	ite	ne
    89be:	2302      	movne	r3, #2
    89c0:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    89c2:	2e00      	cmp	r6, #0
    89c4:	bf18      	it	ne
    89c6:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    89ca:	2d00      	cmp	r5, #0
    89cc:	bf14      	ite	ne
    89ce:	210c      	movne	r1, #12
    89d0:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    89d2:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    89d4:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    89d8:	bf14      	ite	ne
    89da:	f44f 61e0 	movne.w	r1, #1792	; 0x700
    89de:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    89e0:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    89e2:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    89e6:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    89ea:	bf14      	ite	ne
    89ec:	f44f 3140 	movne.w	r1, #196608	; 0x30000
    89f0:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    89f2:	430b      	orrs	r3, r1
    cnf &= ~to_update;
    89f4:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    89f8:	b106      	cbz	r6, 89fc <nrf_gpio_reconfigure+0x60>
    89fa:	7836      	ldrb	r6, [r6, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    89fc:	f1b8 0f00 	cmp.w	r8, #0
    8a00:	d003      	beq.n	8a0a <nrf_gpio_reconfigure+0x6e>
    8a02:	f898 8000 	ldrb.w	r8, [r8]
    8a06:	ea4f 0848 	mov.w	r8, r8, lsl #1
    8a0a:	431e      	orrs	r6, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    8a0c:	b10d      	cbz	r5, 8a12 <nrf_gpio_reconfigure+0x76>
    8a0e:	782d      	ldrb	r5, [r5, #0]
    8a10:	00ad      	lsls	r5, r5, #2
    8a12:	ea46 0608 	orr.w	r6, r6, r8
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    8a16:	b10c      	cbz	r4, 8a1c <nrf_gpio_reconfigure+0x80>
    8a18:	7822      	ldrb	r2, [r4, #0]
    8a1a:	0214      	lsls	r4, r2, #8
    8a1c:	4335      	orrs	r5, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    8a1e:	b10f      	cbz	r7, 8a24 <nrf_gpio_reconfigure+0x88>
    8a20:	783f      	ldrb	r7, [r7, #0]
    8a22:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    8a24:	432c      	orrs	r4, r5
    8a26:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    8a28:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    8a2c:	b002      	add	sp, #8
    8a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008a32 <nrf_gpio_cfg_sense_set>:
{
    8a32:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    8a34:	f10d 030f 	add.w	r3, sp, #15
    8a38:	9301      	str	r3, [sp, #4]
    8a3a:	2300      	movs	r3, #0
{
    8a3c:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    8a40:	9300      	str	r3, [sp, #0]
    8a42:	461a      	mov	r2, r3
    8a44:	4619      	mov	r1, r3
    8a46:	f7ff ffa9 	bl	899c <nrf_gpio_reconfigure>
}
    8a4a:	b005      	add	sp, #20
    8a4c:	f85d fb04 	ldr.w	pc, [sp], #4

00008a50 <start_playback.isra.0>:
static uint32_t start_playback(nrfx_pwm_t const * p_instance,
    8a50:	b510      	push	{r4, lr}
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    8a52:	2402      	movs	r4, #2
    8a54:	720c      	strb	r4, [r1, #8]
    p_cb->flags = flags;
    8a56:	724a      	strb	r2, [r1, #9]
    if (p_cb->handler)
    8a58:	6809      	ldr	r1, [r1, #0]
    8a5a:	b171      	cbz	r1, 8a7a <start_playback.isra.0+0x2a>
            int_mask |= NRF_PWM_INT_SEQEND0_MASK;
    8a5c:	f012 0f04 	tst.w	r2, #4
    8a60:	bf0c      	ite	eq
    8a62:	2182      	moveq	r1, #130	; 0x82
    8a64:	2192      	movne	r1, #146	; 0x92
        if (flags & NRFX_PWM_FLAG_SIGNAL_END_SEQ1)
    8a66:	0714      	lsls	r4, r2, #28
            int_mask |= NRF_PWM_INT_SEQEND1_MASK;
    8a68:	bf48      	it	mi
    8a6a:	f041 0120 	orrmi.w	r1, r1, #32
        if (flags & NRFX_PWM_FLAG_NO_EVT_FINISHED)
    8a6e:	06d4      	lsls	r4, r2, #27
            int_mask &= ~NRF_PWM_INT_LOOPSDONE_MASK;
    8a70:	bf48      	it	mi
    8a72:	f021 0180 	bicmi.w	r1, r1, #128	; 0x80
    p_reg->INTEN = mask;
    8a76:	f8c0 1300 	str.w	r1, [r0, #768]	; 0x300
    if (flags & NRFX_PWM_FLAG_START_VIA_TASK)
    8a7a:	0612      	lsls	r2, r2, #24
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8a7c:	f04f 0100 	mov.w	r1, #0
    8a80:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8a84:	bf58      	it	pl
    8a86:	2201      	movpl	r2, #1
    8a88:	f8d0 4104 	ldr.w	r4, [r0, #260]	; 0x104
    8a8c:	bf56      	itet	pl
    8a8e:	50c2      	strpl	r2, [r0, r3]
    return ((uint32_t)p_reg + (uint32_t)task);
    8a90:	18c0      	addmi	r0, r0, r3
    return 0;
    8a92:	4608      	movpl	r0, r1
}
    8a94:	bd10      	pop	{r4, pc}

00008a96 <z_device_state_init>:
}
    8a96:	4770      	bx	lr

00008a98 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    8a98:	b138      	cbz	r0, 8aaa <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    8a9a:	68c3      	ldr	r3, [r0, #12]
    8a9c:	8818      	ldrh	r0, [r3, #0]
    8a9e:	f3c0 0008 	ubfx	r0, r0, #0, #9
    8aa2:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    8aa6:	4258      	negs	r0, r3
    8aa8:	4158      	adcs	r0, r3
}
    8aaa:	4770      	bx	lr

00008aac <z_pm_save_idle_exit>:
{
    8aac:	b508      	push	{r3, lr}
	pm_system_resume();
    8aae:	f7f8 ffc5 	bl	1a3c <pm_system_resume>
}
    8ab2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    8ab6:	f7ff bf49 	b.w	894c <sys_clock_idle_exit>

00008aba <k_mem_slab_init>:
{
    8aba:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    8abc:	2400      	movs	r4, #0
    8abe:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    8ac0:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    8ac2:	ea41 0402 	orr.w	r4, r1, r2
    8ac6:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    8aca:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
    8ace:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    8ad0:	d10c      	bne.n	8aec <k_mem_slab_init+0x32>
	slab->free_list = NULL;
    8ad2:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    8ad4:	42a3      	cmp	r3, r4
    8ad6:	d103      	bne.n	8ae0 <k_mem_slab_init+0x26>
    8ad8:	e9c0 0000 	strd	r0, r0, [r0]
}
    8adc:	2000      	movs	r0, #0
}
    8ade:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    8ae0:	6985      	ldr	r5, [r0, #24]
    8ae2:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    8ae4:	3401      	adds	r4, #1
		slab->free_list = p;
    8ae6:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
    8ae8:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    8aea:	e7f3      	b.n	8ad4 <k_mem_slab_init+0x1a>
		return -EINVAL;
    8aec:	f06f 0015 	mvn.w	r0, #21
	return rc;
    8af0:	e7f5      	b.n	8ade <k_mem_slab_init+0x24>

00008af2 <z_impl_k_mutex_init>:
{
    8af2:	4603      	mov	r3, r0
	mutex->owner = NULL;
    8af4:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    8af6:	e9c3 0002 	strd	r0, r0, [r3, #8]
    8afa:	e9c3 3300 	strd	r3, r3, [r3]
}
    8afe:	4770      	bx	lr

00008b00 <z_handle_obj_poll_events>:
{
    8b00:	4603      	mov	r3, r0
	return list->head == list;
    8b02:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
    8b04:	4283      	cmp	r3, r0
    8b06:	d008      	beq.n	8b1a <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
    8b08:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    8b0c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    8b0e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    8b10:	2300      	movs	r3, #0
	node->prev = NULL;
    8b12:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
    8b16:	f7fc bde5 	b.w	56e4 <signal_poll_event>
}
    8b1a:	4770      	bx	lr

00008b1c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    8b1c:	4603      	mov	r3, r0
    8b1e:	b920      	cbnz	r0, 8b2a <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    8b20:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    8b24:	b90a      	cbnz	r2, 8b2a <z_reschedule_irqlock+0xe>
    8b26:	f7f9 b967 	b.w	1df8 <arch_swap>
    8b2a:	f383 8811 	msr	BASEPRI, r3
    8b2e:	f3bf 8f6f 	isb	sy
}
    8b32:	4770      	bx	lr

00008b34 <z_reschedule_unlocked>:
	__asm__ volatile(
    8b34:	f04f 0320 	mov.w	r3, #32
    8b38:	f3ef 8011 	mrs	r0, BASEPRI
    8b3c:	f383 8812 	msr	BASEPRI_MAX, r3
    8b40:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    8b44:	f7ff bfea 	b.w	8b1c <z_reschedule_irqlock>

00008b48 <z_priq_dumb_best>:
{
    8b48:	4603      	mov	r3, r0
	return list->head == list;
    8b4a:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8b4c:	4283      	cmp	r3, r0
    8b4e:	d003      	beq.n	8b58 <z_priq_dumb_best+0x10>
	if (n != NULL) {
    8b50:	2800      	cmp	r0, #0
    8b52:	bf38      	it	cc
    8b54:	2000      	movcc	r0, #0
    8b56:	4770      	bx	lr
	struct k_thread *thread = NULL;
    8b58:	2000      	movs	r0, #0
}
    8b5a:	4770      	bx	lr

00008b5c <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    8b5c:	b15a      	cbz	r2, 8b76 <z_impl_k_sem_init+0x1a>
    8b5e:	428a      	cmp	r2, r1
    8b60:	d309      	bcc.n	8b76 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
    8b62:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
    8b66:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
    8b6a:	e9c0 0000 	strd	r0, r0, [r0]
    8b6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
    8b72:	2000      	movs	r0, #0
    8b74:	4770      	bx	lr
		return -EINVAL;
    8b76:	f06f 0015 	mvn.w	r0, #21
}
    8b7a:	4770      	bx	lr

00008b7c <k_is_in_isr>:
    8b7c:	f3ef 8005 	mrs	r0, IPSR
}
    8b80:	3800      	subs	r0, #0
    8b82:	bf18      	it	ne
    8b84:	2001      	movne	r0, #1
    8b86:	4770      	bx	lr

00008b88 <z_impl_k_thread_name_set>:
}
    8b88:	f06f 0057 	mvn.w	r0, #87	; 0x57
    8b8c:	4770      	bx	lr

00008b8e <z_impl_k_thread_start>:
	z_sched_start(thread);
    8b8e:	f7fd ba27 	b.w	5fe0 <z_sched_start>

00008b92 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    8b92:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    8b94:	f7fe fdcc 	bl	7730 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    8b98:	bd08      	pop	{r3, pc}

00008b9a <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    8b9a:	f7fe bdc9 	b.w	7730 <sys_clock_tick_get>

00008b9e <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    8b9e:	b108      	cbz	r0, 8ba4 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    8ba0:	f7f9 bd0c 	b.w	25bc <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    8ba4:	4770      	bx	lr

00008ba6 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    8ba6:	b510      	push	{r4, lr}
    8ba8:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    8baa:	f7fe fc0f 	bl	73cc <z_abort_timeout>

	if (inactive) {
    8bae:	b9b0      	cbnz	r0, 8bde <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    8bb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8bb2:	b10b      	cbz	r3, 8bb8 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    8bb4:	4620      	mov	r0, r4
    8bb6:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    8bb8:	f104 0018 	add.w	r0, r4, #24
    8bbc:	f7fd fd2c 	bl	6618 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    8bc0:	b168      	cbz	r0, 8bde <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    8bc2:	f7fd f9c5 	bl	5f50 <z_ready_thread>
    8bc6:	f04f 0320 	mov.w	r3, #32
    8bca:	f3ef 8011 	mrs	r0, BASEPRI
    8bce:	f383 8812 	msr	BASEPRI_MAX, r3
    8bd2:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    8bd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8bda:	f7ff bf9f 	b.w	8b1c <z_reschedule_irqlock>
    8bde:	bd10      	pop	{r4, pc}

00008be0 <notify_queue_locked>:
	if (queue != NULL) {
    8be0:	b120      	cbz	r0, 8bec <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    8be2:	2200      	movs	r2, #0
    8be4:	4611      	mov	r1, r2
    8be6:	3088      	adds	r0, #136	; 0x88
    8be8:	f7fe b812 	b.w	6c10 <z_sched_wake>
}
    8bec:	4770      	bx	lr

00008bee <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    8bee:	4770      	bx	lr

00008bf0 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    8bf0:	f7fc b850 	b.w	4c94 <SystemInit>
